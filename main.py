from fastapi import FastAPI, Request, HTTPException, Header, Depends
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from contextlib import asynccontextmanager
from typing import Optional
import sys
import os



# Fix –¥–ª—è Windows asyncio
if sys.platform == 'win32':
    import asyncio
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from db.database import init_db_pool, close_db_pool, get_db_connection
from db.utils import generate_test_topics, get_test_progress
import config

import anthropic
import httpx

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Claude client
http_client = httpx.Client(timeout=30.0)
claude_client = anthropic.Anthropic(
    api_key=config.ANTHROPIC_API_KEY,
    http_client=http_client
)

from auth import create_access_token, verify_token

# ===== DEPENDENCY =====
async def get_current_user(authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞"""
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    token = authorization.replace("Bearer ", "")
    user_data = verify_token(token)
    
    if not user_data:
        raise HTTPException(status_code=401, detail="Invalid token")
    
    return user_data

# ===== AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (MOCK –î–õ–Ø –¢–ï–°–¢–ê) =====
async def generate_ai_recommendation(user_test_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
                await cur.execute("""
                    SELECT 
                        ut.score,
                        ut.max_score,
                        s.name as specialization_name,
                        u.name,
                        u.surname
                    FROM user_specialization_tests ut
                    JOIN specializations s ON s.id = ut.specialization_id
                    JOIN users u ON u.id = ut.user_id
                    WHERE ut.id = %s
                """, (user_test_id,))
                
                test_data = await cur.fetchone()
                if not test_data:
                    return None
                
                score, max_score, specialization, name, surname = test_data
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                percentage = (score / max_score) * 100
                if percentage >= 80:
                    level = "Senior"
                elif percentage >= 50:
                    level = "Middle"
                else:
                    level = "Junior"
                
                # ========================================
                # MOCK –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø (–ë–ï–ó CLAUDE API)
                # ========================================
                recommendation = f"""–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {name}, –≤—ã –ø–æ–∫–∞–∑–∞–ª–∏ {level} —É—Ä–æ–≤–µ–Ω—å –≤ –æ–±–ª–∞—Å—Ç–∏ "{specialization}" ({score}/{max_score} –±–∞–ª–ª–æ–≤). –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏."""
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await cur.execute(
                    """INSERT INTO ai_recommendations (user_test_id, recommendation_text)
                       VALUES (%s, %s)""",
                    (user_test_id, recommendation)
                )
                
                return recommendation
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
        return "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ."

# # ===== AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) =====
# async def generate_ai_recommendation(user_test_id: int):
#     """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
#     try:
#         async with get_db_connection() as conn:
#             async with conn.cursor() as cur:
#                 # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
#                 await cur.execute("""
#                     SELECT 
#                         ut.score,
#                         ut.max_score,
#                         s.name as specialization_name,
#                         u.name,
#                         u.surname
#                     FROM user_specialization_tests ut
#                     JOIN specializations s ON s.id = ut.specialization_id
#                     JOIN users u ON u.id = ut.user_id
#                     WHERE ut.id = %s
#                 """, (user_test_id,))
                
#                 test_data = await cur.fetchone()
#                 if not test_data:
#                     return None
                
#                 score, max_score, specialization, name, surname = test_data
                
#                 # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –° –¢–ï–ú–ê–ú–ò
#                 await cur.execute("""
#                     SELECT 
#                         q.level,
#                         t.name as topic_name,
#                         ta.is_correct
#                     FROM test_answers ta
#                     JOIN questions q ON q.id = ta.question_id
#                     JOIN topics t ON t.id = q.topic_id
#                     WHERE ta.user_test_id = %s
#                     ORDER BY ta.answered_at
#                 """, (user_test_id,))

#                 answers = await cur.fetchall()

#                 # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
#                 answers_summary = []
#                 for level, topic_name, is_correct in answers:
#                     status = "‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if is_correct else "‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
#                     answers_summary.append(f"{topic_name} ({level}): {status}")

#                 answers_text = "\n".join(answers_summary)
                
#                 # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
#                 percentage = (score / max_score) * 100
#                 if percentage >= 80:
#                     level = "Senior"
#                 elif percentage >= 50:
#                     level = "Middle"
#                 else:
#                     level = "Junior"
                
#                 # –ü—Ä–æ–º–ø—Ç –¥–ª—è Claude
#                 prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –•–∞–ª—ã–∫ –±–∞–Ω–∫–∞. 

# –ö–∞–Ω–¥–∏–¥–∞—Ç: {name} {surname}
# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}
# –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{max_score} –±–∞–ª–ª–æ–≤ (—É—Ä–æ–≤–µ–Ω—å {level})

# –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤:
# {answers_text}

# –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
# - –û—Ç–º–µ—Ç—å —á—Ç–æ –æ—Å–≤–æ–µ–Ω–æ —Ö–æ—Ä–æ—à–æ
# - –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã (Junior/Middle/Senior –≤–æ–ø—Ä–æ—Å—ã)
# - –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è

# –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π."""

#                 # –í—ã–∑—ã–≤–∞–µ–º Claude API
#                 message = claude_client.messages.create(
#                     model="claude-sonnet-4-20250514",
#                     max_tokens=300,
#                     messages=[{"role": "user", "content": prompt}]
#                 )
                
#                 recommendation = message.content[0].text.strip()
                
#                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
#                 await cur.execute(
#                     """INSERT INTO ai_recommendations (user_test_id, recommendation_text)
#                        VALUES (%s, %s)""",
#                     (user_test_id, recommendation)
#                 )
                
#                 return recommendation
                
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
#         return "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ."

# ===== LIFECYCLE =====
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle events"""
    print("üöÄ Starting application...")
    await init_db_pool()
    print("‚úÖ Database pool ready")
    
    yield
    
    print("üîÑ Shutting down...")
    await close_db_pool()

app = FastAPI(
    title="Halyk HR Forum",
    description="–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π",
    lifespan=lifespan
)

# Static
app.mount("/static", StaticFiles(directory="static"), name="static")

# ===== PYDANTIC MODELS =====
class UserRegister(BaseModel):
    name: str
    surname: str
    phone: Optional[str] = None
    company: Optional[str] = None
    job_title: Optional[str] = None

class SpecializationSelect(BaseModel):
    specialization_id: int

class TestStart(BaseModel):
    specialization_id: int

class AnswerSubmit(BaseModel):
    user_test_id: int
    question_id: int
    user_answer: int

class LoginRequest(BaseModel):
    phone: str

class SQLQuery(BaseModel):
    query: str

# ===== HTML PAGES =====
@app.get("/", response_class=HTMLResponse)
async def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    with open('templates/index.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())

@app.get("/specializations", response_class=HTMLResponse)
async def specializations_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    with open('templates/specializations.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())
    
@app.get("/test", response_class=HTMLResponse)
async def test_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    with open('templates/test.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())
    
@app.get("/results", response_class=HTMLResponse)
async def results_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    with open('templates/results.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())
    

from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

limiter = Limiter(key_func=get_remote_address, storage_uri="memory://")
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

from fastapi.security import HTTPBasic, HTTPBasicCredentials

security = HTTPBasic()

def verify_hr_password(credentials: HTTPBasicCredentials = Depends(security)):
    correct_password = os.getenv("HR_PASSWORD", "halyk2024")
    if credentials.password != correct_password:
        raise HTTPException(status_code=401, detail="Incorrect password", headers={"WWW-Authenticate": "Basic"})
    return credentials

@app.get("/hr", response_class=HTMLResponse)
async def hr_login_page(credentials: HTTPBasicCredentials = Depends(verify_hr_password)):
    with open('templates/hr_login.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())

@app.get("/hr/dashboard", response_class=HTMLResponse)
async def hr_dashboard_page(credentials: HTTPBasicCredentials = Depends(verify_hr_password)):
    with open('templates/dashboard.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())

@app.get("/hr/database", response_class=HTMLResponse)
async def hr_database_page(credentials: HTTPBasicCredentials = Depends(verify_hr_password)):
    with open('templates/hr_panel.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())

@app.get("/health")
async def health():
    return {"status": "ok", "service": "halyk-hr-forum"}

# ===== API: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) =====
@app.post("/api/login")
async def login(request: LoginRequest):
    """–í—Ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    "SELECT id, name, surname FROM users WHERE phone = %s",
                    (request.phone,)
                )
                user = await cur.fetchone()
                
                if user:
                    token = create_access_token(user_id=user[0], phone=request.phone)
                    
                    return {
                        "status": "found",
                        "user_id": user[0],
                        "name": user[1],
                        "surname": user[2],
                        "token": token
                    }
                else:
                    return {"status": "not_found"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/register")
@limiter.limit("3/day")
async def register_user(request: Request, user: UserRegister):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    """INSERT INTO users (name, surname, phone, company, job_title)
                       VALUES (%s, %s, %s, %s, %s) RETURNING id""",
                    (user.name, user.surname, user.phone, user.company, user.job_title)
                )
                user_id = (await cur.fetchone())[0]
        
        token = create_access_token(user_id=user_id, phone=user.phone)
        
        return {
            "status": "success",
            "user_id": user_id,
            "token": token
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ===== API: PROFILES & SPECIALIZATIONS =====
@app.get("/api/profiles")
async def get_profiles():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"""
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    "SELECT id, name, has_specializations FROM profiles ORDER BY id"
                )
                rows = await cur.fetchall()
        
        profiles = [
            {
                "id": row[0], 
                "name": row[1], 
                "has_specializations": row[2]
            }
            for row in rows
        ]
        
        return {"status": "success", "profiles": profiles}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/profiles/{profile_id}/specializations")
async def get_specializations(profile_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    """SELECT id, name FROM specializations 
                       WHERE profile_id = %s ORDER BY id""",
                    (profile_id,)
                )
                rows = await cur.fetchall()
        
        specializations = [
            {"id": row[0], "name": row[1]}
            for row in rows
        ]
        
        return {"status": "success", "specializations": specializations}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ===== API: –ó–ê–©–ò–©–ï–ù–ù–´–ï ENDPOINTS =====
@app.post("/api/select-specialization")
async def select_specialization(data: SpecializationSelect, current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    user_id = current_user["user_id"]
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    """INSERT INTO user_specialization_selections (user_id, specialization_id)
                       VALUES (%s, %s)
                       ON CONFLICT DO NOTHING
                       RETURNING id""",
                    (user_id, data.specialization_id)
                )
        
        return {"status": "success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/my-specializations")
async def get_my_specializations(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —é–∑–µ—Ä–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    user_id = current_user["user_id"]
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT 
                        s.id,
                        s.name,
                        p.name as profile_name,
                        ut.id as user_test_id,
                        ut.score,
                        ut.max_score,
                        ut.completed_at,
                        ut.started_at
                    FROM user_specialization_selections uss
                    JOIN specializations s ON s.id = uss.specialization_id
                    JOIN profiles p ON p.id = s.profile_id
                    LEFT JOIN user_specialization_tests ut ON ut.specialization_id = s.id AND ut.user_id = %s
                    WHERE uss.user_id = %s
                    ORDER BY uss.selected_at DESC
                """, (user_id, user_id))
                
                rows = await cur.fetchall()
        
        specializations = []
        for row in rows:
            status = "not_started"
            if row[7]:  # started_at
                if row[6]:  # completed_at
                    status = "completed"
                else:
                    status = "in_progress"
            
            specializations.append({
                "id": row[0],
                "name": row[1],
                "profile_name": row[2],
                "user_test_id": row[3],
                "score": row[4],
                "max_score": row[5],
                "status": status
            })
        
        return {"status": "success", "specializations": specializations}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/start-test")
async def start_test(data: TestStart, current_user: dict = Depends(get_current_user)):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = current_user["user_id"]
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç
                await cur.execute(
                    """SELECT id FROM user_specialization_tests 
                       WHERE user_id = %s AND specialization_id = %s""",
                    (user_id, data.specialization_id)
                )
                existing = await cur.fetchone()
                
                if existing:
                    user_test_id = existing[0]
                    print(f"‚úÖ Existing test found: user_test_id={user_test_id}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
                    await cur.execute(
                        """INSERT INTO user_specialization_tests (user_id, specialization_id, max_score)
                           VALUES (%s, %s, 24) RETURNING id""",
                        (user_id, data.specialization_id)
                    )
                    user_test_id = (await cur.fetchone())[0]
                    print(f"üÜï Created new test: user_test_id={user_test_id}")
                    
                    # ‚≠ê –ì–ï–ù–ï–†–ò–†–£–ï–ú 8 –¢–ï–ú
                    await generate_test_topics(user_test_id, data.specialization_id)
                    print(f"‚úÖ Generated 8 topics for user_test_id={user_test_id}")
        
        return {"status": "success", "user_test_id": user_test_id}
    except Exception as e:
        print(f"‚ùå Error in start_test: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/test/{user_test_id}/questions")
async def get_test_questions(user_test_id: int, current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º"""
    user_id = current_user["user_id"]
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await cur.execute(
                    "SELECT user_id FROM user_specialization_tests WHERE id = %s",
                    (user_test_id,)
                )
                test_data = await cur.fetchone()
                
                if not test_data or test_data[0] != user_id:
                    raise HTTPException(status_code=403, detail="Access denied")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
                await cur.execute("""
                    SELECT 
                        c.id as competency_id,
                        c.name as competency_name,
                        q.id as question_id,
                        q.level,
                        q.question_text,
                        q.var_1,
                        q.var_2,
                        q.var_3,
                        q.var_4,
                        t.name as topic_name,
                        utt.topic_order,
                        ta.user_answer,
                        ta.is_correct
                    FROM user_test_topics utt
                    JOIN topics t ON t.id = utt.topic_id
                    JOIN competencies c ON c.id = utt.competency_id
                    JOIN questions q ON q.topic_id = t.id
                    LEFT JOIN test_answers ta ON ta.question_id = q.id AND ta.user_test_id = utt.user_test_id
                    WHERE utt.user_test_id = %s
                    ORDER BY utt.topic_order, 
                             CASE q.level 
                                WHEN 'Junior' THEN 1 
                                WHEN 'Middle' THEN 2 
                                WHEN 'Senior' THEN 3 
                             END
                """, (user_test_id,))
                
                rows = await cur.fetchall()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
        competencies_dict = {}
        all_questions = []
        
        for row in rows:
            comp_id = row[0]
            
            if comp_id not in competencies_dict:
                competencies_dict[comp_id] = {
                    "id": comp_id,
                    "name": row[1],
                    "questions": []
                }
            
            question = {
                "question_id": row[2],
                "level": row[3],
                "question_text": row[4],
                "options": [row[5], row[6], row[7], row[8]],
                "topic_name": row[9],
                "is_answered": row[11] is not None,
                "user_answer": row[11],
                "is_correct": row[12]
            }
            
            competencies_dict[comp_id]["questions"].append(question)
            all_questions.append(question)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress = await get_test_progress(user_test_id)
        
        return {
            "status": "success",
            "questions": all_questions,
            "competencies": list(competencies_dict.values()),
            "progress": progress
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/submit-answer")
async def submit_answer(data: AnswerSubmit, current_user: dict = Depends(get_current_user)):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    user_id = current_user["user_id"]
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await cur.execute(
                    "SELECT user_id, current_question_number FROM user_specialization_tests WHERE id = %s",
                    (data.user_test_id,)
                )
                test_user = await cur.fetchone()
                
                if not test_user or test_user[0] != user_id:
                    raise HTTPException(status_code=403, detail="Access denied")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                await cur.execute(
                    "SELECT correct_answer FROM questions WHERE id = %s",
                    (data.question_id,)
                )
                correct_answer = (await cur.fetchone())[0]
                
                is_correct = (data.user_answer == correct_answer)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç (ON CONFLICT - –µ—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª)
                await cur.execute(
                    """INSERT INTO test_answers 
                       (user_test_id, question_id, user_answer, is_correct)
                       VALUES (%s, %s, %s, %s)
                       ON CONFLICT (user_test_id, question_id) DO NOTHING""",
                    (data.user_test_id, data.question_id, data.user_answer, is_correct)
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º current_question_number
                current_q = test_user[1]
                await cur.execute(
                    """UPDATE user_specialization_tests 
                       SET current_question_number = %s
                       WHERE id = %s""",
                    (current_q + 1, data.user_test_id)
                )
        
        return {"status": "success", "is_correct": is_correct}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/complete-test/{user_test_id}")
async def complete_test(user_test_id: int, current_user: dict = Depends(get_current_user)):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    user_id = current_user["user_id"]
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await cur.execute(
                    "SELECT user_id, completed_at, score FROM user_specialization_tests WHERE id = %s",
                    (user_test_id,)
                )
                test_data = await cur.fetchone()
                
                if not test_data:
                    raise HTTPException(status_code=404, detail="Test not found")
                
                if test_data[0] != user_id:
                    raise HTTPException(status_code=403, detail="Access denied")
                
                # –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                if test_data[1] is not None:
                    await cur.execute(
                        "SELECT recommendation_text FROM ai_recommendations WHERE user_test_id = %s",
                        (user_test_id,)
                    )
                    rec_row = await cur.fetchone()
                    recommendation = rec_row[0] if rec_row else None
                    
                    score = test_data[2]
                    percentage = (score / 24) * 100
                    if percentage >= 80:
                        level = "Senior"
                    elif percentage >= 50:
                        level = "Middle"
                    else:
                        level = "Junior"
                    
                    return {
                        "status": "already_completed",
                        "score": score,
                        "max_score": 24,
                        "level": level,
                        "recommendation": recommendation
                    }
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã
                await cur.execute(
                    """SELECT COUNT(*) FROM test_answers 
                       WHERE user_test_id = %s AND is_correct = true""",
                    (user_test_id,)
                )
                score = (await cur.fetchone())[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º user_specialization_tests
                await cur.execute(
                    """UPDATE user_specialization_tests 
                       SET score = %s, completed_at = NOW()
                       WHERE id = %s""",
                    (score, user_test_id)
                )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        recommendation = await generate_ai_recommendation(user_test_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        percentage = (score / 24) * 100
        if percentage >= 80:
            level = "Senior"
        elif percentage >= 50:
            level = "Middle"
        else:
            level = "Junior"
        
        return {
            "status": "success",
            "score": score,
            "max_score": 24,
            "level": level,
            "recommendation": recommendation
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/results/{user_test_id}")
async def get_results(user_test_id: int, current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    user_id = current_user["user_id"]
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT 
                        ut.user_id,
                        ut.score,
                        ut.max_score,
                        ut.completed_at,
                        s.name as specialization_name,
                        ar.recommendation_text
                    FROM user_specialization_tests ut
                    JOIN specializations s ON s.id = ut.specialization_id
                    LEFT JOIN ai_recommendations ar ON ar.user_test_id = ut.id
                    WHERE ut.id = %s
                """, (user_test_id,))
                
                row = await cur.fetchone()
                
                if not row:
                    raise HTTPException(status_code=404, detail="Test not found")
                
                if row[0] != user_id:
                    raise HTTPException(status_code=403, detail="Access denied")
                
                score = row[1]
                max_score = row[2]
                percentage = (score / max_score) * 100
                
                if percentage >= 80:
                    level = "Senior"
                elif percentage >= 50:
                    level = "Middle"
                else:
                    level = "Junior"
        
        return {
            "status": "success",
            "score": score,
            "max_score": max_score,
            "level": level,
            "specialization_name": row[4],
            "recommendation": row[5]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/dashboard/stats")
async def get_dashboard_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                # –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await cur.execute("SELECT COUNT(DISTINCT id) FROM users")
                total_users = (await cur.fetchone())[0]
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ö–æ—Ç—è –±—ã 1 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–º
                await cur.execute("""
                    SELECT COUNT(DISTINCT user_id) 
                    FROM user_specialization_tests 
                    WHERE completed_at IS NOT NULL
                """)
                completed_users = (await cur.fetchone())[0]
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ—Ç–≤–µ—Ç–∏–≤—à–∏–µ >= 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ
                # –ò –ù–ï –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –ù–ò–ö–ê–ö–ò–ï –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã
                await cur.execute("""
                    SELECT COUNT(DISTINCT ut.user_id)
                    FROM user_specialization_tests ut
                    WHERE ut.completed_at IS NULL
                    AND EXISTS (
                        SELECT 1 
                        FROM test_answers ta 
                        WHERE ta.user_test_id = ut.id
                        GROUP BY ta.user_test_id
                        HAVING COUNT(*) >= 10
                    )
                    AND NOT EXISTS (
                        SELECT 1
                        FROM user_specialization_tests ut2
                        WHERE ut2.user_id = ut.user_id
                        AND ut2.completed_at IS NOT NULL
                    )
                """)
                in_progress = (await cur.fetchone())[0]
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
                await cur.execute("""
                    SELECT 
                        CASE 
                            WHEN (score::float / max_score * 100) >= 80 THEN 'Senior'
                            WHEN (score::float / max_score * 100) >= 50 THEN 'Middle'
                            ELSE 'Junior'
                        END as level,
                        COUNT(*) as count
                    FROM user_specialization_tests
                    WHERE completed_at IS NOT NULL
                    GROUP BY level
                """)
                levels_data = await cur.fetchall()
                levels = {row[0]: row[1] for row in levels_data}
                
                # –¢–æ–ø-20 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                await cur.execute("""
                    SELECT 
                        u.name,
                        u.surname,
                        ut.score,
                        ut.max_score,
                        s.name as specialization
                    FROM user_specialization_tests ut
                    JOIN users u ON u.id = ut.user_id
                    JOIN specializations s ON s.id = ut.specialization_id
                    WHERE ut.completed_at IS NOT NULL
                    ORDER BY ut.score DESC, ut.completed_at ASC
                    LIMIT 20
                """)
                top_results_data = await cur.fetchall()
                top_results = [
                    {
                        "name": f"{row[0]} {row[1]}",
                        "score": row[2],
                        "max_score": row[3],
                        "specialization": row[4]
                    }
                    for row in top_results_data
                ]
                
                # –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
                await cur.execute("""
                    SELECT 
                        s.name,
                        COUNT(ut.id) as test_count
                    FROM specializations s
                    LEFT JOIN user_specialization_tests ut ON ut.specialization_id = s.id 
                        AND ut.completed_at IS NOT NULL
                    GROUP BY s.id, s.name
                    ORDER BY test_count DESC
                """)
                specializations_data = await cur.fetchall()
                top_specializations = [
                    {"name": row[0], "count": row[1]}
                    for row in specializations_data
                ]
                
                return {
                    "users": {
                        "total": total_users,
                        "completed": completed_users,
                        "in_progress": in_progress
                    },
                    "levels": {
                        "Senior": levels.get("Senior", 0),
                        "Middle": levels.get("Middle", 0),
                        "Junior": levels.get("Junior", 0)
                    },
                    "top_results": top_results,
                    "top_specializations": top_specializations
                }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ===== API: HR PANEL =====

HR_PASSWORD = "159753"  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è HR

@app.post("/api/hr/login")
async def hr_login(password: str):
    """–í—Ö–æ–¥ –≤ HR –ø–∞–Ω–µ–ª—å"""
    if password == HR_PASSWORD:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
        token = create_access_token(user_id=0, phone="hr_admin")
        return {"status": "success", "token": token}
    else:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

@app.get("/api/hr/tables")
async def get_hr_tables():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —Å –ø–µ—Ä–≤—ã–º–∏ 5 —Å—Ç—Ä–æ–∫–∞–º–∏"""
    tables = [
        "users",
        "profiles", 
        "specializations",
        "competencies",
        "topics",
        "questions",
        "user_specialization_selections",
        "user_specialization_tests",
        "user_test_topics",
        "test_answers",
        "ai_recommendations"
    ]
    
    result = {}
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                for table in tables:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    await cur.execute(f"SELECT * FROM {table} LIMIT 5")
                    rows = await cur.fetchall()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                    await cur.execute(f"""
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name = '{table}'
                        ORDER BY ordinal_position
                    """)
                    columns = [row[0] for row in await cur.fetchall()]
                    
                    result[table] = {
                        "columns": columns,
                        "rows": rows
                    }
        
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/hr/sql")
async def execute_hr_sql(data: SQLQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ SELECT)"""
    query = data.query
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ SELECT
    query_lower = query.lower().strip()
    if not query_lower.startswith("select"):
        raise HTTPException(status_code=400, detail="–¢–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")
    
    # –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    forbidden = ["insert", "update", "delete", "drop", "create", "alter", "truncate"]
    if any(word in query_lower for word in forbidden):
        raise HTTPException(status_code=400, detail="–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    try:
        async with get_db_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(query)
                rows = await cur.fetchall()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –∫—É—Ä—Å–æ—Ä–∞
                columns = [desc[0] for desc in cur.description] if cur.description else []
                
                return {
                    "columns": columns,
                    "rows": rows,
                    "count": len(rows)
                }
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ SQL: {str(e)}")


@app.get("/hr/menu", response_class=HTMLResponse)
async def hr_menu_page():
    """HR –ø–∞–Ω–µ–ª—å - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    with open('templates/hr_menu.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())
    

# Monitoring
# ===== –î–û–ë–ê–í–¨ –í main.py =====

# 1. –ò–º–ø–æ—Ä—Ç—ã (–≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞)
import psutil
import time
import statistics
from datetime import datetime, timedelta
from collections import defaultdict, deque

# 2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
monitoring_data = {
    "requests": deque(maxlen=1000),  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
    "active_users": {},  # {user_id: last_activity_timestamp}
    "start_time": time.time()
}

# 3. Middleware (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è app)
@app.middleware("http")
async def monitor_requests(request: Request, call_next):
    start_time = time.time()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    user_id = None
    auth_header = request.headers.get("authorization")
    if auth_header and auth_header.startswith("Bearer "):
        token = auth_header.replace("Bearer ", "")
        user_data = verify_token(token)
        if user_data:
            user_id = user_data.get("user_id")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            monitoring_data["active_users"][user_id] = datetime.now()
    
    try:
        response = await call_next(request)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        monitoring_data["requests"].append({
            "endpoint": request.url.path,
            "method": request.method,
            "response_time": response_time,
            "timestamp": datetime.now(),
            "user_id": user_id
        })
        
        return response
    except Exception as e:
        raise

# 4. HTML —Ä–æ—É—Ç
@app.get("/hr/monitoring", response_class=HTMLResponse)
async def hr_monitoring_page(credentials: HTTPBasicCredentials = Depends(verify_hr_password)):
    with open('templates/monitoring.html', 'r', encoding='utf-8') as f:
        return HTMLResponse(content=f.read())

# 5. API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

def calculate_percentiles(values):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ–¥–∏–∞–Ω—É –∏ 95% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å"""
    if not values:
        return {"median": 0, "p95": 0}
    
    sorted_values = sorted(values)
    median = statistics.median(sorted_values)
    
    # 95% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å
    index_95 = int(len(sorted_values) * 0.95)
    p95 = sorted_values[min(index_95, len(sorted_values) - 1)]
    
    return {"median": round(median, 2), "p95": round(p95, 2)}

@app.get("/api/hr/monitoring/overview")
async def get_monitoring_overview():
    """–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –æ–Ω–ª–∞–π–Ω, CPU, RAM"""
    try:
        # –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å < 5 –º–∏–Ω—É—Ç)
        now = datetime.now()
        online_threshold = now - timedelta(minutes=5)
        online_count = sum(
            1 for last_activity in monitoring_data["active_users"].values()
            if last_activity > online_threshold
        )
        
        # CPU –∏ RAM
        cpu_percent = psutil.cpu_percent(interval=0.1)
        memory = psutil.virtual_memory()
        
        return {
            "status": "success",
            "online_users": online_count,
            "cpu_percent": round(cpu_percent, 1),
            "ram_percent": round(memory.percent, 1),
            "timestamp": now.isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/hr/monitoring/realtime")
async def get_realtime_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        now = datetime.now()
        threshold = now - timedelta(seconds=10)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫
        recent_requests = [
            req for req in monitoring_data["requests"]
            if req["timestamp"] > threshold
        ]
        
        if not recent_requests:
            return {
                "status": "success",
                "median": 0,
                "p95": 0,
                "count": 0,
                "timestamp": now.isoformat()
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
        response_times = [req["response_time"] for req in recent_requests]
        percentiles = calculate_percentiles(response_times)
        
        return {
            "status": "success",
            "median": percentiles["median"],
            "p95": percentiles["p95"],
            "count": len(recent_requests),
            "timestamp": now.isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/hr/monitoring/operations")
async def get_operations_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ 5 –º–∏–Ω—É—Ç"""
    try:
        now = datetime.now()
        threshold = now - timedelta(minutes=5)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω
        recent_requests = [
            req for req in monitoring_data["requests"]
            if req["timestamp"] > threshold
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
        operations = {
            "submit_answer": {
                "name": "üí¨ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
                "endpoint": "/api/submit-answer",
                "times": []
            },
            "register": {
                "name": "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                "endpoint": "/api/register",
                "times": []
            },
            "start_test": {
                "name": "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞",
                "endpoint": "/api/start-test",
                "times": []
            },
            "get_questions": {
                "name": "üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤",
                "endpoint_pattern": "/api/test/",
                "times": []
            }
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        for req in recent_requests:
            endpoint = req["endpoint"]
            
            if endpoint == "/api/submit-answer":
                operations["submit_answer"]["times"].append(req["response_time"])
            elif endpoint == "/api/register":
                operations["register"]["times"].append(req["response_time"])
            elif endpoint == "/api/start-test":
                operations["start_test"]["times"].append(req["response_time"])
            elif "/api/test/" in endpoint and "/questions" in endpoint:
                operations["get_questions"]["times"].append(req["response_time"])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result = []
        for op_key, op_data in operations.items():
            if op_data["times"]:
                percentiles = calculate_percentiles(op_data["times"])
                result.append({
                    "name": op_data["name"],
                    "median": percentiles["median"],
                    "p95": percentiles["p95"],
                    "count": len(op_data["times"])
                })
            else:
                result.append({
                    "name": op_data["name"],
                    "median": 0,
                    "p95": 0,
                    "count": 0
                })
        
        return {
            "status": "success",
            "operations": result,
            "timestamp": now.isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)