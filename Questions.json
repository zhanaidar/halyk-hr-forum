{
  "profiles": [
    {
      "profile": "Backend разработчик",
      "specialization": "C# / .NET",
      "competencies": [
        {
          "competency_name": "Знание языка программирования C# [CORE 90%]",
          "topics": [
            {
              "topic_name": "Типы данных, операторы и управляющие конструкции в C#",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип данных в C# используется для хранения суммы банковского перевода до 79,228,162,514,264,337,593,543,950,335 с точностью до копеек?",
                  "var_1": "long",
                  "var_2": "decimal",
                  "var_3": "double",
                  "var_4": "float",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В системе обработки платежей нужно проверить статус транзакции и вернуть результат одним выражением. Какой оператор позволит избежать NullReferenceException при проверке transaction?.Status == 'completed'?",
                  "var_1": "Null-conditional оператор ?. возвращает null если объект null",
                  "var_2": "Оператор ?? возвращает значение по умолчанию вместо null",
                  "var_3": "Ключевое слово nullable обрабатывает null-ссылки автоматически",
                  "var_4": "Оператор ?[] позволяет безопасно проверять свойства объекта",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "В высоконагруженном телеком-биллинге обрабатываются миллионы записей звонков. Почему использование struct вместо class для CallRecord с полями DateTime, int, decimal может ухудшить производительность при boxing/unboxing в коллекциях?",
                  "var_1": "Struct занимает больше памяти в stack, вызывая переполнение стека при массовых операциях",
                  "var_2": "Class требует boxing при передаче в generic-коллекции, struct избегает heap-аллокаций полностью",
                  "var_3": "Struct копируется по значению, boxing в List<object> создает heap-аллокации и давление на GC",
                  "var_4": "Struct передается по ссылке в коллекциях, создавая фрагментацию памяти и увеличивая latency",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Объектно-ориентированное программирование: классы, интерфейсы, наследование и полиморфизм",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой модификатор доступа в C# делает член класса доступным только внутри этого класса и производных классов?",
                  "var_1": "private",
                  "var_2": "protected internal",
                  "var_3": "protected",
                  "var_4": "internal",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В банковской системе нужно обрабатывать платежи разных типов (карточные, SWIFT, внутренние переводы). Какой принцип ООП позволит обрабатывать их единообразно через общий интерфейс IPayment?",
                  "var_1": "Абстракция через базовый класс",
                  "var_2": "Полиморфизм через реализацию интерфейса",
                  "var_3": "Наследование с виртуальными методами",
                  "var_4": "Инкапсуляция в generic-типе",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком-биллинговой системе класс Customer содержит List<Invoice> и List<Contract>. При сериализации через API возникают циклические ссылки. Как спроектировать архитектуру, чтобы избежать этой проблемы без использования атрибутов игнорирования?",
                  "var_1": "Применить lazy loading для коллекций и виртуальные свойства с отложенной инициализацией",
                  "var_2": "Использовать DTO паттерн с маппингом и разделением доменных моделей от контрактов API",
                  "var_3": "Использовать weak references для связанных объектов и финализаторы для очистки ссылок",
                  "var_4": "Реализовать ISerializable интерфейс с кастомной логикой сериализации в GetObjectData методе",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Обобщения (Generics), делегаты, события и LINQ",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис используется для объявления generic-метода, который принимает список любого типа и возвращает первый элемент?",
                  "var_1": "public T GetFirst(List<object> items) { return (T)items[0]; }",
                  "var_2": "public T GetFirst(List<T> items) where T : class { return items[0]; }",
                  "var_3": "public T GetFirst<T>(List<T> items) { return items[0]; }",
                  "var_4": "public object GetFirst<T>(ArrayList items) { return items[0]; }",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В системе обработки банковских транзакций нужно фильтровать платежи по разным критериям. Какой подход эффективнее: несколько методов с конкретными условиями или делегаты Func/Predicate в LINQ?",
                  "var_1": "Делегаты Func/Predicate с LINQ обеспечивают гибкость и переиспользуемость кода.",
                  "var_2": "Expression Trees с IQueryable оптимальны для фильтрации в памяти.",
                  "var_3": "Статические методы расширения для каждого критерия более предсказуемы.",
                  "var_4": "Конкретные методы обеспечивают лучшую производительность и читаемость кода.",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "При проектировании event-driven системы уведомлений для телеком-оператора с миллионами подписчиков, какие проблемы возникают при использовании стандартных событий C# и как их решить?",
                  "var_1": "Утечки памяти при незакрытых подписках, блокировка потоков. Решение: weak references, async events, event aggregator pattern.",
                  "var_2": "Переполнение стека вызовов при цепочке событий. Решение: ThreadPool.QueueUserWorkItem для каждого подписчика, ограничение глубины вложенности событий.",
                  "var_3": "Низкая производительность из-за boxing/unboxing. Решение: использовать generic EventHandler<T> и constraint на struct типы для событий.",
                  "var_4": "Проблемы многопоточности при raise события. Решение: lock на всех подписчиках, синхронный вызов через Interlocked.CompareExchange для делегата.",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Асинхронное программирование: async/await, Task и многопоточность",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что возвращает async метод, который выполняет асинхронную операцию и не возвращает результат?",
                  "var_1": "AsyncResult",
                  "var_2": "Task",
                  "var_3": "void",
                  "var_4": "Task<void>",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между Task.Run() и Task.Factory.StartNew() при обработке запросов в банковском API?",
                  "var_1": "Task.Run поддерживает CancellationToken автоматически, StartNew требует явной передачи TaskCreationOptions.LongRunning для отмены.",
                  "var_2": "Task.Run выполняется синхронно, StartNew создает отдельный поток для каждой операции.",
                  "var_3": "Task.Factory.StartNew использует ThreadPool.QueueUserWorkItem, Task.Run работает через SynchronizationContext текущего потока.",
                  "var_4": "Task.Run использует TaskScheduler.Default, StartNew позволяет настроить планировщик и параметры выполнения.",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему в высоконагруженном платежном шлюзе не следует использовать Task.Result или .Wait() для ожидания асинхронных операций?",
                  "var_1": "Блокируют поток, вызывают deadlock при SynchronizationContext, снижают пропускную способность и масштабируемость системы.",
                  "var_2": "Создают race condition при конкурентном доступе к shared state в многопоточной среде.",
                  "var_3": "Увеличивают потребление памяти из-за создания дополнительных Task объектов в Thread Pool.",
                  "var_4": "Вызывают утечки памяти из-за незавершенных continuation и накопления Task в очереди.",
                  "correct_answer": 1
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Знание платформы .NET Core / .NET Framework [CORE 90%]",
          "topics": [
            {
              "topic_name": "Архитектура и жизненный цикл .NET приложений: CLR, JIT-компиляция, сборка мусора и управление памятью",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое CLR в платформе .NET и какую основную функцию он выполняет?",
                  "var_1": "Cross-Language Runtime — компилятор для преобразования C# кода в машинный код",
                  "var_2": "Component Library Repository — хранилище готовых компонентов для повторного использования в проектах",
                  "var_3": "Common Language Runtime — среда выполнения, управляющая исполнением .NET кода",
                  "var_4": "Code Level Resolver — механизм разрешения зависимостей между сборками при компиляции",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между Server GC и Workstation GC, и когда следует использовать Server GC для высоконагруженного банковского API?",
                  "var_1": "Server GC выполняет фоновую сборку между запросами, уменьшая паузы при обработке платежных транзакций",
                  "var_2": "Server GC использует отдельные потоки для каждого ядра, оптимален для высокопроизводительных серверных приложений",
                  "var_3": "Server GC компактирует память после каждой Generation 0, подходит для длительных API-запросов банка",
                  "var_4": "Server GC использует единый поток для всех ядер, снижая latency для транзакционных операций",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему в процессинговом сервисе транзакций с требованием низкой latency следует использовать Span<T> вместо byte[] массивов, и как это влияет на работу GC?",
                  "var_1": "Span<T> использует специальный GC.SuppressFinalize режим, блокирующий Gen2 коллекции во время обработки критичных транзакций",
                  "var_2": "Span<T> переносит массивы в LOH с пинингом, предотвращая фрагментацию памяти при частых операциях с буферами",
                  "var_3": "Span<T> активирует Server GC режим автоматически, распределяя данные по NUMA-нодам для параллельной обработки платежей",
                  "var_4": "Span<T> выделяется в стеке, избегает аллокаций в куче и давления на GC, снижая паузы сборки мусора",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Dependency Injection и встроенный IoC-контейнер: регистрация сервисов, время жизни (Singleton, Scoped, Transient)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод используется для регистрации сервиса с временем жизни Transient в ASP.NET Core?",
                  "var_1": "services.AddScoped<TService, TImplementation>()",
                  "var_2": "container.Resolve<TService>(ServiceLifetime.Transient)",
                  "var_3": "services.AddTransient<TService, TImplementation>()",
                  "var_4": "services.RegisterTransient<TService>()",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "Какое время жизни сервиса выбрать для DbContext при разработке банковского API с высокой нагрузкой?",
                  "var_1": "Singleton, чтобы переиспользовать подключение к базе данных",
                  "var_2": "Scoped с AddDbContextPool для пула соединений",
                  "var_3": "Scoped, чтобы использовать один контекст на HTTP-запрос",
                  "var_4": "Transient, чтобы каждый сервис получал изолированный контекст",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Почему регистрация Scoped-сервиса как зависимости в Singleton может привести к Captive Dependency и как это предотвратить?",
                  "var_1": "Контейнер автоматически повышает lifetime до Singleton, используйте ValidateScopes в Development для обнаружения проблем",
                  "var_2": "Singleton живет весь lifetime приложения и удерживает Scoped, используйте IServiceScopeFactory для создания scope вручную",
                  "var_3": "Scoped-сервис пересоздается при каждом запросе, используйте AddSingleton с lazy initialization для оптимизации",
                  "var_4": "Singleton блокирует Scoped до завершения scope, регистрируйте зависимость через ServiceLifetime.Transient вместо Scoped",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Middleware pipeline и обработка HTTP-запросов в ASP.NET Core: порядок выполнения, создание кастомных middleware",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод используется для регистрации middleware в ASP.NET Core в методе Configure класса Startup?",
                  "var_1": "app.MapMiddleware и app.RegisterMiddleware",
                  "var_2": "builder.UseComponent или app.AddPipeline",
                  "var_3": "app.Use, app.UseMiddleware или app.Run",
                  "var_4": "services.AddMiddleware или ConfigureServices",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между app.Use() и app.Run() при регистрации middleware в pipeline ASP.NET Core?",
                  "var_1": "app.Use добавляет middleware в DI-контейнер, app.Run регистрирует в pipeline",
                  "var_2": "app.Use вызывает следующий middleware через next(), app.Run завершает pipeline",
                  "var_3": "app.Run обрабатывает запросы параллельно, app.Use последовательно через очередь",
                  "var_4": "app.Use регистрирует middleware синхронно, app.Run выполняет асинхронно",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Какие проблемы возникнут при добавлении app.UseRouting() после app.UseAuthorization() в middleware pipeline банковского API, и как это повлияет на атрибуты [Authorize]?",
                  "var_1": "Routing обработает запрос дважды, авторизация применится к обоим проходам через pipeline",
                  "var_2": "Атрибуты [Authorize] применятся к контроллерам глобально, игнорируя роли и политики",
                  "var_3": "Authorization middleware выбросит исключение InvalidOperationException при инициализации приложения",
                  "var_4": "Authorization выполнится до роутинга, endpoint будет null, авторизация всегда будет падать",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Асинхронное программирование: async/await, Task Parallel Library, ConfigureAwait и управление контекстом синхронизации",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какое ключевое слово используется для пометки метода как асинхронного в C#?",
                  "var_1": "task",
                  "var_2": "async",
                  "var_3": "asyncmethod",
                  "var_4": "await",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между ConfigureAwait(false) и ConfigureAwait(true) при обработке запросов к банковской БД?",
                  "var_1": "ConfigureAwait(true) повышает приоритет потока для обработки результатов запроса",
                  "var_2": "ConfigureAwait(false) отключает параллельное выполнение асинхронных запросов к БД",
                  "var_3": "ConfigureAwait(false) не возвращает выполнение в исходный контекст синхронизации",
                  "var_4": "ConfigureAwait(false) использует отдельный пул потоков для операций БД",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Почему в высоконагруженном API платежного шлюза возникает thread pool starvation при блокирующих вызовах Task.Result вместо await?",
                  "var_1": "Task.Result создает дополнительные Task объекты, увеличивая нагрузку на garbage collector",
                  "var_2": "Task.Result вызывает deadlock из-за захвата SynchronizationContext в ASP.NET Core",
                  "var_3": "Синхронный ожидание результата приводит к избыточному созданию потоков в ThreadPool",
                  "var_4": "Task.Result блокирует поток, исчерпывая пул потоков и препятствуя обработке новых запросов",
                  "correct_answer": 4
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Работа с базами данных (MS SQL, PostgreSQL, Oracle) [CORE 85%]",
          "topics": [
            {
              "topic_name": "Проектирование схем баз данных: нормализация, индексы, ограничения целостности",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое первичный ключ (Primary Key) в таблице базы данных?",
                  "var_1": "Поле для связи с другими таблицами через Foreign Key.",
                  "var_2": "Уникальное ограничение, допускающее одно NULL значение на таблицу.",
                  "var_3": "Индекс для ускорения поиска по основному полю таблицы.",
                  "var_4": "Уникальный идентификатор записи, не допускающий NULL значения.",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В таблице транзакций банка 50 млн записей. Запросы по customer_id и transaction_date медленные. Какой тип индекса оптимален для частых диапазонных запросов по дате с фильтром по клиенту?",
                  "var_1": "Два отдельных некластерных индекса на каждое поле",
                  "var_2": "Полнотекстовый индекс на transaction_date с включением customer_id",
                  "var_3": "Хеш-индекс на составной ключ (customer_id, transaction_date)",
                  "var_4": "Составной кластерный индекс на (customer_id, transaction_date).",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Проектируете схему хранения тарифных планов телеком-оператора с историей изменений и валидацией периодов действия. Как обеспечить целостность данных при наложении периодов для одного клиента без race conditions?",
                  "var_1": "Применить UNIQUE constraint на клиента с триггером для проверки дат и READ COMMITTED изоляцией транзакций.",
                  "var_2": "Использовать temporal таблицы с CHECK constraint на период и SERIALIZABLE isolation level для проверки пересечений.",
                  "var_3": "Создать составной индекс по клиенту и датам с FOREIGN KEY на справочник периодов и REPEATABLE READ уровнем.",
                  "var_4": "Использовать партицирование таблицы по датам с CHECK constraint на клиента и application-level блокировками через SELECT FOR UPDATE.",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Оптимизация SQL-запросов и анализ планов выполнения (Execution Plans)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой оператор в MS SQL Server используется для просмотра плана выполнения запроса без его фактического выполнения?",
                  "var_1": "USE EXPLAIN ANALYZE без выполнения запроса",
                  "var_2": "EXEC sp_executesql с параметром @ShowPlan = 1",
                  "var_3": "SET QUERY_PLAN_CACHE ON или DBCC SHOW_EXECUTION",
                  "var_4": "SET SHOWPLAN_ALL ON или SET STATISTICS PROFILE ON",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В плане выполнения запроса к таблице транзакций банка вы видите Table Scan вместо Index Seek. Какие два основных способа оптимизации этого запроса?",
                  "var_1": "Использовать OPTION (RECOMPILE) и настроить параметр max degree of parallelism",
                  "var_2": "Создать подходящий индекс на столбцы из WHERE и обновить статистику таблицы",
                  "var_3": "Применить партицирование таблицы по дате и включить READ_COMMITTED_SNAPSHOT",
                  "var_4": "Увеличить значение MAXDOP и добавить WITH (NOLOCK) hint к запросу",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком-системе запрос JOIN трех таблиц (абоненты 50M записей, тарифы, платежи) показывает Hash Match вместо Nested Loops. Почему оптимизатор выбрал Hash Match и в каких случаях это оптимально?",
                  "var_1": "Hash Match выбирается при отсутствии статистики по таблицам, после UPDATE STATISTICS оптимизатор переключится на Merge Join",
                  "var_2": "Hash Match эффективен для больших объемов данных без подходящих индексов, когда стоимость сортировки ниже множественных Index Seek операций",
                  "var_3": "Nested Loops требует больше памяти для больших таблиц, Hash Match использует меньше RAM и подходит для OLTP-нагрузки",
                  "var_4": "Оптимизатор выбирает Hash Match при параллельном выполнении запроса, для однопоточного режима будет использоваться Index Scan с Nested Loops",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Транзакции, уровни изоляции и управление конкурентным доступом",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой уровень изоляции транзакций в SQL Server используется по умолчанию?",
                  "var_1": "Read Uncommitted",
                  "var_2": "Read Committed",
                  "var_3": "Repeatable Read",
                  "var_4": "Serializable",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В банковской системе при одновременном списании с одного счета возникают дублирующие транзакции. Какой уровень изоляции в PostgreSQL предотвратит это без блокировок на чтение?",
                  "var_1": "Repeatable Read с advisory locks на уровне приложения",
                  "var_2": "Read Committed с SELECT FOR UPDATE NOWAIT",
                  "var_3": "Serializable с retry logic на serialization failure",
                  "var_4": "Snapshot Isolation с MVCC и деферрируемыми ограничениями",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В высоконагруженном биллинге телеком-оператора на MS SQL возникают deadlock'и при UPDATE балансов абонентов. Как спроектировать архитектуру доступа к данным для минимизации блокировок при сохранении консистентности?",
                  "var_1": "Упорядоченный доступ к записям по ID, применение UPDLOCK hint, разделение операций на read-модификация-write с оптимистичной блокировкой через rowversion",
                  "var_2": "Вынос балансов в Redis с записью через Lua-скрипты, периодическая синхронизация с MS SQL через bulk insert, использование distributed locks",
                  "var_3": "Применение NOLOCK hint для чтения балансов, использование уровня изоляции SERIALIZABLE, внедрение retry logic с экспоненциальной задержкой при deadlock",
                  "var_4": "Использование READ_COMMITTED_SNAPSHOT на уровне базы, партиционирование таблицы балансов по диапазонам ID, async/await для параллельной обработки транзакций",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Работа с базами данных в .NET: ADO.NET, Dapper, Entity Framework Core",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой класс ADO.NET используется для выполнения SQL-команд и возврата результата в виде потока данных?",
                  "var_1": "SqlCommand с методом ExecuteScalar для получения результата.",
                  "var_2": "SqlDataAdapter для заполнения DataSet и обновления данных.",
                  "var_3": "SqlDataReader для чтения данных в режиме forward-only.",
                  "var_4": "DataTable для загрузки и кэширования результатов запроса.",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем ключевое различие между подходами Database First и Code First в Entity Framework Core при интеграции с legacy-системами банка?",
                  "var_1": "Database First генерирует модели из существующей БД, Code First создает схему из кода.",
                  "var_2": "Database First использует миграции для версионирования, Code First работает напрямую с БД.",
                  "var_3": "Database First оптимизирован для PostgreSQL, Code First для MS SQL и Oracle.",
                  "var_4": "Database First применяет lazy loading по умолчанию, Code First требует eager loading.",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать оптимальную стратегию работы с большими объемами транзакций (50+ млн записей) при использовании EF Core и обеспечить производительность запросов аналитики?",
                  "var_1": "Lazy Loading прокси, батчинг запросов через AddRange, материализованные представления с автообновлением.",
                  "var_2": "AsNoTracking для чтения, SqlBulkCopy для вставок, индексированные представления, разделение на горячие и холодные данные.",
                  "var_3": "Tracked entities для аудита, EF Core migrations для партиционирования, compiled queries с параметризацией.",
                  "var_4": "Eager Loading с Include, транзакции SERIALIZABLE, кэширование результатов в памяти с MemoryCache.",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Проектирование и архитектура [CORE 80%]",
          "topics": [
            {
              "topic_name": "SOLID принципы и паттерны проектирования в .NET приложениях",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой SOLID принцип нарушается, если класс BankAccount одновременно работает с балансом, логирует операции и отправляет SMS-уведомления?",
                  "var_1": "Open/Closed Principle - класс требует изменений для добавления функциональности",
                  "var_2": "Dependency Inversion Principle - класс зависит от конкретных реализаций",
                  "var_3": "Interface Segregation Principle - класс реализует слишком широкий интерфейс",
                  "var_4": "Single Responsibility Principle - класс имеет множественные причины для изменения",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В банковском приложении нужно поддержать несколько способов аутентификации (SMS, биометрия, токен). Какой паттерн проектирования лучше использовать и почему?",
                  "var_1": "Singleton pattern - гарантирует единственный экземпляр сервиса аутентификации в приложении",
                  "var_2": "Observer pattern - уведомляет компоненты системы об изменении статуса аутентификации",
                  "var_3": "Factory Method - создает объекты аутентификации без указания конкретного класса",
                  "var_4": "Strategy pattern - позволяет инкапсулировать алгоритмы и переключаться между ними динамически",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Вы проектируете систему обработки платежей для телеком-оператора с интеграцией 15+ платёжных провайдеров. Как спроектировать архитектуру, чтобы соблюсти Open/Closed Principle и минимизировать изменения при добавлении новых провайдеров?",
                  "var_1": "Создать базовый класс PaymentProviderBase с виртуальными методами, наследовать конкретные провайдеры от него",
                  "var_2": "Использовать switch-case по типу провайдера с централизованной фабрикой для создания экземпляров",
                  "var_3": "Применить Singleton для каждого провайдера с lazy initialization и регистрацией в статическом реестре",
                  "var_4": "Использовать абстракцию IPaymentProvider с фабрикой или стратегией, регистрировать провайдеры через DI контейнер",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Архитектурные стили и подходы: монолит, микросервисы, Clean Architecture, DDD",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое монолитная архитектура в контексте разработки банковского приложения на .NET?",
                  "var_1": "Архитектура, где каждый модуль развернут как отдельный сервис с собственной базой данных.",
                  "var_2": "Система из множества слабосвязанных сервисов, общающихся через REST API и события.",
                  "var_3": "Приложение, разделенное на независимые компоненты с взаимодействием через message broker.",
                  "var_4": "Единое приложение, где все модули развернуты и работают в одном процессе.",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "Когда следует выбрать микросервисную архитектуру вместо монолита для системы мобильного оператора с 10 млн абонентов?",
                  "var_1": "Когда требуется единая база данных для всех модулей системы.",
                  "var_2": "Когда проект начинается с нуля и есть готовая инфраструктура.",
                  "var_3": "Когда количество абонентов превышает 5 миллионов пользователей в системе.",
                  "var_4": "Когда нужно независимое масштабирование модулей, разные команды и частые релизы.",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать границы Bounded Context в DDD для core-banking системы с платежами, кредитами и депозитами, чтобы минимизировать связанность?",
                  "var_1": "Определить контексты по техническим слоям: presentation, business logic, data access для каждого модуля.",
                  "var_2": "Создать единую доменную модель с shared kernel для переиспользования бизнес-логики между модулями.",
                  "var_3": "Использовать общую базу данных с разделением на схемы для платежей, кредитов и депозитов.",
                  "var_4": "Выделить контексты по бизнес-доменам с собственными моделями, общаться через события или API.",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Проектирование слоев приложения и управление зависимостями (DI/IoC контейнеры)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое Dependency Injection и какую проблему он решает в .NET приложениях?",
                  "var_1": "Паттерн внедрения зависимостей через конструктор, устраняет жесткую связанность классов.",
                  "var_2": "Singleton паттерн с lazy initialization, обеспечивает глобальный доступ к сервисам.",
                  "var_3": "Механизм автоматической сборки мусора для управления временем жизни объектов.",
                  "var_4": "Инверсия управления через сервис-локатор, уменьшает количество интерфейсов в проекте.",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В банковском API нужно регистрировать сервис для работы с транзакциями. Когда использовать Scoped вместо Singleton lifetime?",
                  "var_1": "Scoped для минимизации нагрузки на GC и повторного использования объектов сервиса.",
                  "var_2": "Singleton для кэширования состояния транзакций между запросами в памяти приложения.",
                  "var_3": "Scoped для сервисов с состоянием на запрос, включая DbContext и транзакционную логику.",
                  "var_4": "Transient для изоляции каждой операции и предотвращения конфликтов параллельных транзакций.",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать слоистую архитектуру для процессинга платежей, чтобы Domain слой не зависел от Infrastructure, но использовал репозитории?",
                  "var_1": "Создать Abstract Factory в Domain, фабрику репозиториев реализовать в Infrastructure, передавать через конструктор.",
                  "var_2": "Использовать Service Locator в Domain для получения репозиториев, зарегистрированных в Infrastructure слое.",
                  "var_3": "Создать базовый класс Repository в Domain, наследовать конкретные репозитории в Infrastructure слое.",
                  "var_4": "Определить интерфейсы репозиториев в Domain, реализацию в Infrastructure, регистрировать через DI контейнер.",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Масштабируемость и производительность: кэширование, асинхронность, оптимизация баз данных",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой встроенный интерфейс в .NET используется для реализации in-memory кэширования?",
                  "var_1": "MemoryStream из пространства имён System.IO",
                  "var_2": "IDistributedCache из Microsoft.Extensions.Caching.Abstractions",
                  "var_3": "ICacheManager из System.Runtime.Caching",
                  "var_4": "IMemoryCache из пространства имён Microsoft.Extensions.Caching.Memory",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В банковской системе нужно кэшировать справочники валют и курсы обмена. Какую стратегию инвалидации выбрать для каждого типа данных?",
                  "var_1": "Оба типа данных - инвалидация через Redis Pub/Sub при обновлении источника",
                  "var_2": "Справочники - LRU eviction policy, курсы - абсолютное время истечения раз в сутки",
                  "var_3": "Справочники - абсолютное время истечения, курсы - скользящее время с коротким TTL",
                  "var_4": "Справочники - скользящее время, курсы - абсолютное время с длинным TTL",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать кэширование для высоконагруженного API телеком-оператора с 10000 RPS, учитывая персонализированные данные абонентов и требование eventual consistency до 5 секунд?",
                  "var_1": "Распределённый Memcached с консистентным хешированием и TTL 5 секунд для автоматической инвалидации данных",
                  "var_2": "Redis Cluster с репликацией read-slaves и HTTP-polling клиентами для проверки актуальности кэша каждые 5 секунд",
                  "var_3": "In-memory кэш на каждом API-сервере с периодической синхронизацией через background job каждые 3-5 секунд",
                  "var_4": "Двухуровневое кэширование: Redis с шардингом по абоненту плюс локальный IMemoryCache с pub/sub инвалидацией",
                  "correct_answer": 4
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "profile": "Backend разработчик",
      "specialization": "Java / Spring",
      "competencies": [
        {
          "competency_name": "Навыки Java [CORE 90%]",
          "topics": [
            {
              "topic_name": "Многопоточность и concurrency (synchronized, volatile, ExecutorService, CompletableFuture)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какое ключевое слово в Java гарантирует видимость изменений переменной между потоками без блокировки?",
                  "var_1": "transient",
                  "var_2": "synchronized",
                  "var_3": "volatile",
                  "var_4": "atomic",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между ExecutorService.submit() и execute() при обработке транзакций в банковской системе?",
                  "var_1": "submit() возвращает Future и обрабатывает исключения, execute() их игнорирует",
                  "var_2": "execute() поддерживает Callable, submit() работает только с Runnable",
                  "var_3": "submit() создает новый поток, execute() использует текущий поток",
                  "var_4": "execute() выполняется синхронно, submit() запускает задачу асинхронно",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование synchronized(this) может вызвать deadlock при обработке параллельных платежей между счетами? Как спроектировать безопасную альтернативу?",
                  "var_1": "Блокировка на уровне класса замедляет throughput. Использовать synchronized на методах transfer с volatile полями для видимости изменений счетов",
                  "var_2": "Циклическая блокировка при взаимных переводах. Упорядочивать захват локов по ID счета или использовать ReentrantLock с tryLock",
                  "var_3": "Контекстное переключение потоков увеличивает latency. Применять StampedLock с optimistic read для минимизации блокировок при чтении балансов счетов",
                  "var_4": "Захват монитора this блокирует весь объект Account. Вынести синхронизацию в отдельный Lock объект внутри класса счета",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Коллекции и Stream API (ArrayList vs LinkedList, HashMap, ConcurrentHashMap, Optional, функциональные интерфейсы)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод Stream API используется для преобразования каждого элемента коллекции в другой объект?",
                  "var_1": "convert()",
                  "var_2": "map()",
                  "var_3": "transform()",
                  "var_4": "forEach()",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем основное отличие HashMap от ConcurrentHashMap при обработке транзакций в банковской системе с несколькими потоками?",
                  "var_1": "ConcurrentHashMap потокобезопасен и не блокирует всю структуру при записи",
                  "var_2": "ConcurrentHashMap быстрее обрабатывает единичные операции чтения и записи",
                  "var_3": "HashMap использует синхронизацию на уровне бакетов для многопоточности",
                  "var_4": "HashMap автоматически создает копии при конкурентном доступе потоков",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование ArrayList предпочтительнее LinkedList для хранения истории SMS-сообщений абонента в телеком-системе при частом доступе по индексу и редких вставках?",
                  "var_1": "LinkedList оптимизирован для последовательного чтения благодаря кешированию узлов в процессоре",
                  "var_2": "ArrayList использует copy-on-write механизм для безопасного конкурентного доступа к истории",
                  "var_3": "ArrayList обеспечивает O(1) доступ по индексу благодаря непрерывному размещению в памяти",
                  "var_4": "LinkedList требует дополнительной синхронизации при частом доступе по индексу в многопоточной среде",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Управление памятью и garbage collection (heap vs stack, типы GC, memory leaks, профилирование)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "В какой области памяти JVM хранятся локальные переменные примитивных типов и ссылки на объекты внутри метода?",
                  "var_1": "В metaspace области, освобождаемой при завершении работы потока",
                  "var_2": "В stack памяти, очищаемой автоматически при выходе из метода",
                  "var_3": "В Eden space внутри young generation до первой сборки мусора",
                  "var_4": "В heap памяти, управляемой garbage collector для автоматической очистки",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "Ваш Spring Boot микросервис для обработки банковских транзакций показывает Full GC каждые 2 минуты. Какие JVM флаги используете для диагностики причины?",
                  "var_1": "-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:gc.log для анализа паттернов GC",
                  "var_2": "-XX:+UseG1GC -XX:MaxGCPauseMillis=200 для оптимизации сборки мусора",
                  "var_3": "-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 для настройки GC",
                  "var_4": "-Xms4g -Xmx4g -XX:+HeapDumpOnOutOfMemoryError для контроля памяти",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "При проектировании высоконагруженного биллингового сервиса для телеком оператора с 10М абонентов почему выбрали G1GC вместо ZGC, учитывая heap 32GB?",
                  "var_1": "G1GC обеспечивает лучшую throughput для OLTP операций биллинга при heap менее 48GB",
                  "var_2": "G1GC предсказуемее для транзакционных систем, ZGC оптимален для heap 64GB+, меньше overhead",
                  "var_3": "ZGC добавляет latency на write barriers, критичную для real-time тарификации звонков абонентов",
                  "var_4": "ZGC требует отдельное лицензирование для production в банковском секторе и телекоме",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Обработка исключений и best practices (checked vs unchecked, try-with-resources, custom exceptions)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис используется для автоматического закрытия ресурсов в Java, например, при работе с JDBC-соединением к базе данных банка?",
                  "var_1": "try-with-resources с объявлением ресурсов в круглых скобках",
                  "var_2": "using блок с автоматическим управлением памятью",
                  "var_3": "try-catch-finally с ручным освобождением ресурсов в finally",
                  "var_4": "finally блок с явным вызовом метода close()",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В микросервисе обработки платежей нужно обрабатывать ошибки валидации данных карты. Какой тип исключения следует использовать и почему?",
                  "var_1": "Checked Exception, чтобы обязать вызывающий код обработать ошибку валидации",
                  "var_2": "Unchecked RuntimeException, так как это ошибка бизнес-логики валидации",
                  "var_3": "Error для критичных ошибок валидации данных платежной системы",
                  "var_4": "Checked IOException, так как это ошибка внешнего источника данных",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "При проектировании иерархии исключений для банковской системы платежей вы создаете PaymentException. Как спроектировать обработку исключений, чтобы избежать потери контекста ошибки при прохождении через несколько слоев приложения?",
                  "var_1": "Создать глобальный ExceptionContext singleton для накопления деталей ошибки, очищать его после успешной обработки транзакции",
                  "var_2": "Использовать checked exceptions для всех бизнес-ошибок, добавлять suppressed exceptions через addSuppressed() на каждом слое",
                  "var_3": "Перехватывать все исключения на каждом слое, оборачивать в новые RuntimeException с полным stack trace в message",
                  "var_4": "Использовать exception chaining через конструкторы с Throwable cause, логировать на границах слоев, добавлять контекстные поля в custom exceptions",
                  "correct_answer": 4
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Навыки Spring Framework [CORE 90%]",
          "topics": [
            {
              "topic_name": "Spring Boot: автоконфигурация, стартеры и управление properties для микросервисов",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой файл используется по умолчанию для хранения конфигурационных свойств в Spring Boot приложении?",
                  "var_1": "config.properties или settings.xml",
                  "var_2": "application.properties или application.yml",
                  "var_3": "spring.properties или application.conf",
                  "var_4": "bootstrap.properties или application.config",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между @ConditionalOnProperty и @ConditionalOnBean при создании автоконфигурации для микросервиса обработки платежей?",
                  "var_1": "ConditionalOnProperty использует application.yml для конфигурации, ConditionalOnBean сканирует classpath на наличие зависимостей",
                  "var_2": "ConditionalOnProperty активируется при старте приложения, ConditionalOnBean работает после инициализации контекста",
                  "var_3": "ConditionalOnProperty проверяет значение property файла, ConditionalOnBean проверяет аннотацию @Component класса",
                  "var_4": "ConditionalOnProperty проверяет наличие свойства в properties, ConditionalOnBean проверяет наличие бина в контексте",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при разработке общего стартера для микросервисов банка следует использовать spring.factories вместо прямого @ComponentScan, и какие проблемы это решает?",
                  "var_1": "Обеспечивает совместимость с Jakarta EE стандартами и позволяет использовать CDI для dependency injection",
                  "var_2": "Избегает конфликтов имен пакетов, обеспечивает изолированную автоконфигурацию, дает контроль над порядком загрузки бинов",
                  "var_3": "Снижает потребление памяти через централизованный bean registry и уменьшает overhead на reflection операции",
                  "var_4": "Ускоряет загрузку приложения за счет lazy initialization и оптимизации classpath scanning процесса",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Spring Security: аутентификация, авторизация и защита REST API в банковских системах",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая аннотация Spring Security используется для защиты метода REST контроллера на уровне роли?",
                  "var_1": "@PostAuthorize для валидации ролей после выполнения",
                  "var_2": "@PreAuthorize или @Secured для проверки ролей пользователя",
                  "var_3": "@EnableWebSecurity на уровне класса контроллера",
                  "var_4": "@RolesAllowed из javax.annotation.security для REST методов",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между Stateless и Stateful аутентификацией в REST API банковского приложения и когда использовать JWT?",
                  "var_1": "Stateful сохраняет состояние в памяти сервера, JWT применяется только для внутренней аутентификации между сервисами банка",
                  "var_2": "Stateless хранит токен на клиенте, не использует сессии, JWT подходит для микросервисной архитектуры банка",
                  "var_3": "Stateless использует cookie с HttpOnly флагом, Stateful подходит для распределенных банковских микросервисов с JWT",
                  "var_4": "Stateful хранит сессии в базе данных, JWT требует Redis для кэширования токенов в банковских системах",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать систему авторизации для банковского REST API с поддержкой разграничения прав на уровне филиалов и мультитенантности для разных банков группы?",
                  "var_1": "Custom PermissionEvaluator с иерархическими ролями, tenant-aware SecurityContext, разделение через клеймы JWT и database-per-tenant изоляция",
                  "var_2": "RBAC через @Secured аннотации, separate SecurityFilterChain для каждого банка и tenant routing через custom Filter",
                  "var_3": "Spring Security ACL с @PreAuthorize, shared database schema с tenant_id колонками и session-based аутентификация",
                  "var_4": "OAuth2 ResourceServer с hardcoded ролями, ThreadLocal для tenant context и schema-per-tenant через Hibernate Multitenancy",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Spring Data JPA: работа с базами данных, транзакции и оптимизация запросов",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какую аннотацию нужно добавить к методу репозитория для выполнения операции изменения или удаления данных?",
                  "var_1": "@Query с атрибутом nativeQuery=true",
                  "var_2": "@DML совместно с @Query",
                  "var_3": "@Modifying совместно с @Query",
                  "var_4": "@Transactional с параметром readOnly=false",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между уровнями изоляции транзакций READ_COMMITTED и REPEATABLE_READ при работе с банковскими операциями?",
                  "var_1": "REPEATABLE_READ повышает throughput за счет снятия блокировок на чтение",
                  "var_2": "READ_COMMITTED предотвращает phantom reads при повторных запросах в транзакции",
                  "var_3": "READ_COMMITTED блокирует записи до завершения транзакции для консистентности данных",
                  "var_4": "REPEATABLE_READ предотвращает non-repeatable read, фиксируя данные на весь транзакцию",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать загрузку истории транзакций клиента (300К записей) с минимальным потреблением памяти и без N+1 проблемы?",
                  "var_1": "Использовать Stream API с fetch join и повышенный heap size JVM",
                  "var_2": "Применить @EntityGraph с Specification API и первый уровень кэша Hibernate",
                  "var_3": "Загрузить все записи через findAll() с EAGER fetching и кэшированием",
                  "var_4": "Использовать Slice/Page с JOIN FETCH, batch size и read-only транзакции",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Spring AOP и управление транзакциями: логирование, аудит и обработка исключений",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая аннотация Spring используется для объявления метода как точки среза (pointcut) в аспекте для логирования входящих параметров?",
                  "var_1": "@Pointcut с аннотацией @Loggable для автоматического перехвата параметров",
                  "var_2": "@Around с JoinPoint.getArgs() и @annotation для логирования методов",
                  "var_3": "@AfterReturning с returning attribute для захвата входных параметров",
                  "var_4": "@Before с выражением execution и args для перехвата параметров",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В банковском приложении требуется логировать все операции с транзакциями, но исключить методы чтения. Какой тип advice и pointcut expression оптимально использовать?",
                  "var_1": "@AfterThrowing с execution(* com.bank.service.*.*(..)) && @target(Service)",
                  "var_2": "@Around с @annotation(Transactional) && args(.., EntityManager)",
                  "var_3": "@AfterReturning с execution(@Transactional * *(..)) && !execution(* get*(..))",
                  "var_4": "@Before с within(@Repository *) && execution(* save*(..)) || update*(..)",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "При аудите банковских транзакций возникает проблема: @Transactional метод вызывает другой @Transactional метод этого же класса, и AOP-логирование не срабатывает на внутреннем вызове. Как архитектурно решить эту проблему без AspectJ weaving?",
                  "var_1": "Применить @EnableAspectJAutoProxy с proxyTargetClass=true для CGLIB проксирования всех методов класса",
                  "var_2": "Вынести внутренний метод в отдельный Spring bean или использовать self-injection через ApplicationContext",
                  "var_3": "Настроить expose-proxy=true в конфигурации и получать текущий proxy через AopContext.currentProxy()",
                  "var_4": "Использовать @Async аннотацию на внутреннем методе для создания нового proxy контекста",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Навыки проектирования REST API [CORE 85%]",
          "topics": [
            {
              "topic_name": "Принципы REST и HTTP методы: идемпотентность, безопасность операций, правильное использование GET/POST/PUT/PATCH/DELETE",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой HTTP метод является идемпотентным и используется для получения данных без изменения состояния сервера?",
                  "var_1": "PUT метод используется для получения данных",
                  "var_2": "POST метод является идемпотентным и безопасным",
                  "var_3": "GET метод является идемпотентным и безопасным",
                  "var_4": "DELETE метод безопасен и не изменяет состояние",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между PUT и PATCH при обновлении баланса клиента в банковском API? Когда использовать каждый метод?",
                  "var_1": "PATCH безопасный метод для чтения, PUT изменяет состояние баланса клиента",
                  "var_2": "PUT идемпотентен для баланса, PATCH требует транзакционный контроль операций",
                  "var_3": "PUT заменяет весь ресурс, PATCH обновляет частично; PATCH для изменения баланса",
                  "var_4": "PUT для частичного обновления, PATCH для полной замены ресурса баланса",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать идемпотентный POST endpoint для создания платежа в банковской системе, учитывая возможность повторных запросов из-за сетевых таймаутов?",
                  "var_1": "Проверять дубликаты по полям запроса через уникальный индекс в базе",
                  "var_2": "Использовать HTTP метод PUT вместо POST для автоматической идемпотентности",
                  "var_3": "Генерировать UUID на клиенте и использовать его как primary key",
                  "var_4": "Использовать Idempotency-Key в заголовке, хранить результаты в кэше с TTL",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Версионирование API и обратная совместимость: стратегии версионирования (URI, header, media type), управление breaking changes",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой HTTP заголовок используется для версионирования API через custom header в Spring?",
                  "var_1": "API-Version-Control через @HeaderParam в контроллере",
                  "var_2": "Accept-Version с @ApiVersion аннотацией Spring",
                  "var_3": "X-API-Version или Custom-Header с @RequestHeader аннотацией",
                  "var_4": "Content-Version заголовок с @VersionMapping",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В банковском API нужно изменить формат поля accountNumber с String на объект. Какую стратегию версионирования выбрать для минимизации влияния на мобильные приложения клиентов?",
                  "var_1": "Content negotiation через Accept header с application/vnd.bank.v2+json",
                  "var_2": "Query parameter versioning с ?api_version=2 для нового формата",
                  "var_3": "URI versioning с параллельным поддержанием /v1 и /v2 endpoints",
                  "var_4": "Deprecation header с постепенным отключением старого формата",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать систему версионирования для телеком API с 50+ микросервисами, чтобы обеспечить независимое развертывание команд и минимизировать breaking changes при изменении контрактов между сервисами?",
                  "var_1": "Consumer-Driven Contracts с Pact, semantic versioning, API Gateway для маршрутизации версий, deprecation policy с sunset headers",
                  "var_2": "Header-based versioning с Accept-Version, shared database для контрактов, centralized orchestration layer и mandatory backward compatibility через adapters",
                  "var_3": "GraphQL Federation для унификации версий, centralized breaking changes committee, обязательная синхронизация релизов через release train",
                  "var_4": "URI versioning с /v1, /v2 префиксами, centralized API schema registry, feature toggles и rollback через blue-green deployment",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Обработка ошибок и стандарты ответов: HTTP статус-коды, структура error response, Problem Details (RFC 7807), локализация сообщений",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой HTTP статус-код должен возвращать REST API при ошибке валидации входных данных клиента?",
                  "var_1": "406 Not Acceptable",
                  "var_2": "500 Internal Server Error",
                  "var_3": "400 Bad Request",
                  "var_4": "422 Unprocessable Entity",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между использованием RFC 7807 Problem Details и стандартной структуры error response в Spring Boot?",
                  "var_1": "RFC 7807 добавляет поддержку GraphQL схемы ошибок и автоматическую генерацию OpenAPI спецификации",
                  "var_2": "RFC 7807 предоставляет стандартизированный формат с type, title, detail, instance для машиночитаемой обработки ошибок",
                  "var_3": "Problem Details использует XML формат для совместимости с SOAP сервисами в enterprise окружении",
                  "var_4": "RFC 7807 требует обязательное использование HTTP статус 500 для всех ошибок бизнес-логики",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать локализацию сообщений об ошибках в REST API для банковского приложения с поддержкой казахского и русского языков, учитывая требования PCI DSS к безопасности информации?",
                  "var_1": "Хранить переводы в базе данных с version control, определять язык по IP-адресу клиента, возвращать все варианты текста в массиве",
                  "var_2": "Использовать MessageSource с ResourceBundle, Accept-Language header, возвращать локализованный detail без раскрытия внутренних данных, логировать детали отдельно",
                  "var_3": "Использовать i18n аннотации Spring, передавать locale через query параметр, включать stack trace в response для debugging целей",
                  "var_4": "Применять LocaleContextHolder с ThreadLocal, встраивать технические детали ошибки в локализованное сообщение для полноты информации",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Безопасность REST API: аутентификация и авторизация (OAuth 2.0, JWT), rate limiting, защита от OWASP Top 10, шифрование чувствительных данных",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое JWT токен и из каких трех основных частей он состоит?",
                  "var_1": "JSON Web Token, включает token type, expiration time и user credentials.",
                  "var_2": "JSON Web Token, состоит из header, payload и signature.",
                  "var_3": "Java Web Token, состоит из authentication, authorization и encryption блоков.",
                  "var_4": "JSON Web Token, содержит metadata, encrypted payload и refresh token.",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между OAuth 2.0 grant типами Authorization Code и Client Credentials для банковского API?",
                  "var_1": "Authorization Code для синхронных запросов, Client Credentials для асинхронной обработки транзакций в очередях.",
                  "var_2": "Authorization Code для пользовательских приложений, Client Credentials для server-to-server взаимодействия между системами.",
                  "var_3": "Client Credentials требует PKCE расширение, Authorization Code работает без дополнительных параметров безопасности.",
                  "var_4": "Authorization Code для внутренних API, Client Credentials для публичных мобильных приложений с токенами.",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать rate limiting для REST API банка с учетом разных клиентских тарифов и защиты от DDoS на уровне приложения?",
                  "var_1": "Nginx rate limiting с leaky bucket, блокировка по IP через iptables, горизонтальное масштабирование подов, кэширование ответов в Memcached.",
                  "var_2": "Spring Cloud Gateway с RequestRateLimiter фильтром, in-memory ConcurrentHashMap для счетчиков, sticky sessions для распределения нагрузки, CORS политики.",
                  "var_3": "Database-based счетчики запросов в PostgreSQL с партицированием, fixed window алгоритм, JWT claims для хранения лимитов, circuit breaker паттерн.",
                  "var_4": "Многоуровневый rate limiting: Redis с token bucket алгоритмом, лимиты по API key и IP, sliding window для точности, graceful degradation.",
                  "correct_answer": 4
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Навыки Apache Kafka [DAILY 70%]",
          "topics": [
            {
              "topic_name": "Интеграция Spring Boot с Apache Kafka: настройка producers и consumers для обработки банковских транзакций",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая аннотация Spring Kafka используется для создания метода-слушателя, который будет получать сообщения о банковских транзакциях из топика?",
                  "var_1": "@StreamListener с указанием input channel binding",
                  "var_2": "@JmsListener с настройкой containerFactory для Kafka",
                  "var_3": "@MessageListener с параметром destination для топика",
                  "var_4": "@KafkaListener с указанием topics или topicPattern",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между настройками acks=1 и acks=all для Kafka producer при отправке критичных банковских платежей, и какую следует выбрать?",
                  "var_1": "acks=1 обеспечивает гарантию доставки, acks=all ускоряет throughput, для банковских транзакций оптимален acks=1",
                  "var_2": "acks=1 подтверждает запись лидером, acks=all ждет от всех реплик, для платежей использовать acks=all",
                  "var_3": "acks=1 ждет все реплики, acks=all подтверждает лидером, для платежей достаточно acks=1 с idempotence",
                  "var_4": "acks=all подтверждает запись лидером, acks=1 ждет минимум двух реплик, для критичных данных acks=1",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "При обработке платежных транзакций consumer периодически отстает на 2-3 минуты от producer. Какие три ключевые настройки нужно проверить и оптимизировать для устранения lag?",
                  "var_1": "enable.auto.commit, auto.commit.interval.ms, isolation.level для гарантированной доставки сообщений",
                  "var_2": "max.poll.records, fetch.min.bytes, количество consumer instances в группе и партиций топика",
                  "var_3": "compression.type, batch.size, linger.ms на стороне producer для пропускной способности",
                  "var_4": "session.timeout.ms, heartbeat.interval.ms, request.timeout.ms для стабильности соединений",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Обеспечение надежности доставки сообщений: управление offset, acknowledgment modes и обработка ошибок в Kafka",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое offset в Apache Kafka и зачем он нужен при чтении сообщений из топика?",
                  "var_1": "Порядковый номер сообщения в партиции для отслеживания позиции чтения.",
                  "var_2": "Временная метка создания сообщения для упорядочивания событий в топике.",
                  "var_3": "Указатель на брокер и партицию для балансировки нагрузки консьюмеров.",
                  "var_4": "Уникальный идентификатор сообщения для обеспечения его доставки один раз.",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между enable.auto.commit=true и ручным commit offset при обработке банковских транзакций в Kafka?",
                  "var_1": "Auto-commit фиксирует offset после poll(), ручной commit сохраняет состояние в Zookeeper.",
                  "var_2": "Auto-commit обеспечивает транзакционность, ручной commit подходит для асинхронной обработки сообщений.",
                  "var_3": "Auto-commit фиксирует offset автоматически, ручной commit гарантирует фиксацию только после успешной обработки.",
                  "var_4": "Auto-commit повышает throughput за счет батчинга, ручной commit снижает latency обработки.",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В системе обработки платежей consumer упал после чтения, но до записи в БД. Offset уже зафиксирован. Как спроектировать решение для предотвращения потери транзакций?",
                  "var_1": "Использовать ручной commit после успешной записи в БД или применить transactional consumer с idempotent producer.",
                  "var_2": "Включить enable.auto.commit=true с малым auto.commit.interval.ms и обернуть обработку в try-catch блок для логирования.",
                  "var_3": "Настроить auto.offset.reset=earliest и увеличить session.timeout.ms для повторной обработки сообщений при перезапуске consumer.",
                  "var_4": "Использовать Dead Letter Queue с retry topic и настроить max.poll.records=1 для последовательной обработки сообщений.",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Производительность и масштабирование: партиционирование, consumer groups и мониторинг Kafka в высоконагруженных системах",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое партиция в Apache Kafka и как сообщения распределяются по партициям при отправке?",
                  "var_1": "Это логический сегмент топика. Сообщения распределяются по ключу или round-robin.",
                  "var_2": "Физический брокер кластера. Сообщения распределяются по хешу от timestamp.",
                  "var_3": "Реплика данных на брокере. Сообщения маршрутизируются по offset и size.",
                  "var_4": "Группа консьюмеров внутри топика. Распределение происходит через Zookeeper coordination.",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В банковской системе процессинга платежей consumer группа из 10 инстансов обрабатывает топик с 5 партициями. Какая проблема возникнет и как её решить?",
                  "var_1": "Увеличить replication factor до 3. Настроить round-robin балансировку между консьюмерами.",
                  "var_2": "Включить session.timeout.ms и max.poll.interval.ms для перебалансировки нагрузки между инстансами.",
                  "var_3": "5 консьюмеров будут idle. Увеличить количество партиций до 10 или более.",
                  "var_4": "Настроить sticky assignor стратегию. Уменьшить количество consumer инстансов до 5.",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком-системе биллинга consumer lag растёт до 500K сообщений в пиковые часы. Какие три метрики JMX нужно проверить первыми для диагностики bottleneck?",
                  "var_1": "bytes-in-rate, bytes-out-rate, request-rate для анализа пропускной способности сети.",
                  "var_2": "records-lag-max, fetch-latency-avg, commit-latency-avg для выявления узких мест в потреблении.",
                  "var_3": "partition-count, replication-factor, under-replicated-partitions для проверки конфигурации топика.",
                  "var_4": "producer-throttle-time, compression-rate, batch-size-avg для оптимизации отправки сообщений.",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Безопасность и отказоустойчивость: шифрование данных, аутентификация, реализация idempotent producers и transactional messaging",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой параметр Kafka Producer необходимо установить в true для включения idempotence и предотвращения дублирования сообщений?",
                  "var_1": "transactional.id=unique-id",
                  "var_2": "acks=all",
                  "var_3": "retries=Integer.MAX_VALUE",
                  "var_4": "enable.idempotence=true",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между isolation.level=read_committed и read_uncommitted при использовании transactional messaging в Kafka Consumer для обработки банковских транзакций?",
                  "var_1": "read_committed обеспечивает строгую последовательность чтения, read_uncommitted допускает параллельное чтение сообщений из разных партиций.",
                  "var_2": "read_committed читает сообщения из реплик-лидеров, read_uncommitted получает данные из follower-реплик для балансировки нагрузки.",
                  "var_3": "read_committed читает только закоммиченные сообщения, исключая незавершенные транзакции, read_uncommitted читает все сообщения.",
                  "var_4": "read_uncommitted гарантирует exactly-once семантику, read_committed обеспечивает at-least-once доставку для повышения производительности консьюмера.",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В production среде банка producer периодически получает ProducerFencedException при отправке в Kafka с включенными транзакциями. Какие две наиболее вероятные причины и как их диагностировать?",
                  "var_1": "Недостаточные права у SSL сертификата или истекший SASL токен. Проверить ACL конфигурацию и ротацию credentials.",
                  "var_2": "Превышение max.in.flight.requests.per.connection или недостаточный buffer.memory. Мониторить producer метрики throughput и memory usage.",
                  "var_3": "Конфликты isolation.level между producers или включенный enable.idempotence без транзакций. Синхронизировать настройки isolation.level в конфигурации.",
                  "var_4": "Дублирование transactional.id между инстансами или долгая обработка превышающая transaction.timeout.ms. Проверить уникальность ID и метрики задержек.",
                  "correct_answer": 4
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Алгоритмы и структуры данных [DAILY 65%]",
          "topics": [
            {
              "topic_name": "Работа с коллекциями Java (List, Set, Map): выбор оптимальной структуры данных для кэширования и поиска",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой интерфейс коллекции Java гарантирует уникальность элементов и подходит для кэширования идентификаторов клиентов банка?",
                  "var_1": "Set интерфейс, например HashSet или LinkedHashSet",
                  "var_2": "Map интерфейс с идентификатором как ключом и значением",
                  "var_3": "List интерфейс с проверкой contains перед добавлением",
                  "var_4": "ArrayList с переопределенным методом add для фильтрации дубликатов",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В системе биллинга телеком-оператора нужно кэшировать 100 000 тарифов с поиском по ID. Почему HashMap предпочтительнее TreeMap в этом случае?",
                  "var_1": "TreeMap требует реализации Comparable для ID тарифов в системе",
                  "var_2": "TreeMap потребляет больше памяти при хранении 100 000 записей",
                  "var_3": "HashMap поддерживает многопоточный доступ без синхронизации в отличие от TreeMap",
                  "var_4": "HashMap обеспечивает O(1) поиск против O(log n) у TreeMap",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "В продакшене банковского сервиса ConcurrentHashMap для кэша сессий показывает деградацию при 10 000+ RPS. Какая проблема и решение?",
                  "var_1": "Memory leak из-за отсутствия eviction, добавить WeakHashMap вместо CHM",
                  "var_2": "Недостаточный initial capacity, увеличить размер до ожидаемого количества сессий",
                  "var_3": "Высокая contention на сегментах, использовать Caffeine Cache с оптимизированным striping",
                  "var_4": "Overhead на хеширование, заменить на TreeMap с компаратором по session ID",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Алгоритмы сортировки и поиска: применение для обработки транзакций и логов",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой алгоритм сортировки используется в Java Collections.sort() для сортировки списка транзакций?",
                  "var_1": "QuickSort с оптимизацией three-way partitioning для стабильной сортировки объектов",
                  "var_2": "TimSort - гибридный алгоритм на основе merge sort и insertion sort",
                  "var_3": "HeapSort с дополнительной стабилизацией через индексы для объектов коллекций",
                  "var_4": "Dual-Pivot QuickSort - алгоритм сортировки по умолчанию для всех типов",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В банковском приложении нужно найти транзакцию по ID в отсортированном списке из 1 млн записей. Какой алгоритм поиска выбрать и почему?",
                  "var_1": "Бинарный поиск, так как O(log n) против O(n) линейного поиска",
                  "var_2": "Линейный поиск с кешированием, так как O(n) амортизируется при повторных запросах",
                  "var_3": "Хеш-таблица с O(1), но для отсортированного списка достаточно индексного доступа",
                  "var_4": "Интерполяционный поиск, так как O(log log n) быстрее бинарного для числовых ID",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "При обработке логов телеком-системы сервис падает с OutOfMemoryError при сортировке 50GB файла транзакций за день. Как решить проблему?",
                  "var_1": "Применить внешнюю сортировку: разбить на чанки, отсортировать в памяти, merge отсортированные файлы",
                  "var_2": "Увеличить heap memory через -Xmx параметры JVM до размера файла и отсортировать в памяти",
                  "var_3": "Использовать parallel streams с ForkJoinPool для параллельной сортировки всего файла в памяти",
                  "var_4": "Применить memory-mapped файлы через MappedByteBuffer и сортировать напрямую через NIO buffers",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Оптимизация производительности через правильный выбор структур данных (HashMap vs TreeMap, ArrayList vs LinkedList)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая структура данных в Java обеспечивает O(1) для операций get/put по ключу?",
                  "var_1": "LinkedHashMap",
                  "var_2": "HashMap",
                  "var_3": "TreeMap",
                  "var_4": "ArrayList",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В системе обработки банковских транзакций нужно хранить 10000 записей с частыми вставками в середину. ArrayList или LinkedList?",
                  "var_1": "CopyOnWriteArrayList для потокобезопасных вставок в любую позицию",
                  "var_2": "ArrayList, вставки в середину редки, доступ по индексу важнее",
                  "var_3": "LinkedList, вставки в середину выполняются за O(1) время",
                  "var_4": "LinkedList, операции add(index) оптимальны для больших коллекций",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком-биллинге HashMap с абонентскими номерами показывает деградацию при 500K записей. Какие причины и решение?",
                  "var_1": "Плохая hash-функция вызывает коллизии. Переопределить hashCode или использовать ConcurrentHashMap с правильным capacity",
                  "var_2": "Недостаточная initial capacity приводит к rehashing. Заменить HashMap на WeakHashMap для оптимизации памяти",
                  "var_3": "HashMap не подходит для больших объемов. Использовать LinkedHashMap с увеличенным loadFactor до 0.9",
                  "var_4": "Переполнение памяти из-за большого объема данных. Перейти на TreeMap для сортированного хранения",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Алгоритмы обхода графов и деревьев: моделирование иерархических структур (организационные структуры, тарифные планы)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой алгоритм обхода дерева используется для вывода организационной структуры банка от директора к сотрудникам по уровням?",
                  "var_1": "Обход в глубину (DFS)",
                  "var_2": "Прямой обход дерева (preorder)",
                  "var_3": "Обход в ширину (BFS)",
                  "var_4": "Алгоритм Дейкстры для деревьев",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В системе тарифных планов телеком-оператора с наследованием услуг: какой обход использовать для расчета итоговой стоимости с учетом всех родительских тарифов?",
                  "var_1": "Обход в глубину (DFS) с постобработкой от листьев к корню",
                  "var_2": "Обход в ширину (BFS) с накоплением стоимости по уровням",
                  "var_3": "Поиск кратчайшего пути алгоритмом Дейкстры от корня к листьям",
                  "var_4": "Обход в глубину (DFS) с предобработкой от корня к листьям",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "При загрузке 50000 записей организационной структуры банка через REST API возникает StackOverflowError в рекурсивном DFS. Как оптимизировать без изменения API?",
                  "var_1": "Использовать параллельную обработку через CompletableFuture для распределения нагрузки по потокам",
                  "var_2": "Настроить пагинацию на уровне базы данных с batch-загрузкой по 1000 записей",
                  "var_3": "Применить BFS с LinkedList вместо DFS для уменьшения глубины стека",
                  "var_4": "Заменить рекурсию на итеративный DFS со Stack или использовать увеличение стека",
                  "correct_answer": 4
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "profile": "Data Analyst",
      "specialization": "Data Analyst",
      "competencies": [
        {
          "competency_name": "SQL и работа с базами данных [CORE 90%]",
          "topics": [
            {
              "topic_name": "Основы SQL: SELECT-запросы, фильтрация, сортировка и агрегатные функции",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой оператор SQL используется для фильтрации записей в таблице транзакций банка по сумме больше 100000 тенге?",
                  "var_1": "GROUP BY с условием на сумму транзакций",
                  "var_2": "WHERE для фильтрации строк по условию",
                  "var_3": "FILTER применяется к строкам таблицы",
                  "var_4": "HAVING для фильтрации по условию суммы",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между HAVING и WHERE при анализе количества звонков абонентов по тарифам в таблице телеком-оператора?",
                  "var_1": "HAVING применяется к JOIN, WHERE к подзапросам",
                  "var_2": "WHERE работает с GROUP BY, HAVING с ORDER BY",
                  "var_3": "HAVING фильтрует строки таблицы, WHERE проверяет агрегатные функции",
                  "var_4": "WHERE фильтрует до агрегации, HAVING после GROUP BY",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему запрос с COUNT(DISTINCT client_id) и WHERE по дате транзакции работает медленно на 50 млн записей? Как оптимизировать архитектуру выборки?",
                  "var_1": "Увеличить размер буферного пула и использовать покрывающий индекс только по client_id",
                  "var_2": "Создать составной индекс по дате и client_id, использовать партиционирование таблицы",
                  "var_3": "Денормализовать таблицу, добавив колонку с хешем client_id для ускорения подсчёта",
                  "var_4": "Применить материализованное представление с предрасчётом COUNT по каждому клиенту ежедневно",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "JOIN-операции и объединение данных из множественных таблиц",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип JOIN вернет все записи из левой таблицы клиентов банка, даже если нет совпадений в таблице транзакций?",
                  "var_1": "LEFT JOIN или LEFT OUTER JOIN",
                  "var_2": "INNER JOIN с условием IS NULL",
                  "var_3": "RIGHT JOIN или RIGHT OUTER JOIN",
                  "var_4": "FULL JOIN с фильтром по левой таблице",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между INNER JOIN и CROSS JOIN при объединении таблицы абонентов (10 млн записей) с таблицей тарифных планов (50 записей)?",
                  "var_1": "INNER JOIN объединяет по первичному ключу, CROSS JOIN использует внешние ключи для связи",
                  "var_2": "INNER JOIN возвращает совпадения по ключу, CROSS JOIN создает декартово произведение всех комбинаций",
                  "var_3": "INNER JOIN выполняется быстрее за счет индексации, CROSS JOIN сканирует таблицы последовательно",
                  "var_4": "INNER JOIN фильтрует дубликаты абонентов, CROSS JOIN возвращает все записи без агрегации",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему JOIN через подзапрос с GROUP BY выполняется медленнее, чем LEFT JOIN с агрегацией, при анализе транзакций клиентов за год (500+ млн записей)?",
                  "var_1": "LEFT JOIN блокирует таблицу для консистентности данных, подзапрос работает с snapshot isolation без блокировок",
                  "var_2": "Подзапрос использует hash-агрегацию с параллелизмом, LEFT JOIN выполняет последовательное сканирование всех партиций",
                  "var_3": "Подзапрос материализуется в памяти перед JOIN, LEFT JOIN с агрегацией использует индексы и потоковую обработку",
                  "var_4": "LEFT JOIN создает декартово произведение перед фильтрацией, подзапрос оптимизирует выборку через временную таблицу",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Оконные функции и аналитические запросы для сложных вычислений",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая оконная функция используется для присвоения порядкового номера каждой строке в результате запроса по транзакциям клиентов банка?",
                  "var_1": "RANK() OVER (PARTITION BY customer_id)",
                  "var_2": "NTILE(100) OVER (ORDER BY transaction_date)",
                  "var_3": "DENSE_RANK() без указания ORDER BY",
                  "var_4": "ROW_NUMBER() OVER (ORDER BY column_name)",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между RANK() и DENSE_RANK() при анализе топ-10 клиентов телеком оператора по объему трафика с одинаковыми значениями?",
                  "var_1": "RANK() пропускает следующие номера после дубликатов, DENSE_RANK() присваивает последовательные номера",
                  "var_2": "RANK() учитывает NULL значения в начале, DENSE_RANK() игнорирует их полностью",
                  "var_3": "RANK() группирует дубликаты отдельной строкой, DENSE_RANK() объединяет их в агрегат",
                  "var_4": "RANK() сортирует по возрастанию, DENSE_RANK() всегда применяет сортировку по убыванию",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование оконных функций с PARTITION BY предпочтительнее подзапросов с GROUP BY при расчете скользящих средних балансов по 10 миллионам счетов банка?",
                  "var_1": "Оконные функции автоматически создают индексы для PARTITION BY, ускоряя выборку данных из больших таблиц",
                  "var_2": "Избегается повторное сканирование таблицы, сортировка выполняется однократно, снижается нагрузка на memory и tempdb",
                  "var_3": "GROUP BY требует блокировки таблицы на запись, оконные функции работают в режиме READ UNCOMMITTED изолированно",
                  "var_4": "Подзапросы загружают все данные в оперативную память сервера, оконные функции используют потоковую обработку данных",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Оптимизация запросов, индексы и анализ производительности баз данных",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип индекса создается по умолчанию при определении PRIMARY KEY в PostgreSQL?",
                  "var_1": "Hash индекс создается автоматически для PRIMARY KEY",
                  "var_2": "Уникальный GiST индекс генерируется для PRIMARY KEY",
                  "var_3": "B-tree индекс создается автоматически для PRIMARY KEY",
                  "var_4": "Clustered индекс создается по умолчанию для PRIMARY KEY",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В таблице транзакций банка 50 млн записей. Запрос с WHERE status = 'pending' выполняется 40 секунд, хотя индекс на status существует. В чем вероятная причина?",
                  "var_1": "Отсутствие покрывающего индекса приводит к дополнительным обращениям к таблице",
                  "var_2": "Низкая селективность индекса из-за малого количества уникальных значений",
                  "var_3": "Фрагментация индекса требует выполнения операции REBUILD для восстановления",
                  "var_4": "Индекс не используется из-за неявного преобразования типов данных",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "При партиционировании таблицы звонков телеком-оператора по месяцам аналитические запросы с JOIN стали медленнее. Как оптимизировать архитектуру без изменения партиционирования?",
                  "var_1": "Создать локальные индексы на каждой партиции и использовать partition-wise join",
                  "var_2": "Настроить hash-партиционирование таблиц для равномерного распределения JOIN операций",
                  "var_3": "Применить глобальные индексы и настроить параллельное выполнение запросов",
                  "var_4": "Использовать материализованные представления с агрегацией данных по партициям",
                  "correct_answer": 1
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Визуализация данных (Tableau, Power BI, Looker) [CORE 85%]",
          "topics": [
            {
              "topic_name": "Основы визуализации: выбор типов диаграмм и графиков для различных данных",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип диаграммы следует использовать для отображения динамики количества банковских транзакций по месяцам за год?",
                  "var_1": "Тепловая карта для анализа распределения транзакций по времени",
                  "var_2": "Точечная диаграмма для визуализации корреляции между периодами",
                  "var_3": "Круговая диаграмма для отображения долей транзакций по месяцам",
                  "var_4": "Линейный график или столбчатая диаграмма для временных рядов",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между использованием тепловой карты и столбчатой диаграммы при анализе активности абонентов телеком-оператора по часам и дням недели?",
                  "var_1": "Столбчатая диаграмма отображает плотность распределения, тепловая карта показывает тренды",
                  "var_2": "Тепловая карта требует агрегации данных, столбчатая работает с детальными значениями",
                  "var_3": "Тепловая карта показывает паттерны двух измерений одновременно, столбчатая требует фильтрации",
                  "var_4": "Столбчатая диаграмма лучше показывает корреляции между временными интервалами и днями",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Почему для дашборда с метриками реального времени по fraud-транзакциям в банке следует избегать круговых диаграмм и использовать KPI-карточки с спарклайнами?",
                  "var_1": "Круговые диаграммы затрудняют быстрое сравнение значений, спарклайны показывают тренд и текущее значение мгновенно",
                  "var_2": "Круговые диаграммы требуют больше вычислительных ресурсов при обновлении данных в реальном времени",
                  "var_3": "Спарклайны обеспечивают лучшую производительность рендеринга при высокой частоте обновления метрик fraud-детекции",
                  "var_4": "Круговые диаграммы занимают больше экранного пространства и снижают информационную плотность дашборда",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Создание интерактивных дашбордов и настройка фильтров",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип фильтра в Tableau позволяет пользователю выбирать диапазон дат для анализа транзакций банка?",
                  "var_1": "Контекстный фильтр по измерению даты",
                  "var_2": "Параметр с отдельным календарным селектором",
                  "var_3": "Фильтр диапазона дат (Date Range Filter)",
                  "var_4": "Фильтр типа Wildcard для временных значений",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В Power BI для дашборда телеком-оператора нужно показывать данные по регионам Казахстана. Какой тип фильтра эффективнее для связи между несколькими визуализациями - Page level или Report level, и почему?",
                  "var_1": "Report level, обеспечивает единую фильтрацию для всех страниц отчета",
                  "var_2": "Visual level, синхронизирует фильтры между связанными визуализациями автоматически",
                  "var_3": "Drill-through фильтр, обеспечивает кросс-страничную навигацию по регионам",
                  "var_4": "Page level, применяет фильтрацию только к текущей странице дашборда",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Дашборд банка с 15 млн записи транзакций тормозит при использовании каскадных фильтров в Tableau. Какую архитектурную оптимизацию применить для улучшения производительности без потери функциональности?",
                  "var_1": "Переход на Hyper экстракты с отключением индексации и добавлением кэширования результатов",
                  "var_2": "Увеличение оперативной памяти сервера Tableau и настройка параллельных запросов к источнику",
                  "var_3": "Применение Live Connection с материализованными представлениями и партиционированием по датам транзакций",
                  "var_4": "Агрегация данных в источнике, использование экстрактов с индексацией и Context Filters",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Оптимизация производительности отчетов и работа с большими объемами данных",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип соединения данных в Tableau обеспечивает максимальную производительность при работе с большими объемами транзакционных данных банка?",
                  "var_1": "Live connection (прямое подключение)",
                  "var_2": "Extract (выгрузка данных)",
                  "var_3": "Published data source (опубликованный источник)",
                  "var_4": "Federated query (федеративный запрос)",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В Power BI дашборд с 50 млн записей абонентов телеком-оператора загружается 2 минуты. Какие два метода оптимизации применить в первую очередь?",
                  "var_1": "Агрегация данных на уровне источника и использование DirectQuery вместо Import",
                  "var_2": "Увеличение памяти сервера и добавление индексов в визуальные элементы",
                  "var_3": "Параллельная загрузка таблиц и включение кэширования на уровне DAX",
                  "var_4": "Партиционирование таблиц по датам и использование инкрементального обновления",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать архитектуру отчетности в Tableau для банка с 200+ отчетов и 5TB данных, чтобы минимизировать нагрузку на продуктивную БД и обеспечить обновление данных каждые 15 минут?",
                  "var_1": "Внедрить промежуточный слой с агрегированными extract'ами, инкрементальным обновлением и материализованными представлениями в отдельной аналитической БД",
                  "var_2": "Настроить репликацию продуктивной БД в реальном времени и подключать все отчеты напрямую к реплике с партиционированием таблиц",
                  "var_3": "Использовать живые подключения к продуктивной БД с кешированием запросов на уровне Tableau Server и индексацией таблиц",
                  "var_4": "Создать единый гипер-extract на все отчеты с полным обновлением каждые 15 минут и распределением нагрузки через Tableau Bridge",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Продвинутые вычисления: LOD-выражения, DAX-формулы и кастомные метрики",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис используется для создания базового LOD-выражения FIXED в Tableau для расчета общей суммы транзакций по клиенту?",
                  "var_1": "{INCLUDE [Customer_ID] : SUM([Transaction_Amount])}",
                  "var_2": "{FIXED [Customer_ID] : SUM([Transaction_Amount])}",
                  "var_3": "CALCULATE(SUM([Transaction_Amount]), ALLEXCEPT(Customer_ID))",
                  "var_4": "{LOD FIXED [Customer_ID] = SUM([Transaction_Amount])}",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В Power BI для витрины телеком-оператора нужно посчитать среднюю выручку по абоненту независимо от фильтров дашборда. Какую функцию DAX использовать: CALCULATE с ALL или простое AVERAGE?",
                  "var_1": "CALCULATE с FILTER для пересчета контекста строк",
                  "var_2": "CALCULATE с ALL для игнорирования контекста фильтров",
                  "var_3": "AVERAGE с параметром ALLSELECTED для частичного игнорирования",
                  "var_4": "AVERAGEX с итерацией по таблице фактов",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В банковском дашборде с 50М транзакций LOD-выражения INCLUDE вызывают таймауты при расчете конверсии по продуктам. Как оптимизировать архитектуру расчета метрик?",
                  "var_1": "Использовать FIXED вместо INCLUDE и добавить индексы на таблицы источника данных",
                  "var_2": "Включить параллельные запросы Tableau Server и увеличить кеш экстрактов до 128GB",
                  "var_3": "Перенести агрегацию в ETL-слой с материализованными таблицами и использовать предрасчитанные метрики",
                  "var_4": "Применить инкрементальный refresh экстрактов с фильтрами контекста на уровне источника",
                  "correct_answer": 3
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Excel (продвинутый уровень) [CORE 80%]",
          "topics": [
            {
              "topic_name": "Сводные таблицы и многомерный анализ данных (PivotTables, слайсеры, вычисляемые поля)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой инструмент в сводной таблице Excel позволяет быстро фильтровать данные по нескольким полям одновременно без изменения структуры отчета?",
                  "var_1": "Фильтры отчета (Report Filters)",
                  "var_2": "Группировка данных (Grouping)",
                  "var_3": "Вычисляемые поля (Calculated Fields)",
                  "var_4": "Слайсеры (Slicers)",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В банке нужно анализировать транзакции клиентов: сумма, комиссия и чистая выручка. Когда следует использовать вычисляемое поле вместо вычисляемого элемента в сводной таблице?",
                  "var_1": "Когда требуется группировка транзакций по датам с применением фильтров слайсеров",
                  "var_2": "Когда расчет выполняется между разными полями, а не внутри одного поля",
                  "var_3": "Когда нужно суммировать данные по нескольким измерениям одновременно в строках",
                  "var_4": "Когда расчет производится внутри одного поля для категорий значений",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при проектировании сводных таблиц для анализа абонентской базы телеком-оператора критически важно избегать объединенных ячеек и пустых строк в исходных данных?",
                  "var_1": "Нарушается корректность работы слайсеров и фильтров при группировке по датам",
                  "var_2": "Снижается производительность пересчёта формул и увеличивается время загрузки сводной таблицы",
                  "var_3": "Нарушается структура таблицы, Excel не распознает непрерывный диапазон данных для анализа",
                  "var_4": "Возникают ошибки при создании вычисляемых полей с использованием функций агрегации",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Продвинутые функции для работы с данными (INDEX-MATCH, XLOOKUP, массивы, FILTER, UNIQUE)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис функции XLOOKUP для поиска клиента по БИН в таблице банковских контрагентов?",
                  "var_1": "=XLOOKUP(массив_поиска, искомое_значение, массив_возврата, [критерий_сопоставления])",
                  "var_2": "=XLOOKUP(значение_поиска, столбец_возврата, столбец_поиска, [направление])",
                  "var_3": "=XLOOKUP(БИН, диапазон_БИН:диапазон_данных, режим_поиска)",
                  "var_4": "=XLOOKUP(искомое_значение, массив_поиска, массив_возврата, [если_не_найдено])",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "Когда следует использовать связку INDEX-MATCH вместо XLOOKUP при анализе данных абонентов телеком-оператора с 500K строк?",
                  "var_1": "Когда требуется поиск по нескольким критериям с агрегацией результатов",
                  "var_2": "Для совместимости с версиями Excel старше 2021 и оптимизации производительности",
                  "var_3": "При необходимости возврата нескольких столбцов одновременно через массивы constantes",
                  "var_4": "Для двунаправленного поиска в таблицах с динамическими диапазонами данных",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать систему динамических отчетов по транзакциям банка используя FILTER и UNIQUE, чтобы избежать пересчета при изменении исходных данных?",
                  "var_1": "Использовать структурированные таблицы с именованными диапазонами и разделить фильтрацию по слоям данных",
                  "var_2": "Настроить Power Query для автоматического обновления и кэширования результатов фильтрации в памяти",
                  "var_3": "Применить волатильные формулы с INDIRECT и создать динамические ссылки на диапазоны данных",
                  "var_4": "Создать сводные таблицы с автообновлением и связать их через GETPIVOTDATA для динамики",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Автоматизация и оптимизация через Power Query (ETL-процессы, M-язык, объединение источников)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая функция в Power Query используется для объединения нескольких таблиц по вертикали (добавление строк)?",
                  "var_1": "Table.Join или Merge Queries",
                  "var_2": "Table.Combine или Append Queries",
                  "var_3": "List.Union для таблиц",
                  "var_4": "Table.NestedJoin с параметром Inner",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В банке нужно ежедневно загружать данные транзакций из 50 филиалов (CSV файлы в одной папке). Какой подход в Power Query оптимален для автоматизации загрузки всех файлов одновременно?",
                  "var_1": "Использовать Get Data из Web с параметрами",
                  "var_2": "Применить Append Queries для каждого CSV вручную",
                  "var_3": "Использовать From Folder с последующим Combine Files",
                  "var_4": "Создать 50 отдельных запросов From File",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "При проектировании ETL-процесса для телеком-оператора с множественными источниками данных, почему критически важно использовать Query Folding, и в каких случаях он не работает?",
                  "var_1": "Автоматически распараллеливает запросы между источниками; блокируется при использовании Reference и merge операций с параметрами",
                  "var_2": "Кеширует промежуточные результаты в памяти; прекращает работу при превышении лимита в 1GB или использовании Table.Buffer",
                  "var_3": "Оптимизирует M-код через компиляцию в native код; отключается при работе с JSON/XML источниками и веб-сервисами",
                  "var_4": "Переносит вычисления на сервер БД для производительности; не работает после пользовательских функций и некоторых трансформаций M-языка",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Визуализация данных и интерактивные дашборды (условное форматирование, спарклайны, срезы, динамические диаграммы)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой инструмент Excel используется для создания миниатюрных графиков в одной ячейке для отображения динамики показателей KPI?",
                  "var_1": "Спарклайны (Sparklines)",
                  "var_2": "Микродиаграммы (Micro Charts)",
                  "var_3": "Условное форматирование (Conditional Formatting)",
                  "var_4": "Срезы данных (Slicers)",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В отчете по транзакциям клиентов банка нужно визуально выделить суммы выше 5 млн тенге красным, а ниже 100 тыс — серым. Какой метод оптимален и почему?",
                  "var_1": "Условное форматирование с правилами на основе значений — автоматически обновляется при изменении данных",
                  "var_2": "Макрос VBA с циклом проверки значений ячеек и применением цветовой заливки",
                  "var_3": "Спарклайны с настройкой цветовых маркеров для критических значений транзакций клиентов",
                  "var_4": "Функция ЕСЛИ с вложенной функцией ЯЧЕЙКА для установки формата по условию",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "При проектировании интерактивного дашборда для мониторинга абонентской базы телеком-оператора с 12 регионами и 8 тарифами, какую архитектуру визуализации вы выберете для обеспечения производительности и удобства анализа?",
                  "var_1": "Сводная таблица с срезами, динамические диаграммы на именованных диапазонах, разделение данных и визуализации на отдельные листы",
                  "var_2": "Power Query для ETL, единая сводная таблица на главном листе со всеми срезами и встроенными диаграммами",
                  "var_3": "Несколько связанных сводных таблиц с общими фильтрами, статические диаграммы на ячейках через СМЕЩ и ИНДЕКС",
                  "var_4": "Условное форматирование с градиентами, спарклайны для трендов, макросы VBA для автоматического обновления визуализаций по кнопке",
                  "correct_answer": 1
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Статистический анализ и A/B тестирование [DAILY 60%]",
          "topics": [
            {
              "topic_name": "Основы статистических тестов: t-тест, z-тест, хи-квадрат и условия их применения",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой статистический тест используется для сравнения средних значений двух групп с неизвестной дисперсией генеральной совокупности?",
                  "var_1": "парный t-тест для связанных наблюдений",
                  "var_2": "z-тест для нормально распределённых выборок",
                  "var_3": "критерий хи-квадрат для сравнения средних",
                  "var_4": "t-тест Стьюдента для независимых выборок",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В A/B тесте новой функции мобильного банкинга участвуют 50 пользователей в каждой группе. Конверсия группы А: 12%, группы B: 18%. Какой тест применить и почему?",
                  "var_1": "Точный тест Фишера, поскольку размер выборок превышает 30 наблюдений",
                  "var_2": "Z-тест для пропорций, так как сравниваются две независимые выборки",
                  "var_3": "Хи-квадрат тест, так как сравниваются пропорции категориальных данных",
                  "var_4": "T-тест Стьюдента для независимых выборок с категориальными данными",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "При A/B тесте тарифного плана телеком-оператора p-value составил 0.048, но размер эффекта минимальный (0.3%). Какую проблему это выявляет и как решать?",
                  "var_1": "Статистическая значимость без практической значимости из-за большой выборки, использовать минимальный детектируемый эффект",
                  "var_2": "Множественное тестирование без поправки Бонферрони, применить корректировку уровня значимости на число гипотез",
                  "var_3": "Ошибка первого рода из-за низкого порога значимости, увеличить альфа до 0.10 для корректировки",
                  "var_4": "Недостаточная мощность теста привела к ложноположительному результату, увеличить размер выборки для валидации",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Дизайн и проведение A/B тестов: размер выборки, статистическая мощность и длительность эксперимента",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое статистическая мощность (power) в A/B тестировании?",
                  "var_1": "Доля пользователей, необходимая для корректного завершения эксперимента",
                  "var_2": "Вероятность ошибочно отклонить нулевую гипотезу при тестировании",
                  "var_3": "Минимальный размер выборки для достижения статистической значимости",
                  "var_4": "Вероятность обнаружить эффект, когда он реально существует",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "Банк тестирует новый интерфейс мобильного приложения. Конверсия в заявку на кредит 2%, MDE 0.3%, α=0.05, β=0.2. Какой минимальный размер выборки нужен для каждой группы?",
                  "var_1": "Около 87 000 пользователей на группу",
                  "var_2": "Около 8 700 пользователей на группу",
                  "var_3": "Около 43 500 пользователей на группу",
                  "var_4": "Около 17 300 пользователей на группу",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком компании A/B тест на изменение тарифного плана показал значимый результат на 3-й день (p=0.03), но вы продолжили эксперимент. Почему это правильное решение и какие риски раннего завершения?",
                  "var_1": "Избежать эффекта новизны и peeking bias, минимизировать ложноположительные результаты",
                  "var_2": "Дождаться равномерного распределения трафика между контрольной и тестовой группами",
                  "var_3": "Увеличить статистическую мощность и достичь целевого размера выборки по формуле",
                  "var_4": "Собрать больше данных для сегментации пользователей по демографическим признакам",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Интерпретация результатов A/B тестов: p-value, доверительные интервалы и практическая значимость",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что означает p-value = 0.03 в результатах A/B теста новой версии мобильного приложения банка?",
                  "var_1": "Доверительный интервал составляет 97% для данного теста",
                  "var_2": "Вероятность получить такой результат случайно составляет 3%",
                  "var_3": "Новая версия улучшает метрику на 3% относительно контроля",
                  "var_4": "Статистическая мощность теста достигла порога в 3%",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В A/B тесте тарифа связи p-value = 0.04, но прирост конверсии 0.2%. Какое решение принять и почему?",
                  "var_1": "Отклонить изменения, результат статистически значим, но не практически значим",
                  "var_2": "Продлить тест для увеличения размера выборки и мощности",
                  "var_3": "Принять изменения с осторожностью, учитывая статистическую значимость результата",
                  "var_4": "Внедрить изменения, p-value ниже порога 0.05 подтверждает эффект",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "A/B тест кредитной формы показал p-value = 0.001, но через неделю эффект исчез. Какие причины и как диагностировать?",
                  "var_1": "Пересчитать p-value с поправкой Бонферрони для множественных сравнений по дням",
                  "var_2": "Применить байесовский подход для оценки апостериорной вероятности эффекта",
                  "var_3": "Увеличить размер выборки и повторить тест с более строгим alpha-уровнем",
                  "var_4": "Проверить эффект новизны, сезонность, изменение трафика и сегментировать пользователей",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Продвинутые методы тестирования: A/A тесты, множественное тестирование и байесовский подход",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое A/A тест и для чего он используется перед запуском A/B теста?",
                  "var_1": "Предварительный тест на меньшей выборке для оценки необходимого размера выборки основного A/B теста.",
                  "var_2": "Параллельный запуск двух A/B тестов на разных сегментах для проверки консистентности результатов эксперимента.",
                  "var_3": "Тест с идентичными вариантами для проверки корректности системы сплитования и отсутствия ложных срабатываний.",
                  "var_4": "Тест двух вариантов с минимальными различиями для калибровки чувствительности метрик перед основным экспериментом.",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В банке проводится 20 A/B тестов одновременно на разных фичах мобильного приложения. Какой метод коррекции p-value следует применить для контроля множественного тестирования?",
                  "var_1": "Bootstrap-ресемплинг с доверительными интервалами для каждого теста независимо",
                  "var_2": "Метод Бонферрони или менее консервативный Холма-Бонферрони для контроля FWER.",
                  "var_3": "Увеличение размера выборки пропорционально количеству тестов для сохранения мощности",
                  "var_4": "Метод False Discovery Rate (FDR) с порогом q-value 0.05",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Телеком компания тестирует новый тарифный план. Частотный A/B тест показал p-value=0.08, но байесовский подход с prior на основе исторических данных дает вероятность успеха 92%. Как принять решение и почему?",
                  "var_1": "Провести дополнительный A/B тест с увеличенной выборкой до достижения p-value<0.05, затем сравнить с байесовским результатом.",
                  "var_2": "Использовать байесовский результат, так как prior включает релевантную историческую информацию и учитывает бизнес-контекст лучше произвольного порога значимости.",
                  "var_3": "Усреднить оба подхода: применить взвешенную комбинацию частотного и байесовского результатов для принятия сбалансированного решения.",
                  "var_4": "Отклонить гипотезу о различиях, так как p-value превышает стандартный порог 0.05 и статистическая значимость не достигнута.",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Python для анализа данных (pandas, matplotlib) [DAILY 70%]",
          "topics": [
            {
              "topic_name": "Загрузка и первичная обработка данных в pandas (чтение файлов, фильтрация, сортировка, обработка пропусков)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод pandas используется для чтения CSV-файла с транзакциями клиентов банка?",
                  "var_1": "pd.import_csv()",
                  "var_2": "pd.open_csv()",
                  "var_3": "pd.read_csv()",
                  "var_4": "pd.load_csv()",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между dropna() и fillna() при обработке пропусков в данных абонентов? Когда использовать каждый метод?",
                  "var_1": "dropna() заполняет средним значением, fillna() удаляет дубликаты. Используй dropna() для числовых колонок.",
                  "var_2": "dropna() заменяет на ноль, fillna() удаляет колонки. Используй fillna() для категориальных признаков абонентов.",
                  "var_3": "dropna() удаляет строки с пропусками, fillna() заполняет значениями. Используй fillna() для критичных полей.",
                  "var_4": "fillna() удаляет строки с пропусками, dropna() интерполирует значения. Используй dropna() для временных рядов.",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "При загрузке 50GB лог-файлов транзакций банка pandas выдает MemoryError. Какие три подхода решат проблему без изменения железа?",
                  "var_1": "Использовать chunksize в read_csv, dtype optimization, или dask/polars вместо pandas.",
                  "var_2": "Применить read_csv с параметром low_memory=False, engine='python', encoding optimization.",
                  "var_3": "Увеличить swap память, использовать gc.collect() после каждой операции, компрессия gzip.",
                  "var_4": "Использовать numpy.memmap для прямого доступа, pandas.set_option('memory_mode', 'low'), индексация.",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Агрегация и группировка данных (groupby, pivot_table, merge, join операции)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод pandas используется для группировки данных по одному или нескольким столбцам перед применением агрегирующих функций?",
                  "var_1": "pivot_table()",
                  "var_2": "groupby()",
                  "var_3": "transform()",
                  "var_4": "aggregate()",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между merge() с параметром how='left' и how='inner' при объединении таблицы транзакций клиентов банка с таблицей профилей?",
                  "var_1": "left выполняет outer join с приоритетом, inner делает cross join",
                  "var_2": "left сохраняет все транзакции даже без профиля, inner только совпадения",
                  "var_3": "left объединяет по левому индексу, inner по обоим ключам таблиц",
                  "var_4": "inner сохраняет все записи обеих таблиц, left только левую таблицу",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "При агрегации 50 млн записей звонков абонентов телеком оператора groupby работает медленно. Какие подходы оптимизации применить для ускорения?",
                  "var_1": "Переключиться на iterrows с ручной агрегацией, использовать defaultdict для накопления результатов",
                  "var_2": "Применить vectorization вместо groupby, использовать NumPy arrays для агрегаций",
                  "var_3": "Увеличить RAM, использовать multiprocessing.Pool, индексировать DataFrame перед группировкой",
                  "var_4": "Использовать categorical dtype, предварительно отсортировать данные, применить chunking или dask",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Визуализация данных с помощью matplotlib (линейные графики, гистограммы, scatter plots, настройка стилей)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод matplotlib используется для создания линейного графика из pandas DataFrame?",
                  "var_1": "df.line() или plt.chart()",
                  "var_2": "df.plot() или plt.plot()",
                  "var_3": "df.draw_line() или plt.graph()",
                  "var_4": "df.visualize() или plt.line()",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между plt.subplot() и plt.subplots() при создании дашборда с метриками транзакций банка?",
                  "var_1": "plt.subplot() поддерживает интерактивное добавление графиков, plt.subplots() требует предварительного планирования структуры",
                  "var_2": "plt.subplots() автоматически синхронизирует оси графиков, plt.subplot() создает независимые координатные системы",
                  "var_3": "plt.subplots() создает все оси сразу и возвращает массив, удобнее для множественных графиков",
                  "var_4": "plt.subplot() использует GridSpec для гибкой компоновки, plt.subplots() создает только регулярную сетку",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при визуализации 500K транзакций за месяц на scatter plot происходит падение производительности и как это решить?",
                  "var_1": "Overplotting и memory overhead. Использовать hexbin, datashader, агрегацию данных или rasterized=True",
                  "var_2": "Недостаточно RAM для отрисовки точек. Использовать plt.scatter с параметром s=1 и уменьшить DPI",
                  "var_3": "Блокировка главного потока при построении. Применить plt.ion() для интерактивного режима и async plotting",
                  "var_4": "Медленный рендеринг matplotlib. Переключиться на plt.style.use('fast') и увеличить figsize для оптимизации",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Временные ряды и расчет статистических метрик в pandas (datetime индексы, rolling windows, describe, corr)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод pandas используется для установки колонки с датами в качестве индекса DataFrame для анализа временных рядов транзакций?",
                  "var_1": "DatetimeIndex() напрямую в конструкторе DataFrame",
                  "var_2": "set_index() с параметром колонки datetime",
                  "var_3": "reindex() с передачей datetime колонки",
                  "var_4": "to_datetime() с параметром index=True",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между rolling(window=7).mean() и resample('7D').mean() при анализе дневных объемов транзакций в банковской системе?",
                  "var_1": "resample использует центрированное окно, rolling выравнивает по правому краю периода",
                  "var_2": "rolling агрегирует по календарным неделям, resample использует окно из семи последних значений",
                  "var_3": "rolling вычисляет кумулятивное среднее, resample выполняет простое среднее по периодам",
                  "var_4": "rolling использует скользящее окно по записям, resample агрегирует по временным периодам",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "При расчете rolling корреляции между объемом транзакций и числом активных абонентов за 30 дней получаете NaN для первых строк. Как обработать это для дашборда руководству банка?",
                  "var_1": "Использовать параметр min_periods в rolling для минимального количества наблюдений или fillna",
                  "var_2": "Использовать dropna для удаления строк с NaN перед визуализацией на дашборде",
                  "var_3": "Заменить rolling на expanding для расчета корреляции с накопительным окном от начала",
                  "var_4": "Применить interpolate с методом linear для заполнения пропусков в начале временного ряда",
                  "correct_answer": 1
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "profile": "Data Scientist",
      "specialization": "Data Science",
      "competencies": [
        {
          "competency_name": "Статистика и теория вероятностей [CORE 90%]",
          "topics": [
            {
              "topic_name": "Проверка статистических гипотез и A/B тестирование",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое p-value в контексте A/B теста и какой порог обычно используется для определения статистической значимости?",
                  "var_1": "Мощность теста для обнаружения различий, обычно используется 0.8",
                  "var_2": "Доля пользователей с изменением конверсии, критический уровень 0.1",
                  "var_3": "Вероятность того, что гипотеза верна, стандартный порог 0.01",
                  "var_4": "Вероятность получить результат при истинной нулевой гипотезе, порог 0.05",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В банке тестируют новый интерфейс мобильного приложения. Какой статистический тест использовать для сравнения конверсии в оформление кредита между группами, если размер выборки 5000 пользователей в каждой группе?",
                  "var_1": "Тест Манна-Уитни для непараметрического сравнения медиан",
                  "var_2": "Парный t-тест для связанных выборок пользователей",
                  "var_3": "ANOVA с post-hoc анализом для множественных групп",
                  "var_4": "Z-тест для разности двух пропорций или хи-квадрат тест",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Телеком запускает A/B тест новой тарифной модели на 2% пользователей. Как спроектировать систему мониторинга для раннего обнаружения негативного эффекта, учитывая проблему множественных сравнений при ежедневной проверке метрик?",
                  "var_1": "Sequential testing с adjusted alpha boundaries или Bayesian monitoring с предустановленными stopping rules",
                  "var_2": "Многоуровневый мониторинг с False Discovery Rate control через процедуру Benjamini-Hochberg для p-values",
                  "var_3": "Ежедневный t-test с Bonferroni correction для всех ключевых метрик и dashboard с алертами",
                  "var_4": "CUSUM charts с фиксированными control limits и автоматическая остановка теста при первом отклонении",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Распределения вероятностей и их применение в машинном обучении",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какое распределение вероятностей используется для моделирования бинарных исходов, например, дефолт/не дефолт клиента банка?",
                  "var_1": "Биномиальное распределение",
                  "var_2": "Распределение Пуассона",
                  "var_3": "Распределение Бернулли",
                  "var_4": "Нормальное распределение",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "Почему для моделирования времени между звонками в колл-центре телеком-оператора используют экспоненциальное распределение вместо нормального?",
                  "var_1": "Экспоненциальное распределение лучше отражает симметричность интервалов между входящими звонками клиентов",
                  "var_2": "Центральная предельная теорема обеспечивает сходимость временных интервалов к экспоненциальному виду",
                  "var_3": "Экспоненциальное распределение моделирует время между независимыми событиями и определено только для положительных значений",
                  "var_4": "Нормальное распределение плохо работает с малыми выборками звонков в непиковые часы работы",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Как выбор prior распределения в байесовской модели кредитного скоринга влияет на устойчивость предсказаний при дрейфе данных и какое семейство распределений предпочтительнее для small data сценариев?",
                  "var_1": "Информативный prior со слабой регуляризацией стабилизирует оценки при дрейфе; conjugate prior семейства обеспечивают аналитические решения для малых выборок",
                  "var_2": "Hierarchical prior с сильной регуляризацией компенсирует дрейф; empirical Bayes подход эффективен при малом количестве наблюдений",
                  "var_3": "Uniform prior минимизирует bias при дрейфе; экспоненциальное семейство распределений оптимально для ограниченных данных в продакшене",
                  "var_4": "Non-informative prior обеспечивает робастность к дрейфу; mixture distributions из Gaussian семейства предпочтительны для sparse data",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Корреляционный и регрессионный анализ данных",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой коэффициент корреляции указывает на сильную положительную линейную связь между суммой кредита и доходом клиента банка?",
                  "var_1": "Коэффициент детерминации R² близкий к единице",
                  "var_2": "Коэффициент Спирмена для нелинейных зависимостей",
                  "var_3": "Коэффициент Пирсона близкий к +1",
                  "var_4": "Коэффициент Пирсона в диапазоне -1 до 0",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем ключевое отличие Ridge от Lasso регрессии при прогнозировании оттока абонентов телеком-оператора с 50+ признаками?",
                  "var_1": "Lasso работает быстрее на больших данных телекома",
                  "var_2": "Ridge обнуляет признаки, Lasso сохраняет все коэффициенты",
                  "var_3": "Ridge использует L1-регуляризацию, Lasso использует L2-регуляризацию",
                  "var_4": "Lasso обнуляет коэффициенты, Ridge уменьшает, не обнуляя",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при построении модели скоринга для необанкинга следует использовать квантильную регрессию вместо OLS при наличии выбросов в данных о доходах?",
                  "var_1": "Квантильная регрессия минимизирует среднеквадратичную ошибку лучше чем OLS для финансовых данных",
                  "var_2": "Квантильная регрессия робастна к выбросам и моделирует условные квантили распределения",
                  "var_3": "Робастная регрессия методом Хубера полностью исключает выбросы из обучающей выборки",
                  "var_4": "OLS с логарифмированием доходов нормализует распределение и устраняет влияние выбросов",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Байесовская статистика и условные вероятности",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что показывает теорема Байеса при расчете вероятности мошеннической транзакции после получения сигнала от антифрод-системы?",
                  "var_1": "Апостериорную вероятность мошенничества с учетом наблюдаемых данных",
                  "var_2": "Совместную вероятность мошенничества и срабатывания антифрод-системы",
                  "var_3": "Функцию правдоподобия сигнала при условии мошеннической транзакции",
                  "var_4": "Априорную вероятность мошенничества до анализа сигнала системы",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В телеком-компании base rate оттока клиентов 2%, модель предсказывает отток с точностью 85%. Почему нельзя использовать только accuracy для оценки модели?",
                  "var_1": "Accuracy не учитывает стоимость ошибок первого и второго рода",
                  "var_2": "Телеком-данные требуют использования взвешенной accuracy с учетом сегментов клиентов",
                  "var_3": "Модель требует калибровки вероятностей для корректной работы с редкими событиями",
                  "var_4": "Несбалансированные классы приводят к высокой accuracy даже при неинформативных предсказаниях",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "При построении байесовской модели скоринга в банке, как выбрать между информативными и неинформативными prior-распределениями для параметров кредитного риска в условиях ограниченных исторических данных?",
                  "var_1": "Использовать слабо-информативные prior на основе экспертных оценок и регуляторных требований",
                  "var_2": "Использовать conjugate prior на основе бета-распределения для упрощения вычислений",
                  "var_3": "Задавать информативные prior из данных предыдущих моделей методом empirical Bayes",
                  "var_4": "Применять строго неинформативные uniform prior для обеспечения объективности модели",
                  "correct_answer": 1
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Python для Data Science (pandas, numpy, scikit-learn) [CORE 90%]",
          "topics": [
            {
              "topic_name": "Манипуляция и обработка данных с pandas: индексация, группировка, объединение датафреймов",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод pandas используется для объединения двух датафреймов по общему столбцу, аналогично SQL JOIN?",
                  "var_1": "join() или df.join()",
                  "var_2": "append() или pd.append()",
                  "var_3": "merge() или pd.merge()",
                  "var_4": "concat() или pd.concat()",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между merge() и concat() при объединении датафреймов с транзакциями клиентов банка из разных филиалов?",
                  "var_1": "merge склеивает построчно, concat объединяет по общим столбцам",
                  "var_2": "merge объединяет по ключам, concat склеивает по осям без условий",
                  "var_3": "merge сохраняет дубликаты строк, concat удаляет повторяющиеся записи автоматически",
                  "var_4": "concat требует общие ключи, merge работает с разными индексами",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при группировке 50 млн телеком CDR-записей по абонентам стоит использовать категориальные типы для phone_number перед groupby?",
                  "var_1": "Обеспечивает корректную сортировку телефонных номеров в международном формате при агрегации",
                  "var_2": "Автоматически создает индексы для ускорения поиска конкретных абонентов в группах",
                  "var_3": "Снижает потребление памяти и ускоряет группировку за счет целочисленных кодов",
                  "var_4": "Активирует параллельную обработку groupby операций через многопоточность pandas",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Векторизация и математические операции с numpy: Broadcasting, линейная алгебра, работа с массивами",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что произойдет при сложении numpy массива формы (5, 1) с массивом формы (3,) согласно правилам broadcasting?",
                  "var_1": "Произойдет ошибка ValueError из-за несовместимости размерностей",
                  "var_2": "Массив (3,) расширится до (5, 3) с дублированием",
                  "var_3": "Получится массив формы (5, 3) с копированием элементов",
                  "var_4": "Результат будет иметь форму (8,) после конкатенации",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "Для расчета корреляционной матрицы клиентских транзакций размером (10000, 50) что эффективнее: np.corrcoef или стандартизация с последующим np.dot, и почему?",
                  "var_1": "np.cov с последующей нормализацией быстрее через vectorized операции",
                  "var_2": "np.dot после стандартизации быстрее за счет оптимизированного BLAS",
                  "var_3": "np.corrcoef эффективнее благодаря внутренней оптимизации для корреляций",
                  "var_4": "pandas.DataFrame.corr() оптимальнее за счет Cython реализации",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "При векторизации расчета расстояний между 1 млн клиентов банка (shape 1000000, 128) память переполняется. Как оптимизировать без циклов, сохранив производительность numpy?",
                  "var_1": "Применить np.memmap с файловым хранением и последующей агрегацией результатов",
                  "var_2": "Переключиться на разреженные матрицы через scipy.sparse.csr_matrix для вычислений",
                  "var_3": "Использовать chunking с np.einsum или broadcasting блоками через np.add.outer",
                  "var_4": "Использовать np.float16 для массивов и scipy.spatial.distance.cdist с метрикой",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Построение и оценка моделей машинного обучения с scikit-learn: Pipeline, кросс-валидация, метрики качества",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой класс scikit-learn используется для объединения препроцессинга и модели в единую последовательность трансформаций?",
                  "var_1": "GridSearchCV",
                  "var_2": "FeatureUnion",
                  "var_3": "Pipeline",
                  "var_4": "Transformer",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "Какую стратегию кросс-валидации следует использовать для временных рядов транзакций клиентов банка, чтобы избежать утечки данных из будущего?",
                  "var_1": "RepeatedKFold с несколькими повторениями разбиения",
                  "var_2": "ShuffleSplit с перемешиванием для случайных выборок",
                  "var_3": "StratifiedKFold для балансировки классов транзакций",
                  "var_4": "TimeSeriesSplit, сохраняющий хронологический порядок данных",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему в Pipeline для модели скоринга клиентов телекома следует применять fit_transform на train и только transform на validation внутри кросс-валидации?",
                  "var_1": "Ускоряет обучение через переиспользование fitted трансформеров на валидации",
                  "var_2": "Обеспечивает консистентность гиперпараметров скейлеров между фолдами кросс-валидации",
                  "var_3": "Сохраняет память через единственное обучение энкодеров на train",
                  "var_4": "Предотвращает data leakage через статистики валидационного сета в обучающий",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Предобработка данных и feature engineering: обработка пропусков, кодирование категориальных признаков, масштабирование",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод pandas используется для заполнения пропущенных значений в DataFrame константой?",
                  "var_1": "dropna() с параметром fill_value вместо удаления",
                  "var_2": "fillna() с указанием значения для заполнения",
                  "var_3": "replace() с параметром missing_values для замены",
                  "var_4": "interpolate() с методом constant для заполнения",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В датасете банка есть категориальный признак 'регион' с 50 уникальными значениями и высокой кардинальностью. Какой метод кодирования предпочтительнее: OneHotEncoder или TargetEncoder, и почему?",
                  "var_1": "OrdinalEncoder, так как минимизирует размерность и совместим со всеми алгоритмами scikit-learn",
                  "var_2": "LabelEncoder, так как сохраняет компактность данных и ускоряет обучение градиентного бустинга",
                  "var_3": "OneHotEncoder, так как обеспечивает лучшую интерпретируемость модели для бизнес-аналитиков",
                  "var_4": "TargetEncoder, так как избегает создания 50 признаков и curse of dimensionality",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "При построении пайплайна предобработки для скоринговой модели банка вы применяете SimpleImputer и StandardScaler. Почему критически важно fit этих трансформеров только на train выборке, а не на всем датасете?",
                  "var_1": "Предотвращает data leakage - информация из test попадет в параметры трансформеров",
                  "var_2": "Гарантирует идентичное распределение признаков между train и test выборками после масштабирования",
                  "var_3": "Снижает вычислительную нагрузку при повторном применении трансформеров на новых данных",
                  "var_4": "Обеспечивает корректную работу cross-validation при подборе гиперпараметров на train данных",
                  "correct_answer": 1
                }
              ]
            }
          ]
        },
        {
          "competency_name": "SQL и работа с базами данных [CORE 85%]",
          "topics": [
            {
              "topic_name": "Основы SQL: SELECT-запросы, фильтрация, сортировка и агрегатные функции",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой оператор SQL используется для фильтрации строк по условию в запросе SELECT?",
                  "var_1": "HAVING",
                  "var_2": "SELECT",
                  "var_3": "WHERE",
                  "var_4": "FILTER",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между WHERE и HAVING при работе с агрегатными функциями в запросах к таблице транзакций банка?",
                  "var_1": "WHERE фильтрует строки до агрегации, HAVING фильтрует результаты после агрегации",
                  "var_2": "WHERE используется для индексированных полей, HAVING для вычисляемых столбцов таблицы",
                  "var_3": "HAVING фильтрует строки перед группировкой, WHERE после выполнения агрегатных функций",
                  "var_4": "WHERE применяется к GROUP BY, HAVING работает с JOIN и подзапросами",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему запрос с COUNT(DISTINCT client_id) и GROUP BY на таблице с 500 млн транзакций телеком-оператора выполняется медленно, и как оптимизировать без изменения логики?",
                  "var_1": "Агрегатные функции с DISTINCT используют последовательное сканирование; решение через денормализацию таблицы и предрасчёт уникальных значений триггерами",
                  "var_2": "GROUP BY создаёт временные таблицы на диске; решение через замену на оконные функции ROW_NUMBER с ORDER BY",
                  "var_3": "COUNT(DISTINCT) блокирует параллельные запросы; решение через NOLOCK hints, увеличение памяти сервера и кэширование результатов",
                  "var_4": "DISTINCT требует сортировки и дедупликации в памяти; решение через индексы, партиционирование или материализованные представления",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "JOIN-операции и подзапросы для объединения данных из множества таблиц",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип JOIN вернет все записи из левой таблицы клиентов банка и совпадающие записи из таблицы транзакций?",
                  "var_1": "INNER JOIN для всех клиентов с транзакциями",
                  "var_2": "LEFT JOIN или LEFT OUTER JOIN",
                  "var_3": "RIGHT JOIN или RIGHT OUTER JOIN",
                  "var_4": "FULL OUTER JOIN для объединения обеих таблиц",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между использованием подзапроса в WHERE и JOIN при объединении таблиц абонентов и их платежей в телеком-системе?",
                  "var_1": "JOIN возвращает колонки обеих таблиц, подзапрос в WHERE только фильтрует строки основной таблицы",
                  "var_2": "JOIN создает декартово произведение строк, подзапрос возвращает агрегированный результат для каждой строки",
                  "var_3": "Подзапрос в WHERE поддерживает транзакции ACID, JOIN работает только в режиме READ UNCOMMITTED",
                  "var_4": "Подзапрос в WHERE выполняется быстрее благодаря индексам, JOIN требует полное сканирование таблиц",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему коррелированный подзапрос для расчета остатков по счетам клиентов может вызвать проблемы производительности и какую архитектуру выбрать вместо него?",
                  "var_1": "Создает временные таблицы в памяти. Использовать LEFT JOIN с GROUP BY и партицированием по дате транзакции",
                  "var_2": "Нагружает кэш буферного пула. Денормализовать схему с триггерами для синхронизации остатков в отдельной таблице",
                  "var_3": "Выполняется для каждой строки основного запроса. Использовать оконные функции или материализованные представления с инкрементальным обновлением",
                  "var_4": "Блокирует таблицу на чтение. Применить INNER JOIN с агрегатными функциями и индексами на внешних ключах",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Оконные функции (Window Functions) для аналитических вычислений",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис используется для создания оконной функции ROW_NUMBER() для нумерации транзакций клиентов банка по дате?",
                  "var_1": "ROW_NUMBER() OVER (PARTITION BY client_id ORDER BY transaction_date)",
                  "var_2": "ROW_NUMBER() OVER (ORDER BY transaction_date PARTITION BY client_id)",
                  "var_3": "ROW_NUMBER(client_id, transaction_date) OVER (ORDER BY transaction_date)",
                  "var_4": "ROW_NUMBER() GROUP BY client_id ORDER BY transaction_date WINDOW",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между ROWS BETWEEN и RANGE BETWEEN при вычислении скользящего среднего баланса абонентов телеком-оператора за последние 3 месяца?",
                  "var_1": "ROWS применяет оконную функцию последовательно, RANGE использует параллельные вычисления для партиций",
                  "var_2": "ROWS обрабатывает данные построчно, RANGE выполняет агрегацию всей партиции целиком",
                  "var_3": "ROWS учитывает физические строки, RANGE группирует одинаковые значения ORDER BY",
                  "var_4": "ROWS учитывает NULL значения в окне, RANGE исключает строки с пропусками",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при расчете процентилей доходов клиентов на миллионах записей следует использовать NTILE вместо комбинации ROW_NUMBER и подзапросов?",
                  "var_1": "NTILE использует распределенные вычисления и параллельную обработку секций данных",
                  "var_2": "NTILE кэширует промежуточные результаты сортировки для повторного использования в запросах",
                  "var_3": "NTILE выполняется за один проход, не требует самосоединения и минимизирует сортировку",
                  "var_4": "NTILE применяет оптимизацию индексов и автоматически создает материализованные представления",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Оптимизация запросов, индексы и работа с планами выполнения",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой оператор SQL используется для просмотра плана выполнения запроса перед его фактическим исполнением?",
                  "var_1": "DESCRIBE QUERY или QUERY PLAN в большинстве СУБД",
                  "var_2": "SHOW PROFILE или SET STATISTICS для анализа производительности",
                  "var_3": "EXPLAIN или EXPLAIN PLAN в зависимости от СУБД",
                  "var_4": "ANALYZE или SHOW EXECUTION для просмотра статистики запроса",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В таблице транзакций банка (50 млн записей) часто выполняется запрос по номеру карты и дате. Какой тип индекса оптимален и почему?",
                  "var_1": "Bitmap-индекс на card_number для компактного хранения и быстрого поиска",
                  "var_2": "Кластерный индекс по дате для ускорения временных диапазонов",
                  "var_3": "Составной индекс (card_number, date) для покрытия обоих условий фильтрации",
                  "var_4": "Отдельные индексы на card_number и date для параллельной фильтрации",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В DWH телеком-оператора запрос с JOIN трех больших таблиц (абоненты, тарифы, транзакции) выполняется 40 минут. План показывает Nested Loop. Как оптимизировать архитектурно и на уровне запроса?",
                  "var_1": "Увеличить memory_limit и work_mem, добавить LIMIT в подзапросы, использовать Merge Join, денормализовать таблицы через дублирование данных в одну широкую таблицу",
                  "var_2": "Обновить статистику, добавить индексы на join-ключи, использовать Hash Join через hints, рассмотреть партиционирование и материализованные представления для агрегатов",
                  "var_3": "Добавить DISTINCT и ORDER BY в начало запроса, использовать временные таблицы для каждого JOIN, применить FORCE INDEX для всех таблиц",
                  "var_4": "Перенести данные в NoSQL (MongoDB), использовать MapReduce для JOIN операций, создать копии таблиц с денормализацией для каждого типа запросов",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Построение классических моделей ML [CORE 90%]",
          "topics": [
            {
              "topic_name": "Линейные модели и регуляризация (Linear Regression, Ridge, Lasso, ElasticNet)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод sklearn используется для обучения линейной регрессии с L2-регуляризацией?",
                  "var_1": "Lasso из sklearn.linear_model",
                  "var_2": "Ridge из sklearn.linear_model",
                  "var_3": "SGDRegressor с alpha по умолчанию",
                  "var_4": "LinearRegression с параметром penalty='l2'",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В модели скоринга клиентов банка получили мультиколлинеарность между доходом и суммой депозита. Какую регуляризацию применить и почему?",
                  "var_1": "Ridge, так как сохраняет все признаки, уменьшая их веса при мультиколлинеарности",
                  "var_2": "Lasso, так как автоматически исключает коррелирующие признаки из модели",
                  "var_3": "ElasticNet с альфа=1, чтобы полностью убрать один из коррелирующих признаков",
                  "var_4": "PCA перед регрессией, чтобы преобразовать коррелирующие признаки в ортогональные компоненты",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "При построении модели прогноза оттока абонентов телеком-оператора с 500 признаками Lasso обнуляет 90% весов. Как оптимизировать pipeline для продакшена?",
                  "var_1": "Использовать SelectFromModel для удаления нулевых признаков, затем переобучить Ridge на оставшихся",
                  "var_2": "Увеличить альфа-параметр Lasso для получения более разреженной модели и ускорения инференса",
                  "var_3": "Применить PCA для снижения размерности, затем использовать Lasso с теми же гиперпараметрами",
                  "var_4": "Заменить Lasso на ElasticNet с l1_ratio=0.5 для баланса между разреженностью и производительностью",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Ансамблевые методы и деревья решений (Random Forest, Gradient Boosting, XGBoost, LightGBM)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой гиперпараметр в Random Forest контролирует количество деревьев в ансамбле?",
                  "var_1": "max_features",
                  "var_2": "max_depth",
                  "var_3": "min_samples_split",
                  "var_4": "n_estimators",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "Почему LightGBM быстрее XGBoost при обучении на датасете из 5 млн транзакций банка с 200 признаками?",
                  "var_1": "Реализует распределённое обучение через Apache Spark для обработки транзакций",
                  "var_2": "Применяет GPU-ускорение для параллельного вычисления градиентов на больших данных",
                  "var_3": "Использует level-wise рост деревьев с оптимизированной работой в памяти",
                  "var_4": "Использует leaf-wise рост деревьев и histogram-based splitting для разбиения",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как оптимизировать Gradient Boosting для скоринговой модели с несбалансированными классами (1:50) при строгом требовании latency inference < 100ms?",
                  "var_1": "Увеличить n_estimators до 1000, применить GridSearchCV с cross-validation и настроить learning_rate",
                  "var_2": "Использовать scale_pos_weight, уменьшить max_depth до 3-4, применить early stopping и DART dropout",
                  "var_3": "Использовать class_weight='balanced', увеличить subsample до 1.0 и применить стекинг нескольких моделей",
                  "var_4": "Применить SMOTE для балансировки, использовать deep trees с max_depth=10 и feature engineering",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Метрики качества и валидация моделей (Cross-validation, ROC-AUC, Precision-Recall, RMSE)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая метрика показывает долю правильно предсказанных положительных классов среди всех предсказанных как положительные?",
                  "var_1": "Recall (полнота)",
                  "var_2": "Precision (точность)",
                  "var_3": "Accuracy (правильность)",
                  "var_4": "F1-score (гармоническое среднее)",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "Банк строит модель скоринга с сильным дисбалансом классов (дефолтов 2%). Какую метрику лучше использовать вместо accuracy и почему?",
                  "var_1": "RMSE после применения SMOTE для балансировки классов перед обучением модели",
                  "var_2": "ROC-AUC или PR-AUC, так как accuracy будет завышена из-за дисбаланса классов",
                  "var_3": "Взвешенная accuracy с повышенным штрафом за ошибки на минорном классе дефолтов",
                  "var_4": "F1-score с весами классов, так как она учитывает баланс между precision и recall",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "При валидации антифрод-модели телеком-оператора на временных данных обнаружили, что ROC-AUC на обучении 0.92, на валидации 0.88, но precision@top-5% упал с 0.75 до 0.45. Какие архитектурные проблемы это выявляет?",
                  "var_1": "Несбалансированность классов требует применения SMOTE или корректировки весов в функции потерь",
                  "var_2": "Переобучение на паттернах мошенничества, temporal data drift, или неадекватная калибровка вероятностей модели",
                  "var_3": "Высокая корреляция признаков и мультиколлинеарность снижают стабильность предсказаний на новых данных",
                  "var_4": "Недостаточная глубина дерева решений и малое количество эстиматров в ансамбле моделей",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Feature Engineering и предобработка данных (масштабирование, кодирование категорий, работа с пропусками)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод sklearn используется для заполнения пропущенных значений средним или медианой в датасете клиентов банка?",
                  "var_1": "KNNImputer с параметром n_neighbors для интерполяции",
                  "var_2": "fillna() метод pandas с параметром method='ffill'",
                  "var_3": "SimpleImputer с параметрами strategy='mean' или strategy='median'",
                  "var_4": "StandardScaler с параметром with_mean=True для заполнения",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "Вы строите модель скоринга для банка. Какой метод кодирования категорий выбрать для признака 'регион' с 17 областями Казахстана при высоком кардинале и риске переобучения?",
                  "var_1": "Binary Encoding для компактного представления 17 категорий",
                  "var_2": "Target Encoding или Frequency Encoding для снижения размерности",
                  "var_3": "Label Encoding с порядковым присвоением номеров областям",
                  "var_4": "One-Hot Encoding с последующим PCA для уменьшения размерности",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком-компании признаки имеют разные распределения: трафик данных (степенное), длительность звонков (нормальное), баланс (с выбросами). Как спроектировать pipeline масштабирования для gradient boosting модели чтобы избежать data leakage?",
                  "var_1": "MinMaxScaler для каждого признака отдельно, fit на полных данных",
                  "var_2": "StandardScaler на всём датасете перед split, затем обучение модели",
                  "var_3": "RobustScaler внутри Pipeline с cross-validation, fit только на train fold",
                  "var_4": "Gradient boosting не требует масштабирования, использовать сырые признаки",
                  "correct_answer": 3
                }
              ]
            }
          ]
        },
        {
          "competency_name": "MLOps инструменты (Airflow, MLflow) [DAILY 70%]",
          "topics": [
            {
              "topic_name": "Организация и оркестрация ML-пайплайнов в Apache Airflow",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой оператор Airflow используется для запуска Python-функции в задаче ML-пайплайна?",
                  "var_1": "TaskFlowOperator",
                  "var_2": "KubernetesPodOperator",
                  "var_3": "PythonOperator",
                  "var_4": "BashOperator",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между использования SubDagOperator и TaskGroup при организации сложного ML-пайплайна обработки транзакций?",
                  "var_1": "TaskGroup создаёт отдельный scheduler процесс, SubDagOperator использует общий executor",
                  "var_2": "SubDagOperator обеспечивает параллельное выполнение задач, TaskGroup запускает последовательно",
                  "var_3": "SubDagOperator группирует задачи логически, TaskGroup изолирует метаданные в отдельной базе",
                  "var_4": "TaskGroup группирует задачи визуально без создания отдельного DAG, SubDagOperator создаёт изолированный DAG",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему динамическое создание задач через Dynamic Task Mapping предпочтительнее цикла при параллельном обучении моделей скоринга для разных регионов?",
                  "var_1": "DAG с циклом требует ручной настройки pool slots для каждого региона перед запуском",
                  "var_2": "Цикл блокирует executor threads, а Dynamic Mapping распределяет задачи через Celery workers автоматически",
                  "var_3": "Задачи создаются в runtime, экономя память scheduler и позволяя масштабировать без перезапуска DAG",
                  "var_4": "Dynamic Mapping использует XCom для передачи параметров моделей между задачами эффективнее циклов",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Управление экспериментами и версионирование моделей в MLflow",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какая команда MLflow используется для логирования обученной модели машинного обучения в эксперимент?",
                  "var_1": "mlflow.save_model() или mlflow.export_model()",
                  "var_2": "mlflow.register_model() с указанием пути",
                  "var_3": "mlflow.track_model() или mlflow.log_artifact()",
                  "var_4": "mlflow.log_model() или mlflow.<framework>.log_model()",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между версионированием моделей через MLflow Model Registry stages (Staging/Production) и версионированием через tags? Когда использовать каждый подход?",
                  "var_1": "Stages для разграничения доступа команд, tags для управления версиями и роллбэков моделей",
                  "var_2": "Stages обеспечивают Git-подобное ветвление моделей, tags фиксируют снимки для автоматических деплойментов",
                  "var_3": "Stages управляют жизненным циклом и продвижением моделей, tags для метаданных и фильтрации",
                  "var_4": "Tags определяют окружение развертывания, stages хранят метрики и параметры для сравнения экспериментов",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "При миграции скоринговой модели из MLflow в production у вас возникла проблема: модель в Registry показывает разные результаты при inference через mlflow.pyfunc.load_model() и через REST API. Какие три наиболее вероятные причины?",
                  "var_1": "Различия в preprocessing pipeline, несовпадение версий зависимостей, разная сериализация входных данных",
                  "var_2": "Разные эндпоинты для staging и production, отсутствие warm-up запросов, таймауты REST API",
                  "var_3": "Различия в конфигурации MLflow Tracking Server, асинхронная загрузка модели, разные backend stores",
                  "var_4": "Несоответствие flavors модели, кэширование артефактов на сервере, отличия в логировании метрик",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Мониторинг и логирование ML-моделей в production",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой компонент MLflow используется для логирования метрик модели во время inference в production?",
                  "var_1": "MLflow Projects с функцией monitor_model",
                  "var_2": "MLflow Tracking с методом log_metric",
                  "var_3": "MLflow Registry для tracking метрик",
                  "var_4": "MLflow Models с методом log_inference",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между мониторингом data drift и concept drift при работе скоринговой модели в банке?",
                  "var_1": "Data drift — изменение распределения входных данных, concept drift — изменение зависимости между признаками и целевой переменной",
                  "var_2": "Data drift — расхождение между train и test выборками, concept drift — изменение распределения целевой переменной в продакшене",
                  "var_3": "Data drift — отклонение предсказаний от исторических значений, concept drift — изменение структуры признаков в производственной базе",
                  "var_4": "Data drift — изменение метрик качества модели, concept drift — изменение бизнес-требований к пороговым значениям скоринга",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Модель оттока абонентов в телекоме показывает стабильные метрики качества, но бизнес-метрики упали. Какие проблемы мониторинга могли это пропустить?",
                  "var_1": "Неправильная настройка алертов в Grafana, отсутствие дашборда с confusion matrix и ROC-AUC",
                  "var_2": "Отсутствие мониторинга feature drift, задержек предсказаний, coverage модели и корреляции с бизнес-действиями",
                  "var_3": "Недостаточный мониторинг accuracy, precision, recall и F1-score на валидационной выборке",
                  "var_4": "Отсутствие A/B тестирования, сравнения с baseline и регулярной переобучения модели на свежих данных",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "CI/CD для машинного обучения и автоматизация деплоя моделей",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой компонент MLflow используется для сохранения и версионирования обученных моделей машинного обучения?",
                  "var_1": "MLflow Tracking Server",
                  "var_2": "MLflow Artifact Store",
                  "var_3": "MLflow Model Registry",
                  "var_4": "MLflow Model Serializer",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "Как в Airflow настроить автоматический ретрейн модели скоринга при деградации метрик на 5% от baseline?",
                  "var_1": "Использовать ExternalTaskSensor для мониторинга метрик и триггера отдельного pipeline",
                  "var_2": "Создать Custom Operator с встроенной логикой сравнения и автоматическим schedule_interval",
                  "var_3": "Использовать BranchPythonOperator с проверкой метрик и условным запуском DAG ретрейна",
                  "var_4": "Настроить SLA в Airflow с email-алертами и ручным перезапуском DAG",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Модель антифрода в production показывает latency 800ms вместо 200ms при A/B тесте. Какие узкие места проверить в пайплайне деплоя?",
                  "var_1": "Размер Docker image, compression алгоритмы для артефактов, logging verbosity level, monitoring overhead от Prometheus",
                  "var_2": "Версию Python runtime, outdated TensorFlow dependencies, memory leaks в контейнере, CPU throttling limits",
                  "var_3": "Сериализацию модели, отсутствие batch inference, избыточные feature transformations, network latency к feature store",
                  "var_4": "Kubernetes pod autoscaling конфигурацию, replicas count, health check intervals, service mesh overhead в Istio",
                  "correct_answer": 3
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Big Data (Hadoop/Spark) [DAILY 65%]",
          "topics": [
            {
              "topic_name": "Архитектура Hadoop: HDFS, MapReduce и YARN",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой фактор репликации по умолчанию использует HDFS для хранения блоков данных?",
                  "var_1": "Пять реплик для критичных данных",
                  "var_2": "Одна реплика с возможностью масштабирования",
                  "var_3": "Три реплики для каждого блока данных",
                  "var_4": "Две реплики для обеспечения отказоустойчивости",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В каких случаях следует использовать YARN вместо MapReduce для обработки телеметрии абонентов телеком-оператора?",
                  "var_1": "Когда MapReduce достигает лимита одновременных задач в очереди",
                  "var_2": "Когда объем данных телеметрии превышает терабайт в сутки",
                  "var_3": "Когда требуется реплицация данных между несколькими HDFS кластерами",
                  "var_4": "Когда нужна интеграция Spark, Flink или других движков обработки",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как диагностировать проблему медленного чтения транзакций клиентов банка из HDFS, если утилизация CPU и сети в норме?",
                  "var_1": "Настроить репликацию блоков на уровне rack awareness и compression codec",
                  "var_2": "Проверить размер блоков HDFS и увеличить параллелизм MapReduce задач",
                  "var_3": "Увеличить heap memory для NameNode и проверить GC паузы JVM",
                  "var_4": "Проверить IOPS дисков DataNode, балансировку блоков и долю локальных чтений",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Apache Spark: RDD, DataFrame и оптимизация производительности",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод используется для создания RDD из текстового файла в Spark?",
                  "var_1": "rdd.fromTextFile()",
                  "var_2": "spark.read.text()",
                  "var_3": "sparkContext.textFile() или sc.textFile()",
                  "var_4": "sparkContext.readFile()",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В каком случае следует использовать DataFrame вместо RDD при обработке транзакций банковских клиентов?",
                  "var_1": "Когда требуется низкоуровневый контроль над распределением данных по партициям",
                  "var_2": "Когда нужна ленивая оценка выражений и трансформаций данных",
                  "var_3": "Когда операции требуют сериализации через Java Serialization для производительности",
                  "var_4": "Когда данные структурированы и нужна оптимизация через Catalyst optimizer",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при обработке CDR-записей абонентов возникает skew на этапе join по customer_id и как это исправить?",
                  "var_1": "Неравномерное распределение ключей. Использовать salting или broadcast join для малых таблиц",
                  "var_2": "Блокировка shuffle операций. Настроить spark.sql.shuffle.partitions и увеличить параллелизм executor'ов",
                  "var_3": "Недостаточная память executor'ов. Увеличить spark.executor.memory и количество партиций",
                  "var_4": "Проблема сериализации данных. Применить Kryo сериализацию и кеширование промежуточных результатов",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Обработка потоковых данных с использованием Spark Streaming",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод используется для создания DStream из Kafka в Spark Streaming?",
                  "var_1": "fileStream с мониторингом директории Kafka логов",
                  "var_2": "KafkaUtils.createRDD для пакетной обработки сообщений Kafka",
                  "var_3": "socketTextStream с указанием Kafka брокера и топика",
                  "var_4": "createDirectStream или createStream для интеграции с Kafka",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между window() и reduceByWindow() операциями при обработке транзакций банка в реальном времени?",
                  "var_1": "window() группирует по ключам внутри окна, reduceByWindow() объединяет окна между партициями",
                  "var_2": "window() создает временные срезы, reduceByWindow() выполняет инкрементальные вычисления с состоянием",
                  "var_3": "window() агрегирует данные партициями, reduceByWindow() применяет функцию к микробатчам",
                  "var_4": "window() возвращает все данные окна, reduceByWindow() агрегирует их функцией",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как решить проблему задержки обработки (processing delay > batch interval) при анализе CDR-записей телеком-оператора объемом 50K событий/сек?",
                  "var_1": "Мигрировать на Flink с event-time processing, включить checkpointing каждые 5 секунд для устойчивости",
                  "var_2": "Увеличить batch interval до 30 секунд, добавить backpressure механизм, кэшировать справочники в памяти",
                  "var_3": "Перейти на micro-batch архитектуру Storm с топологией подсчета метрик через Trident API",
                  "var_4": "Увеличить число партиций Kafka, параллелизм executors, уменьшить batch interval, оптимизировать shuffle",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Интеграция Big Data инструментов: Hive, HBase и экосистема Hadoop",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой компонент Hadoop экосистемы позволяет выполнять SQL-подобные запросы к данным в HDFS?",
                  "var_1": "Apache Hive",
                  "var_2": "HDFS Query Layer",
                  "var_3": "Apache HBase",
                  "var_4": "Apache Pig",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "Когда стоит использовать HBase вместо Hive для хранения транзакционных данных клиентов банка?",
                  "var_1": "Когда требуется быстрый доступ по ключу и обновления в реальном времени",
                  "var_2": "Когда необходимо хранить данные в колоночном формате для аналитики",
                  "var_3": "Когда требуется пакетная обработка данных с использованием MapReduce заданий",
                  "var_4": "Когда нужно выполнять SQL-запросы с агрегацией по историческим данным",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Как решить проблему медленного выполнения JOIN между большой таблицей Hive с CDR данными и маленькой справочной таблицей HBase?",
                  "var_1": "Использовать Map Join с кешированием справочника или Bulkload в Hive таблицу",
                  "var_2": "Использовать Secondary Index в HBase и распределенный JOIN через Reduce Side Join",
                  "var_3": "Настроить репликацию HBase таблицы в HDFS и выполнить Shuffle Hash Join",
                  "var_4": "Применить Bucket Map Join с партиционированием CDR таблицы по ключам HBase",
                  "correct_answer": 1
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "profile": "Frontend разработчик",
      "specialization": "Angular",
      "competencies": [
        {
          "competency_name": "Знание языка программирования JavaScript [CORE 85%]",
          "topics": [
            {
              "topic_name": "Типы данных, операторы и области видимости переменных (var, let, const)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой оператор объявления переменной создает константу, значение которой нельзя переприсвоить после инициализации?",
                  "var_1": "var",
                  "var_2": "final",
                  "var_3": "let",
                  "var_4": "const",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В Angular-компоненте обработчика клика на кнопку перевода средств используется var i в цикле. Почему при быстрых кликах может возникнуть race condition, и какой оператор решит проблему?",
                  "var_1": "цикл выполняется асинхронно, применить async/await с var",
                  "var_2": "var не имеет блочной области видимости, использовать let",
                  "var_3": "var кэширует значения между вызовами, использовать Object.freeze()",
                  "var_4": "var создает глобальные переменные, использовать const для локализации",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В SPA банковского приложения модуль авторизации экспортирует объект config через const. Почему мутация его свойств из другого модуля создает уязвимость, и как архитектурно предотвратить это без Object.freeze?",
                  "var_1": "const обеспечивает deep immutability, использовать приватные поля класса",
                  "var_2": "экспортировать через Object.seal и валидировать мутации прокси",
                  "var_3": "использовать WeakMap для инкапсуляции и Symbol ключи",
                  "var_4": "const защищает только ссылку, использовать геттеры или immutable паттерны",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Асинхронное программирование: Promises, async/await и Event Loop",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод Promise используется для обработки ошибок при загрузке данных клиентов из API банка?",
                  "var_1": "Метод .catch() для перехвата отклоненных промисов",
                  "var_2": "Метод .finally() для обработки всех завершенных промисов",
                  "var_3": "Конструктор Promise с reject() в блоке try-catch",
                  "var_4": "Метод .then() со вторым колбэк-параметром для ошибок",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В Angular-приложении банка нужно последовательно загрузить профиль клиента, затем его счета, затем транзакции. Что эффективнее: цепочка .then() или async/await?",
                  "var_1": "async/await для читаемости и упрощения обработки ошибок",
                  "var_2": "цепочка .then() для лучшей производительности выполнения",
                  "var_3": "RxJS switchMap для последовательных HTTP-запросов",
                  "var_4": "Promise.all() для параллельной загрузки всех данных",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "В Angular-приложении телеком-оператора при обработке 10000 SMS-уведомлений через Promise.all() один запрос падает и блокирует всю операцию. Как архитектурно решить проблему для продолжения обработки остальных?",
                  "var_1": "Обернуть каждый Promise в try-catch и использовать Promise.all()",
                  "var_2": "Использовать Promise.allSettled() для обработки всех результатов независимо от статуса",
                  "var_3": "Разбить массив на чанки и последовательно обрабатывать через await",
                  "var_4": "Применить Promise.race() для получения первого успешного результата запроса",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Прототипное наследование, классы ES6+ и контекст выполнения (this)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что произойдет с контекстом this внутри стрелочной функции в Angular компоненте?",
                  "var_1": "Стрелочная функция создает собственный контекст this динамически.",
                  "var_2": "Стрелочная функция привязывает this к экземпляру компонента.",
                  "var_3": "Стрелочная функция наследует this из лексического окружения.",
                  "var_4": "Стрелочная функция получает this от вызывающего объекта.",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между использованием class и constructor function для создания сервиса обработки транзакций в банковском приложении?",
                  "var_1": "Class создает приватные поля по умолчанию, constructor function требует замыкания.",
                  "var_2": "Class имеет более читаемый синтаксис, но оба создают прототипное наследование.",
                  "var_3": "Class создает копирование свойств, constructor function использует прототипную цепочку.",
                  "var_4": "Constructor function быстрее выполняется, class добавляет overhead при компиляции.",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему при реализации кастомного декоратора для логирования банковских операций важно сохранять оригинальный контекст this методов класса?",
                  "var_1": "Angular DI контейнер автоматически инжектирует корректный контекст выполнения.",
                  "var_2": "TypeScript требует строгую типизацию контекста в декораторах метадата.",
                  "var_3": "Декоратор должен возвращать новый экземпляр класса для изоляции.",
                  "var_4": "Потеря контекста приведет к ошибкам доступа к свойствам экземпляра.",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Функции высшего порядка, замыкания и методы массивов (map, filter, reduce)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что возвращает метод map() при применении к массиву транзакций клиентов банка?",
                  "var_1": "Модифицированный исходный массив с обновленными значениями элементов",
                  "var_2": "Новый массив с результатами применения функции к каждому элементу",
                  "var_3": "Отфильтрованный массив транзакций, соответствующих условию в функции",
                  "var_4": "Одно агрегированное значение, полученное путем обработки всех элементов",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В Angular-приложении банка нужно отфильтровать активные счета клиента и посчитать общую сумму. Какую комбинацию методов массива следует использовать?",
                  "var_1": "filter() для активных счетов, затем map() с последующим sum()",
                  "var_2": "reduce() для фильтрации и суммирования в одном проходе массива",
                  "var_3": "filter() для отбора активных счетов, затем reduce() для суммирования",
                  "var_4": "map() для преобразования счетов, затем forEach() для накопления суммы",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "При обработке 50000+ транзакций в реальном времени с использованием map/filter/reduce возникают проблемы с производительностью. Какие оптимизации архитектуры предложите для Angular-приложения телеком-оператора?",
                  "var_1": "Переход на синхронные forEach циклы, debouncing событий, использование var для оптимизации памяти",
                  "var_2": "Виртуальный скроллинг, Web Workers для вычислений, memoization через замыкания, разбиение на chunks",
                  "var_3": "Применение множественных pipe операторов RxJS, aggressive change detection, inline функции в шаблонах",
                  "var_4": "Увеличение heap size Node.js, применение nested map/filter chains, eager loading всех модулей",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Знание языка программирования TypeScript [CORE 90%]",
          "topics": [
            {
              "topic_name": "Система типов TypeScript: примитивы, union, intersection, type guards и narrowing",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип TypeScript использовать для поля accountStatus, если оно может быть 'active', 'blocked' или 'pending'?",
                  "var_1": "Type alias с intersection: Active & Blocked & Pending",
                  "var_2": "Interface AccountStatus с полями active, blocked, pending",
                  "var_3": "Enum с значениями ACTIVE, BLOCKED, PENDING",
                  "var_4": "Union type: 'active' | 'blocked' | 'pending'",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В Angular-сервисе обработки платежей приходит объект unknown типа. Как безопасно проверить, что это объект с полями amount и currency перед использованием?",
                  "var_1": "Использовать instanceof для проверки структуры объекта перед доступом",
                  "var_2": "Применить as assertion с интерфейсом PaymentObject для типизации",
                  "var_3": "Использовать type guard с проверкой typeof и in operator",
                  "var_4": "Привести к any и проверить наличие свойств через optional chaining",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В системе интернет-банкинга нужен тип для транзакций разных категорий с общими полями (id, date) и уникальными (transfer имеет recipient, payment имеет provider). Как спроектировать типобезопасную архитектуру с автоматическим narrowing?",
                  "var_1": "Abstract class с protected полями и instanceof для определения типа",
                  "var_2": "Discriminated union с литеральным полем type и intersection базового типа",
                  "var_3": "Generic constraint с extends для базового интерфейса и перегрузка методов",
                  "var_4": "Conditional types с infer ключевым словом и mapped types для полей",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Generics и продвинутые типы: utility types, mapped types, conditional types",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой utility type TypeScript используется для создания типа со всеми опциональными свойствами из существующего типа BankAccount?",
                  "var_1": "Optional<BankAccount>",
                  "var_2": "Partial<BankAccount>",
                  "var_3": "Nullable<BankAccount>",
                  "var_4": "Required<BankAccount>",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между использованием Pick<User, 'iin' | 'phone'> и Omit<User, 'password'> при создании типа для API ответа с данными клиента банка?",
                  "var_1": "Pick явно выбирает нужные поля, Omit исключает ненужные из всех.",
                  "var_2": "Omit работает быстрее при компиляции для больших типов.",
                  "var_3": "Pick использует intersection types, Omit применяет union types внутри.",
                  "var_4": "Pick создает новый тип, Omit модифицирует существующий интерфейс.",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать conditional type для автоматического извлечения типа ответа API в зависимости от кода операции ('payment' | 'transfer' | 'deposit'), чтобы избежать дублирования типов при масштабировании?",
                  "var_1": "type ApiResponse = Record<'payment' | 'transfer' | 'deposit', PaymentData | TransferData | DepositData> для union типов",
                  "var_2": "interface ApiResponse extends Pick<T, 'payment' | 'transfer' | 'deposit'> { data: PaymentData | TransferData | DepositData }",
                  "var_3": "type ApiResponse<T> = Omit<T, keyof T> & { [K in 'payment' | 'transfer' | 'deposit']: any }",
                  "var_4": "type ApiResponse<T> = T extends 'payment' ? PaymentData : T extends 'transfer' ? TransferData : DepositData",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Декораторы, метаданные и их применение в Angular",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой декоратор используется для создания Angular компонента и какие обязательные метаданные он принимает?",
                  "var_1": "@Component с обязательным свойством selector и template или templateUrl",
                  "var_2": "@Directive с обязательными свойствами selector и providers",
                  "var_3": "@Component с обязательным свойством selector и styleUrls",
                  "var_4": "@NgModule с обязательным свойством declarations и template",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между декораторами @Input() и @Output() в компоненте формы банковского перевода, и когда использовать каждый из них?",
                  "var_1": "@Input для синхронной передачи данных, @Output для асинхронной обработки через Observable",
                  "var_2": "@Input для передачи данных в компонент, @Output с EventEmitter для отправки событий наружу",
                  "var_3": "@Output для получения данных от родителя, @Input с EventEmitter для отправки событий",
                  "var_4": "@Input для двустороннего биндинга данных, @Output для одностороннего связывания с родителем",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование декоратора @HostListener вместо обработчиков событий в template может вызвать проблемы производительности в большом Angular приложении банка с множеством компонентов?",
                  "var_1": "@HostListener создает дополнительные HTTP-запросы при каждом событии, увеличивая нагрузку на серверы банковского приложения",
                  "var_2": "@HostListener добавляет глобальные слушатели без автоматической отписки, создавая memory leaks и лишние проверки change detection",
                  "var_3": "@HostListener блокирует основной поток при обработке событий, замедляя рендеринг компонентов и взаимодействие с DOM",
                  "var_4": "@HostListener компилируется в менее оптимизированный JavaScript код по сравнению с template-биндингами, увеличивая размер bundle",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Асинхронное программирование: Promise, async/await, Observable и типизация RxJS",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип возвращает async функция в TypeScript?",
                  "var_1": "Observable с типом возвращаемого значения",
                  "var_2": "AsyncFunction с generic параметром типа",
                  "var_3": "Promise с типом возвращаемого значения",
                  "var_4": "Future с указанным типом результата",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В Angular-сервисе банка нужно загрузить данные клиента и его счета параллельно. Какой RxJS оператор использовать для комбинирования двух Observable?",
                  "var_1": "switchMap с вложенной подпиской на второй Observable",
                  "var_2": "forkJoin или combineLatest в зависимости от требований",
                  "var_3": "mergeMap для последовательной загрузки с объединением результатов",
                  "var_4": "concat для синхронизации запросов клиента и счетов",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В приложении телеком-оператора Observable стрим тарифов вызывает memory leak при переходе между роутами. Как правильно типизировать метод cleanup с учетом Subject и takeUntil паттерна?",
                  "var_1": "AsyncSubject<any> с takeWhile условием и destroy метод в компоненте",
                  "var_2": "Subject<void> с takeUntil в pipe и complete в ngOnDestroy",
                  "var_3": "BehaviorSubject<boolean> с unsubscribe в ngOnDestroy и null значением",
                  "var_4": "ReplaySubject<void> с first оператором и finalize в subscribe",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Знание Angular [CORE 90%]",
          "topics": [
            {
              "topic_name": "Компоненты и их жизненный цикл (lifecycle hooks, взаимодействие между компонентами, ViewChild, ContentChild)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой lifecycle hook в Angular вызывается один раз после инициализации всех input-свойств компонента?",
                  "var_1": "ngOnInit",
                  "var_2": "ngAfterViewInit",
                  "var_3": "ngOnChanges",
                  "var_4": "ngAfterContentInit",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между @ViewChild и @ContentChild при взаимодействии компонентов в форме загрузки документов клиента?",
                  "var_1": "ViewChild обращается к директивам компонента, ContentChild к его input-параметрам",
                  "var_2": "ViewChild находит элементы в шаблоне компонента, ContentChild в проецируемом контенте ng-content",
                  "var_3": "ViewChild работает с динамическими компонентами, ContentChild с статическими элементами шаблона",
                  "var_4": "ViewChild получает данные из родительского компонента, ContentChild из дочерних компонентов",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование ngAfterViewInit для доступа к @ViewChild элементу безопаснее, чем ngOnInit в компоненте списка транзакций с виртуальным скроллингом?",
                  "var_1": "ngOnInit выполняется до привязки данных, ngAfterViewInit обрабатывает изменения синхронно",
                  "var_2": "ViewChild гарантированно инициализирован только после рендеринга view, ngOnInit может вернуть undefined",
                  "var_3": "ngAfterViewInit предотвращает ExpressionChangedAfterItHasBeenCheckedError при обращении к ViewChild",
                  "var_4": "Виртуальный скроллинг требует завершения Change Detection перед доступом к элементам",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Реактивное программирование с RxJS (Observable, Subject, операторы, управление подписками, async pipe)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой оператор RxJS используется для отмены предыдущего HTTP-запроса при новом вводе в поисковую строку транзакций?",
                  "var_1": "concatMap",
                  "var_2": "flatMap",
                  "var_3": "mergeMap",
                  "var_4": "switchMap",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между Subject и BehaviorSubject при реализации сервиса уведомлений о статусе платежа в банковском приложении?",
                  "var_1": "Subject кэширует все значения для replay при переподключении",
                  "var_2": "BehaviorSubject поддерживает multicast для множественных подписчиков одновременно",
                  "var_3": "BehaviorSubject хранит и эмитит последнее значение новым подписчикам",
                  "var_4": "Subject автоматически завершает подписки при удалении компонента",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование async pipe предпочтительнее ручных подписок в компонентах списка клиентов с пагинацией и фильтрацией по 10000+ записей?",
                  "var_1": "Обеспечивает виртуальный скроллинг для оптимизации рендеринга больших списков",
                  "var_2": "Кэширует предыдущие результаты Observable для повторного использования данных",
                  "var_3": "Автоматически группирует множественные подписки в один batched запрос",
                  "var_4": "Автоматически отписывается при уничтожении компонента, предотвращая утечки памяти",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Dependency Injection и сервисы (провайдеры, иерархия инжекторов, singleton-сервисы, InjectionToken)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой декоратор используется для создания singleton-сервиса, доступного во всем приложении банка?",
                  "var_1": "@Component({ providers: [Service] })",
                  "var_2": "@Injectable({ providedIn: 'root' })",
                  "var_3": "@Service({ scope: 'global' })",
                  "var_4": "@Injectable({ providedIn: 'platform' })",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В приложении банка есть модули для клиентов и сотрудников. Где должен быть провайден сервис логирования, чтобы каждый модуль имел свой экземпляр?",
                  "var_1": "В массиве providers корневого AppModule",
                  "var_2": "В массиве providers каждого feature-модуля отдельно",
                  "var_3": "В конструкторе компонентов с useClass",
                  "var_4": "В декораторе @Injectable с providedIn root",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В микрофронтенд-архитектуре банковского портала несколько Angular-приложений используют общие сервисы. Как предотвратить создание множественных экземпляров singleton-сервиса при lazy-loading модулей?",
                  "var_1": "Использовать providedIn: 'root' или forRoot() паттерн для предоставления сервиса только в корневом инжекторе",
                  "var_2": "Использовать providedIn: 'any' для создания отдельного экземпляра сервиса в каждом lazy-loaded модуле",
                  "var_3": "Объявить сервис в providers массиве каждого feature-модуля с флагом useExisting: true",
                  "var_4": "Регистрировать сервис через providers в SharedModule и импортировать его в каждое приложение",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Модули и маршрутизация (NgModules, lazy loading, guards, resolvers, preloading strategies)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой декоратор используется для создания модуля маршрутизации в Angular приложении?",
                  "var_1": "@Component с декларацией RouterConfig и Routes",
                  "var_2": "@Directive с RouterOutlet и routerLink директивами",
                  "var_3": "@Injectable с provideRouter() в массиве providers",
                  "var_4": "@NgModule с импортом RouterModule.forRoot() или RouterModule.forChild()",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между CanActivate и CanLoad guards при защите lazy-loaded модуля с личным кабинетом клиента банка?",
                  "var_1": "CanActivate защищает дочерние роуты, CanLoad применяется к родительским модулям",
                  "var_2": "CanActivate блокирует загрузку бандла, CanLoad проверяет права доступа",
                  "var_3": "CanLoad работает синхронно, CanActivate возвращает Observable для асинхронной проверки",
                  "var_4": "CanLoad предотвращает загрузку модуля, CanActivate проверяет доступ после загрузки",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как оптимизировать загрузку модулей интернет-банкинга с 15+ lazy-loaded разделами, чтобы минимизировать время до интерактивности критичных операций?",
                  "var_1": "PreloadAllModules стратегия с enableTracing для мониторинга загрузки всех разделов одновременно",
                  "var_2": "PreloadingStrategy с приоритизацией критичных модулей и QuicklinkStrategy для предзагрузки по ховеру",
                  "var_3": "Разделение на microfrontends с Module Federation и отдельной сборкой каждого раздела",
                  "var_4": "Eager loading всех модулей в main bundle с tree-shaking для уменьшения HTTP-запросов",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Знание HTML5, CSS + Tailwind, умение верстки [CORE 80%]",
          "topics": [
            {
              "topic_name": "Семантическая разметка HTML5: использование структурных элементов, форм, атрибутов accessibility и валидация",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой HTML5 элемент используется для обозначения основного содержимого страницы интернет-банкинга, исключая шапку и футер?",
                  "var_1": "Элемент <section>, определяет основную область контента.",
                  "var_2": "Элемент <main>, содержит уникальный контент страницы.",
                  "var_3": "Элемент <article>, содержит независимый контент приложения.",
                  "var_4": "Элемент <div class='content'>, обозначает центральный блок.",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В форме онлайн-заявки на кредит нужно поле для ИИН. Какие атрибуты обеспечат правильную валидацию и accessibility для пользователей скринридеров?",
                  "var_1": "pattern для 12 цифр, required, aria-label, aria-describedby для ошибок, inputmode numeric.",
                  "var_2": "required, aria-required='true', autocomplete='cc-number', role='textbox', min и max атрибуты.",
                  "var_3": "type='number' для валидации, maxlength='12', placeholder с примером, title для подсказки.",
                  "var_4": "pattern для цифр, aria-invalid, autofocus, aria-autocomplete, type='tel' для мобильных.",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему для dashboard интернет-банка с виджетами балансов, транзакций и уведомлений лучше использовать <section> с aria-label вместо <article>?",
                  "var_1": "Section требует обязательный aria-label для скринридеров, article работает с заголовками самостоятельно.",
                  "var_2": "Section группирует связанный контент dashboard, article подразумевает независимый самодостаточный контент для синдикации.",
                  "var_3": "Article создает отдельные landmark-регионы для каждого виджета, улучшая навигацию assistive technologies.",
                  "var_4": "Article обеспечивает лучшую поддержку ARIA-атрибутов для динамических виджетов банковских данных.",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "CSS Layout и позиционирование: Flexbox, Grid, позиционирование элементов и создание адаптивных макетов",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какое свойство CSS Grid используется для определения количества и размера колонок в сетке?",
                  "var_1": "grid-auto-columns",
                  "var_2": "grid-column-count",
                  "var_3": "grid-template-columns",
                  "var_4": "grid-template-rows",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В мобильном приложении банка нужно разместить карточки услуг в ряд с автоматическим переносом. Что использовать: Flexbox с flex-wrap или CSS Grid с auto-fit?",
                  "var_1": "Flexbox с flex-wrap для динамического переноса контента",
                  "var_2": "CSS Grid с auto-fit для равномерного распределения",
                  "var_3": "CSS Grid с grid-template-columns: repeat(auto-fill, minmax())",
                  "var_4": "Flexbox с justify-content: space-between для выравнивания",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "При проектировании дашборда банковской системы с множеством виджетов разного размера, почему CSS Grid с named areas предпочтительнее Flexbox для основного layout?",
                  "var_1": "Flexbox ограничен фиксированными пропорциями, Grid позволяет использовать fr units для виджетов",
                  "var_2": "Grid named areas обеспечивают лучшую производительность рендеринга при большом количестве элементов",
                  "var_3": "Flexbox требует больше JavaScript для динамического изменения расположения виджетов в runtime",
                  "var_4": "Grid обеспечивает двумерное позиционирование, явный контроль областей и упрощает адаптивную реструктуризацию макета",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Tailwind CSS: утилитарные классы, кастомизация конфигурации, responsive design и оптимизация production build",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой утилитарный класс Tailwind CSS устанавливает flex-direction: column для мобильной версии формы регистрации клиента банка?",
                  "var_1": "direction-col",
                  "var_2": "flex-col",
                  "var_3": "flex-column",
                  "var_4": "flex-dir-column",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "Как в tailwind.config.js добавить корпоративный цвет банка #00A651 для использования в классах text и bg, сохранив стандартную палитру?",
                  "var_1": "Переопределить theme.colors с добавлением corporate",
                  "var_2": "Использовать plugins с addUtilities для corporate",
                  "var_3": "Добавить в module.exports.colors новое свойство corporate",
                  "var_4": "Расширить theme.extend.colors, добавив corporate: '#00A651'",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему для production build интернет-банкинга следует использовать purge/content с safelist вместо отключения tree-shaking динамических классов?",
                  "var_1": "Предотвращаются конфликты классов при динамической генерации через JavaScript в runtime",
                  "var_2": "Минимизируется размер бандла, сохраняя только критичные динамические классы через safelist",
                  "var_3": "Улучшается SEO-оптимизация за счёт приоритетной загрузки критических стилей первого экрана",
                  "var_4": "Ускоряется hot reload в development режиме через кэширование используемых утилит",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Продвинутые техники верстки: CSS-переменные, анимации, transitions, псевдоэлементы и кросс-браузерная совместимость",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис используется для объявления CSS-переменной в корневом элементе?",
                  "var_1": ":root { var(--variable-name): value; }",
                  "var_2": ":root { --variable-name: value; }",
                  "var_3": "html { $variable-name: value; }",
                  "var_4": "* { @variable-name: value; }",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между CSS transition и animation при создании hover-эффекта для кнопки оплаты в банковском интерфейсе?",
                  "var_1": "Animation поддерживает только линейную интерполяцию, transition позволяет использовать кривые Безье.",
                  "var_2": "Transition работает с псевдоклассами, animation требует JavaScript для запуска эффектов.",
                  "var_3": "Transition создает циклические анимации, animation работает только при изменении свойств элемента.",
                  "var_4": "Transition срабатывает при изменении состояния, animation запускается независимо и поддерживает keyframes.",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать систему CSS-переменных для темизации банковского Angular-приложения с учетом брендов дочерних компаний и требований доступности?",
                  "var_1": "Создать отдельные CSS-файлы для каждой темы и подгружать их динамически через lazy loading модулей Angular.",
                  "var_2": "Создать многоуровневую иерархию переменных: базовые токены, семантические цвета, компонентные значения с fallback для старых браузеров.",
                  "var_3": "Применить SCSS-миксины с параметрами цветов, компилируя отдельные бандлы стилей для каждого дочернего банка.",
                  "var_4": "Использовать inline-стили через Angular renderer с динамической подстановкой HEX-значений для каждого бренда из конфига.",
                  "correct_answer": 2
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "profile": "Frontend разработчик",
      "specialization": "React",
      "competencies": [
        {
          "competency_name": "HTML [CORE 80%]",
          "topics": [
            {
              "topic_name": "Семантическая разметка и доступность (accessibility)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой HTML-тег следует использовать для основной навигации по сайту банка?",
                  "var_1": "Тег <header> для размещения всех навигационных ссылок",
                  "var_2": "Тег <nav> для семантической разметки навигационного блока",
                  "var_3": "Тег <div> с классом navigation для навигации",
                  "var_4": "Тег <menu> как специализированный элемент для меню",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между aria-label и aria-labelledby при разметке формы перевода денег в React-приложении банка?",
                  "var_1": "aria-label задает текст напрямую, aria-labelledby ссылается на ID существующего элемента",
                  "var_2": "aria-label применяется для интерактивных элементов, aria-labelledby для статичных текстов",
                  "var_3": "aria-label поддерживает локализацию автоматически, aria-labelledby требует ручного перевода строк",
                  "var_4": "aria-labelledby задает видимую метку, aria-label скрывает текст от зрячих пользователей",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать доступную систему уведомлений в личном кабинете банка, чтобы скринридеры корректно объявляли динамические изменения баланса?",
                  "var_1": "Применять aria-atomic=true с aria-relevant=additions для контейнера с балансом счета",
                  "var_2": "Устанавливать tabindex=-1 на элемент баланса и программно фокусировать при обновлении",
                  "var_3": "Использовать aria-live регионы с polite для некритичных обновлений и assertive для срочных",
                  "var_4": "Использовать role=alert для всех уведомлений и обновлять textContent через setInterval",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Формы: атрибуты, валидация и типы input-элементов",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой атрибут HTML input используется для указания обязательности заполнения поля ИИН клиента банка?",
                  "var_1": "Атрибут validate указывает на необходимость проверки поля",
                  "var_2": "Атрибут required делает поле обязательным для заполнения",
                  "var_3": "Атрибут pattern с регулярным выражением для ИИН",
                  "var_4": "Атрибут mandatory активирует обязательную валидацию при отправке",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "Какой тип input и pattern лучше использовать для валидации казахстанского номера телефона в формате +7 (7XX) XXX-XX-XX?",
                  "var_1": "type='tel' с pattern='\\+7\\s\\([0-9]{3}\\)\\s[0-9]{3}-[0-9]{2}-[0-9]{2}'",
                  "var_2": "type='phone' с pattern='\\+7\\s\\(\\d{3}\\)\\s\\d{3}-\\d{2}-\\d{2}'",
                  "var_3": "type='tel' с pattern='^\\+7\\s\\([7][0-9]{2}\\)\\s[0-9]{3}-[0-9]{2}-[0-9]{2}$'",
                  "var_4": "type='text' с inputmode='tel' и maxlength='18'",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему для форм онлайн-банкинга с чувствительными данными стоит использовать autocomplete='off' вместе с программной валидацией, несмотря на ухудшение UX?",
                  "var_1": "Предотвращение CSRF-атак через блокирование предзаполненных токенов безопасности",
                  "var_2": "Соответствие требованиям PCI DSS по шифрованию данных карт в transit",
                  "var_3": "Защита от XSS-атак через инъекцию вредоносных скриптов в поля формы",
                  "var_4": "Предотвращение утечки данных через историю браузера и автозаполнение на публичных устройствах",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Оптимизация производительности: async/defer, preload, lazy loading",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой атрибут тега <script> позволяет загружать JavaScript файл асинхронно, не блокируя парсинг HTML?",
                  "var_1": "Атрибут type='module' автоматически загружает скрипты без блокировки.",
                  "var_2": "Атрибут preload указывает браузеру приоритет загрузки скрипта заранее.",
                  "var_3": "Атрибут defer откладывает выполнение скрипта до загрузки DOM.",
                  "var_4": "Атрибут async загружает скрипт асинхронно без блокировки парсинга.",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В интернет-банке критичны метрики LCP. В чем разница между async и defer для подключения аналитики и основного бандла приложения?",
                  "var_1": "defer загружается после window.onload, async выполняется сразу при парсинге DOM параллельно.",
                  "var_2": "async выполняется сразу после загрузки, defer — после парсинга DOM в порядке объявления.",
                  "var_3": "async сохраняет порядок выполнения скриптов, defer выполняется асинхронно без гарантий последовательности.",
                  "var_4": "defer блокирует рендеринг, async загружается параллельно и выполняется после DOMContentLoaded события.",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование preload для всех chunk'ов React-приложения банка может ухудшить FCP и увеличить bandwidth вместо оптимизации?",
                  "var_1": "Preload запускает выполнение JavaScript синхронно, блокируя main thread до завершения загрузки chunk'ов.",
                  "var_2": "Браузер кэширует preload-ресурсы в отдельном хранилище, дублируя данные и увеличивая memory footprint.",
                  "var_3": "Preload создает высокий приоритет загрузки, конкурируя с критичными ресурсами и перегружая сеть.",
                  "var_4": "Preload блокирует парсинг HTML до полной загрузки всех chunk'ов, задерживая первый рендер.",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Современные HTML5 API: Canvas, Web Storage, Geolocation, Drag and Drop",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод Canvas API используется для отрисовки прямоугольника с заливкой?",
                  "var_1": "rect(x, y, width, height)",
                  "var_2": "drawRect(x, y, width, height)",
                  "var_3": "strokeRect(x, y, width, height)",
                  "var_4": "fillRect(x, y, width, height)",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем ключевое различие между localStorage и sessionStorage при реализации корзины покупок в банковском приложении?",
                  "var_1": "sessionStorage синхронизируется между вкладками, localStorage работает изолированно",
                  "var_2": "localStorage имеет лимит 10MB, sessionStorage ограничен 5MB данных",
                  "var_3": "localStorage поддерживает объекты напрямую, sessionStorage требует сериализации",
                  "var_4": "localStorage сохраняется между сессиями, sessionStorage удаляется при закрытии вкладки",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему следует использовать OffscreenCanvas вместо обычного Canvas при реализации визуализации больших массивов транзакций в React-приложении банка?",
                  "var_1": "OffscreenCanvas поддерживает аппаратное ускорение GPU для WebGL контекста",
                  "var_2": "OffscreenCanvas автоматически кэширует отрисованные данные транзакций в IndexedDB",
                  "var_3": "OffscreenCanvas использует меньше памяти при отрисовке динамических графиков",
                  "var_4": "OffscreenCanvas работает в Web Worker, не блокируя основной поток рендеринга",
                  "correct_answer": 4
                }
              ]
            }
          ]
        },
        {
          "competency_name": "JavaScript [CORE 90%]",
          "topics": [
            {
              "topic_name": "Основы JavaScript: типы данных, операторы, области видимости и замыкания",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип данных вернет typeof null в JavaScript?",
                  "var_1": "object",
                  "var_2": "number",
                  "var_3": "null",
                  "var_4": "undefined",
                  "correct_answer": 1
                },
                {
                  "level": "Middle",
                  "question_text": "В React-приложении банка обработчик события клика объявлен через стрелочную функцию в render(). В чем разница контекста this по сравнению с обычной функцией?",
                  "var_1": "Стрелочная функция связывает this с компонентом через bind, обычная требует явного связывания.",
                  "var_2": "Стрелочная функция получает this из props компонента, обычная из глобального объекта.",
                  "var_3": "Стрелочная функция наследует this из лексического окружения, обычная создает собственный контекст.",
                  "var_4": "Обычная функция наследует this от родителя, стрелочная создает новый контекст при вызове.",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "В SPA телеком-оператора возникает memory leak из-за замыканий в event listeners. Как архитектурно предотвратить утечки при размонтировании React-компонентов с таймерами и подписками?",
                  "var_1": "Вынести event listeners в Redux middleware с автоматической отпиской при unmount.",
                  "var_2": "Применять WeakMap для хранения ссылок на listeners и автоматической сборки мусора.",
                  "var_3": "Использовать componentWillUnmount для удаления всех замыканий через delete оператор.",
                  "var_4": "Использовать useEffect с cleanup функцией, возвращающей отписку и clearTimeout/clearInterval.",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Асинхронное программирование: Promise, async/await, Event Loop",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод Promise используется для обработки ошибок асинхронных операций при загрузке данных клиента из API банка?",
                  "var_1": "Метод .error() или свойство Promise.onerror",
                  "var_2": "Метод .resolve() с параметром error callback",
                  "var_3": "Метод .finally() для обработки всех ошибок",
                  "var_4": "Метод .catch() или второй аргумент .then()",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между Promise.all() и Promise.allSettled() при параллельной загрузке данных о балансах счетов клиента из нескольких микросервисов банка?",
                  "var_1": "Promise.all() отклоняется при первой ошибке, Promise.allSettled() ждет завершения всех промисов",
                  "var_2": "Promise.all() выполняется параллельно, Promise.allSettled() последовательно ждет каждый промис",
                  "var_3": "Promise.allSettled() быстрее завершается при ошибке, Promise.all() дожидается всех промисов",
                  "var_4": "Promise.all() возвращает массив результатов, Promise.allSettled() возвращает объект с статусами",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему в React-приложении банка с частыми API-запросами может возникнуть блокировка Event Loop и как микротаски (Promise) влияют на приоритет выполнения по сравнению с макротасками (setTimeout)?",
                  "var_1": "Микротаски выполняются после текущего кода до макротасок, блокируя рендеринг при большом количестве промисов",
                  "var_2": "Макротаски имеют приоритет над Promise, блокируя основной поток при множественных setTimeout вызовах",
                  "var_3": "Промисы выполняются в отдельном потоке, освобождая Event Loop для обработки пользовательских событий интерфейса",
                  "var_4": "Event Loop блокируется при синхронных операциях, а Promise и setTimeout выполняются параллельно в Web Workers",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "ES6+ возможности: деструктуризация, spread/rest операторы, модули, стрелочные функции",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис используется для деструктуризации объекта с переименованием свойства 'clientId' в 'id'?",
                  "var_1": "const { clientId -> id } = object",
                  "var_2": "const { id = clientId } = object",
                  "var_3": "const { clientId: id } = object",
                  "var_4": "const id = object.clientId as id",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В React-компоненте банковского приложения нужно передать все props кроме 'sensitive'. Какой подход с rest оператором оптимален?",
                  "var_1": "spread всех props с override: {...props, sensitive: undefined}",
                  "var_2": "const { sensitive, ...safeProps } = props; затем spread safeProps",
                  "var_3": "Object.keys(props).filter() с последующим reduce в новый объект",
                  "var_4": "delete props.sensitive перед spread, затем восстановить через temp переменную",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Почему стрелочные функции в обработчиках событий React могут вызвать проблемы производительности при рендере больших списков транзакций?",
                  "var_1": "Создается новая функция при каждом рендере, breaking referential equality для React.memo",
                  "var_2": "Отсутствие hoisting у стрелочных функций замедляет первичную инициализацию обработчиков событий",
                  "var_3": "Arrow functions создают замыкания на весь список, увеличивая потребление памяти компонента",
                  "var_4": "Стрелочные функции блокируют event loop из-за отсутствия собственного this контекста",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Прототипное наследование, классы и функциональное программирование в JavaScript",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое прототип объекта в JavaScript и как получить доступ к прототипу созданного объекта?",
                  "var_1": "Копия родительского объекта с методами. Доступ через this.constructor.prototype.",
                  "var_2": "Объект, от которого наследуются свойства. Доступ через __proto__ или Object.getPrototypeOf().",
                  "var_3": "Базовый класс для наследования. Доступ через super() или Object.getPrototype().",
                  "var_4": "Шаблон объекта, определяющий его структуру. Доступ через prototype свойство объекта.",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В React-приложении банка нужно создать иерархию компонентов для разных типов транзакций. В чем принципиальная разница между наследованием через классы и композицией функций в контексте переиспользования логики?",
                  "var_1": "Классы обеспечивают лучшую производительность рендера, композиция увеличивает размер бандла компонентов.",
                  "var_2": "Классы создают жесткую иерархию с единственным родителем, композиция комбинирует независимые функции гибко.",
                  "var_3": "Классы привязаны к жизненному циклу компонента, композиция работает только с хуками.",
                  "var_4": "Классы поддерживают приватные методы через #, композиция требует замыканий для инкапсуляции.",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В высоконагруженном React-приложении для онлайн-банкинга используется функциональное программирование с иммутабельными структурами данных. Какие проблемы с производительностью могут возникнуть при глубоком копировании больших объектов состояния и как их решить архитектурно?",
                  "var_1": "Медленное обновление DOM. Переписать на классовые компоненты с shouldComponentUpdate для оптимизации рендеринга.",
                  "var_2": "Утечки памяти при копировании. Применять Object.freeze() для заморозки объектов и мемоизацию вычислений.",
                  "var_3": "Блокировка главного потока. Использовать Web Workers для клонирования состояния в фоновом режиме.",
                  "var_4": "Избыточное выделение памяти и GC-паузы. Использовать structural sharing через Immer или персистентные структуры.",
                  "correct_answer": 4
                }
              ]
            }
          ]
        },
        {
          "competency_name": "CSS [CORE 80%]",
          "topics": [
            {
              "topic_name": "Flexbox и Grid Layout: построение адаптивных макетов",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какое свойство Flexbox используется для выравнивания элементов по главной оси контейнера?",
                  "var_1": "align-content",
                  "var_2": "align-items",
                  "var_3": "flex-direction",
                  "var_4": "justify-content",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "Когда следует использовать CSS Grid вместо Flexbox для создания адаптивной формы заявки на кредит с несколькими секциями?",
                  "var_1": "Когда требуется выравнивание элементов формы вдоль одной главной оси",
                  "var_2": "Когда необходимо использовать gap для отступов между полями формы",
                  "var_3": "Когда форма содержит динамические поля с автоматическим переносом элементов",
                  "var_4": "Когда нужен двумерный контроль расположения элементов по строкам и столбцам одновременно",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование Grid с auto-fit и minmax() предпочтительнее медиа-запросов при проектировании каталога банковских продуктов для мобильных и десктопных версий?",
                  "var_1": "Обеспечивает автоматическую адаптивность без брейкпоинтов, упрощает поддержку и уменьшает объем кода",
                  "var_2": "Упрощает интеграцию с React компонентами через CSS Modules и динамические inline-стили",
                  "var_3": "Гарантирует консистентность отображения через CSS-переменные и calc() для всех разрешений экранов",
                  "var_4": "Повышает производительность рендеринга за счет аппаратного ускорения GPU для сложных макетов",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "CSS-переменные, препроцессоры и методологии организации стилей (BEM, CSS Modules)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой синтаксис используется для объявления CSS-переменной с основным цветом бренда банка?",
                  "var_1": "var(primary-color, #0066CC); в глобальных стилях",
                  "var_2": "@primary-color: #0066CC; в :root селекторе",
                  "var_3": "--primary-color: #0066CC; в селекторе :root",
                  "var_4": "$primary-color: #0066CC; в файле переменных",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем преимущество CSS Modules перед глобальным BEM при разработке компонентной библиотеки для нескольких банковских продуктов?",
                  "var_1": "Совместимость с legacy-кодом через автоматическую генерацию БЭМ-нотации",
                  "var_2": "Повышенная производительность рендеринга за счет изоляции стилей компонентов",
                  "var_3": "Встроенная поддержка темизации через CSS-переменные для продуктов",
                  "var_4": "Автоматическая локализация стилей исключает конфликты имен между продуктами",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать систему тем для мультибрендового банковского приложения с учетом производительности и поддержки legacy браузеров?",
                  "var_1": "Styled-components с ThemeProvider и runtime переключением тем через Context API",
                  "var_2": "Sass-миксины с динамической генерацией классов и PostCSS для автопрефиксинга всех браузеров",
                  "var_3": "CSS-переменные для современных браузеров с фоллбэком через препроцессор, критические стили инлайн",
                  "var_4": "Less-переменные с компиляцией отдельных бандлов для каждого бренда при сборке",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Позиционирование элементов, z-index и управление потоком документа",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какое свойство CSS удаляет элемент из нормального потока документа и позиционирует его относительно viewport?",
                  "var_1": "display: float",
                  "var_2": "position: absolute",
                  "var_3": "position: relative",
                  "var_4": "position: fixed",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В React-приложении банка модальное окно с z-index: 100 перекрывается выпадающим меню с z-index: 200. Оба внутри порталов. Почему и как исправить?",
                  "var_1": "Порталы игнорируют z-index. Переместить модальное окно выше в DOM-дереве компонентов.",
                  "var_2": "Конфликт Virtual DOM. Увеличить z-index модального окна до 300 и форсировать ре-рендер.",
                  "var_3": "React синтезирует события асинхронно. Добавить !important к z-index модального окна.",
                  "var_4": "Разные stacking context. Проверить z-index родительских элементов или использовать единый портал.",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Проектируете систему слоёв для банковского приложения: header, модалы, tooltips, notifications. Как организовать z-index management для масштабируемости?",
                  "var_1": "CSS-переменные или константы со слоями: base, header, overlay, modal, tooltip, notification.",
                  "var_2": "CSS Modules с хешированными значениями z-index и автоматической генерацией через webpack loader.",
                  "var_3": "Inline styles с динамическим расчётом z-index через JavaScript на основе порядка рендера.",
                  "var_4": "Автоинкрементные значения z-index через React Context с глобальным счётчиком для компонентов.",
                  "correct_answer": 1
                }
              ]
            },
            {
              "topic_name": "Анимации и трансформации: transitions, animations и performance-оптимизация",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какое CSS-свойство используется для плавного перехода между состояниями элемента при hover?",
                  "var_1": "transform",
                  "var_2": "animation",
                  "var_3": "transition",
                  "var_4": "keyframes",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "Почему для анимации позиции элемента лучше использовать transform: translate(), а не top/left?",
                  "var_1": "transform автоматически применяет easing и hardware acceleration",
                  "var_2": "transform не вызывает reflow, работает на GPU, обеспечивает 60fps",
                  "var_3": "transform поддерживает больше единиц измерения и процентных значений",
                  "var_4": "top/left требуют дополнительных prefixes для кроссбраузерности",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "Как оптимизировать анимацию большого списка транзакций в мобильном банкинге для предотвращения jank на слабых устройствах?",
                  "var_1": "Анимировать через Web Animations API с composite режимом и hardware acceleration для всех свойств",
                  "var_2": "Использовать will-change, CSS containment, виртуализацию списка, анимировать только transform и opacity",
                  "var_3": "Применять requestAnimationFrame для каждого элемента списка с debounce и throttle функциями",
                  "var_4": "Использовать CSS Grid с auto-flow dense, GPU-acceleration через translateZ и backface-visibility",
                  "correct_answer": 2
                }
              ]
            }
          ]
        },
        {
          "competency_name": "React JS [CORE 90%]",
          "topics": [
            {
              "topic_name": "Жизненный цикл компонентов и хуки (useState, useEffect, useCallback, useMemo)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой хук используется для выполнения побочных эффектов, таких как запрос данных о клиенте из API банка?",
                  "var_1": "useCallback",
                  "var_2": "useMemo",
                  "var_3": "useState",
                  "var_4": "useEffect",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между useCallback и useMemo при оптимизации обработчика отправки платежа в банковском приложении?",
                  "var_1": "useMemo оптимизирует обработчики событий, useCallback вычисления",
                  "var_2": "useCallback предотвращает ре-рендеры, useMemo кеширует пропсы",
                  "var_3": "useCallback мемоизирует функцию, useMemo мемоизирует результат вычисления",
                  "var_4": "useCallback для async функций, useMemo для синхронных",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Почему useEffect с пустым массивом зависимостей может создать проблему с устаревшим замыканием при подписке на WebSocket для обновления баланса счета?",
                  "var_1": "Пустой массив зависимостей блокирует асинхронные обновления состояния",
                  "var_2": "Замыкание сохраняет начальные значения state, игнорируя их обновления",
                  "var_3": "WebSocket соединение разрывается при каждом ре-рендере компонента",
                  "var_4": "React батчит обновления из WebSocket и пропускает промежуточные значения",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Управление состоянием приложения (Context API, Redux, Zustand)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой хук используется для чтения значения из Context API в функциональном компоненте React?",
                  "var_1": "useConsumer",
                  "var_2": "useContext",
                  "var_3": "useProvider",
                  "var_4": "useContextValue",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В мобильном банковском приложении с 50+ экранами нужно управлять данными профиля пользователя, темой интерфейса и временными данными форм. Какое решение оптимально для каждого типа состояния?",
                  "var_1": "Zustand для темы и форм, Context API для данных профиля",
                  "var_2": "Context API для темы, Redux/Zustand для профиля, локальный state для форм",
                  "var_3": "Context API для профиля и форм, localStorage для темы",
                  "var_4": "Redux для всех типов состояния с единым глобальным store",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком-портале с Context API все компоненты перерендериваются при любом изменении глобального состояния с данными тарифов, балансом и настройками. Как архитектурно решить проблему избыточных рендеров?",
                  "var_1": "Мигрировать на Redux Toolkit с нормализацией данных через createEntityAdapter",
                  "var_2": "Разделить на множественные контексты по доменам, использовать React.memo и useMemo для селекторов",
                  "var_3": "Применить shouldComponentUpdate в контексте и debounce для всех state updates",
                  "var_4": "Использовать useReducer вместо Context API и обернуть провайдер в PureComponent",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Производительность и оптимизация React-приложений (мemoization, lazy loading, code splitting)",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое React.memo и для чего он используется?",
                  "var_1": "Хук для кэширования результатов вычислений между рендерами компонента",
                  "var_2": "HOC для мемоизации компонента, предотвращает ре-рендер при неизменных props",
                  "var_3": "Метод жизненного цикла компонента для оптимизации shouldComponentUpdate",
                  "var_4": "Wrapper для сохранения состояния компонента в localStorage при размонтировании",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В личном кабинете банка список из 50 транзакций ре-рендерится при каждом клике. Какие методы оптимизации применить?",
                  "var_1": "Redux для кэширования транзакций, componentWillUpdate для контроля рендера, debounce на setState",
                  "var_2": "shouldComponentUpdate в функциональных компонентах, PureComponent для списков, useCallback для рендера",
                  "var_3": "forceUpdate для принудительного обновления, Context API для изоляции списка, throttle на map",
                  "var_4": "React.memo для элементов списка, виртуализация через react-window, useMemo для вычислений",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "В приложении интернет-банкинга после внедрения code splitting увеличилось время загрузки модуля платежей на медленных сетях. Как оптимизировать архитектуру загрузки?",
                  "var_1": "Service Worker с aggressive caching, inline всех критичных компонентов в main bundle",
                  "var_2": "Prefetching критичных чанков, aggressive code splitting, resource hints, bundle analyzer для оптимизации размера",
                  "var_3": "Увеличение размера чанков через minChunks, отключение динамических импортов для стабильности загрузки",
                  "var_4": "HTTP/2 Server Push для всех модулей, sync imports вместо lazy для платежного функционала",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Работа с формами, валидация и обработка пользовательского ввода",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой атрибут HTML input используется для отключения автозаполнения формы регистрации в банковском приложении?",
                  "var_1": "autocomplete со значением disabled",
                  "var_2": "autoFill со значением none",
                  "var_3": "autoComplete со значением off",
                  "var_4": "formAutoComplete со значением false",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между контролируемыми и неконтролируемыми компонентами форм в React при работе с формой перевода денег?",
                  "var_1": "Контролируемые используют onChange, неконтролируемые используют onSubmit для валидации",
                  "var_2": "Контролируемые рендерятся через props, неконтролируемые через context API",
                  "var_3": "Контролируемые управляются через state, неконтролируемые через refs и DOM",
                  "var_4": "Контролируемые синхронизируют данные с сервером, неконтролируемые хранят локально",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать оптимальную архитектуру валидации для многостраничной формы заявки на кредит с 50+ полями и зависимыми правилами?",
                  "var_1": "Использовать schema-based валидацию с yup/zod, разделить на контексты, применить debounce и мемоизацию",
                  "var_2": "Использовать controlled components с useState для каждого поля и централизованную функцию validate",
                  "var_3": "Создать единый Redux store с валидацией в reducers и синхронной проверкой при onChange",
                  "var_4": "Применить встроенную HTML5 валидацию с pattern атрибутами и custom validity API для зависимостей",
                  "correct_answer": 1
                }
              ]
            }
          ]
        },
        {
          "competency_name": "Redux [DAILY 75%]",
          "topics": [
            {
              "topic_name": "Основы Redux: store, actions, reducers и принцип однонаправленного потока данных",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод Redux используется для создания store с переданным reducer?",
                  "var_1": "configureStore из библиотеки React-Redux",
                  "var_2": "useStore хук из библиотеки Redux",
                  "var_3": "initStore из Redux Toolkit",
                  "var_4": "createStore из библиотеки Redux",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В React-приложении банка нужно хранить токен авторизации и список транзакций. Где лучше хранить токен: в Redux store или sessionStorage?",
                  "var_1": "В Redux store для централизованного управления состоянием и доступа из компонентов",
                  "var_2": "В Context API отдельно от Redux для изоляции чувствительных данных",
                  "var_3": "В Redux store с middleware redux-persist для автоматической синхронизации с localStorage",
                  "var_4": "В sessionStorage, чтобы избежать утечек через DevTools и сохранить при перезагрузке",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "В приложении телеком-оператора при массовом обновлении тарифов (200+ action за секунду) интерфейс тормозит. Как оптимизировать обработку actions в Redux?",
                  "var_1": "Разделить store на несколько экземпляров по доменным областям",
                  "var_2": "Батчинг actions через redux-batched-actions или debounce на уровне middleware",
                  "var_3": "Использовать shouldComponentUpdate и PureComponent для всех подключенных компонентов",
                  "var_4": "Перейти на immer и нормализовать state через normalizr",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Redux Toolkit: configureStore, createSlice, createAsyncThunk и RTK Query",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой метод Redux Toolkit автоматически создает action creators и reducer для slice?",
                  "var_1": "createAction",
                  "var_2": "createReducer",
                  "var_3": "createSlice",
                  "var_4": "configureStore",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В банковском приложении нужно кешировать данные клиента на 5 минут. Использовать RTK Query или createAsyncThunk?",
                  "var_1": "createAsyncThunk с localStorage для персистентного кеширования",
                  "var_2": "createSlice с extraReducers и setTimeout для инвалидации",
                  "var_3": "Redux Persist с transform для TTL кеширования",
                  "var_4": "RTK Query с keepUnusedDataFor для автоматического кеширования",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "В приложении банка после logout остаются закешированные данные RTK Query. Как очистить все кеши при выходе?",
                  "var_1": "Вызвать api.injectEndpoints с пустым массивом endpoints",
                  "var_2": "Dispatch api.util.resetApiState() в logout action или middleware",
                  "var_3": "Dispatch действие RESET из корневого reducer с keepUnusedDataFor: 0",
                  "var_4": "Использовать refetchOnMountOrArgChange: true в каждом endpoint",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Middleware и асинхронные операции: redux-thunk, redux-saga, обработка side effects",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой middleware в Redux позволяет диспатчить функции вместо объектов action для выполнения асинхронных операций?",
                  "var_1": "redux-observable",
                  "var_2": "redux-promise",
                  "var_3": "redux-thunk",
                  "var_4": "redux-saga",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В приложении банка нужно реализовать последовательную обработку платежей с отменой при ошибке. Какой middleware выбрать: redux-thunk или redux-saga?",
                  "var_1": "redux-thunk, так как позволяет возвращать промисы и обрабатывать ошибки через catch",
                  "var_2": "redux-saga, так как использует генераторы для синхронного стиля написания кода",
                  "var_3": "redux-thunk, так как проще в настройке и достаточен для последовательных операций",
                  "var_4": "redux-saga, так как поддерживает cancellation и декларативное управление потоком",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "В телеком-приложении saga для загрузки баланса абонента выполняется дважды при монтировании компонента. Какая наиболее вероятная причина и решение?",
                  "var_1": "useEffect без зависимостей вызывается дважды. Добавить пустой массив зависимостей",
                  "var_2": "React.StrictMode вызывает двойной рендер. Использовать takeLatest вместо takeEvery для дедупликации",
                  "var_3": "Saga запускается при каждом экшене. Использовать throttle с задержкой 300ms",
                  "var_4": "Двойной dispatch экшена. Добавить debounce в middleware перед saga",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "Оптимизация производительности: селекторы, memoization, reselect и нормализация состояния",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Что такое селектор в Redux и для чего он используется?",
                  "var_1": "Компонент высшего порядка для подключения Redux к React.",
                  "var_2": "Функция для извлечения и вычисления данных из Redux store.",
                  "var_3": "Метод для диспатчинга нескольких действий одновременно в store.",
                  "var_4": "Middleware для перехвата и модификации действий перед reducers.",
                  "correct_answer": 2
                },
                {
                  "level": "Middle",
                  "question_text": "В банковском приложении список из 10000 транзакций фильтруется при каждом рендере. Когда использовать reselect вместо обычного селектора?",
                  "var_1": "Когда состояние хранится в нескольких reducer и требуется их комбинирование.",
                  "var_2": "Когда нужна мemoизация вычислений для предотвращения повторных фильтраций идентичных данных.",
                  "var_3": "Когда компоненты подписаны на store через useSelector с глубокой вложенностью.",
                  "var_4": "Когда транзакции обновляются через dispatch и нужна синхронизация с сервером.",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "В личном кабинете телеком-оператора данные клиента хранятся как вложенные объекты (contracts->services->tariffs), что вызывает массовые ререндеры. Как нормализация состояния решит эту проблему?",
                  "var_1": "Иммутабельные обновления через immer устраняют глубокие сравнения и оптимизируют диффинг.",
                  "var_2": "Нормализация переносит логику обновлений в reducer, что снижает нагрузку на компоненты.",
                  "var_3": "Плоская структура с ID-ссылками позволит обновлять отдельные сущности без пересчета всего дерева.",
                  "var_4": "Разделение на слайсы автоматически мемоизирует селекторы и предотвращает лишние рендеры.",
                  "correct_answer": 3
                }
              ]
            }
          ]
        },
        {
          "competency_name": "TypeScript [CORE 85%]",
          "topics": [
            {
              "topic_name": "Типизация React компонентов: Props, State, Events и Refs",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип TypeScript использовать для типизации props функционального React компонента, отображающего данные клиента банка?",
                  "var_1": "Class component с декоратором @Component и типизацией через generics",
                  "var_2": "PropTypes из библиотеки prop-types для runtime валидации данных",
                  "var_3": "Interface или type для объекта props с полями клиента",
                  "var_4": "React.FC generic с указанием типа возвращаемого JSX элемента",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между React.FC<Props> и обычной функцией с типизированными props при создании компонента формы перевода денег?",
                  "var_1": "React.FC обеспечивает строгую типизацию state, обычная функция только props",
                  "var_2": "React.FC требует обязательное указание returnType, обычная функция выводит автоматически",
                  "var_3": "React.FC добавляет типизацию для ref forwarding, обычная функция требует memo",
                  "var_4": "React.FC автоматически добавляет children, обычная функция требует явного указания",
                  "correct_answer": 4
                },
                {
                  "level": "Senior",
                  "question_text": "Почему использование generic constraints с forwardRef критично для типобезопасности при создании переиспользуемой библиотеки UI-компонентов банковского приложения?",
                  "var_1": "Позволяет использовать ref callback вместо объектов для оптимизации производительности",
                  "var_2": "Гарантирует совместимость с React.memo и предотвращает лишние ре-рендеры компонентов",
                  "var_3": "Обеспечивает корректный вывод типов ref и props, предотвращает type widening",
                  "var_4": "Активирует strict mode проверки и валидацию DOM-атрибутов в runtime",
                  "correct_answer": 3
                }
              ]
            },
            {
              "topic_name": "Продвинутые типы TypeScript: Utility Types, Generics и Type Guards",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой Utility Type в TypeScript используется для создания типа со всеми свойствами исходного типа, но с модификатором optional?",
                  "var_1": "Required<T>",
                  "var_2": "Nullable<T>",
                  "var_3": "Optional<T>",
                  "var_4": "Partial<T>",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В React-компоненте банковского приложения нужно валидировать props на runtime и использовать type guards. Какую конструкцию применить для проверки, что переданный объект имеет свойство accountNumber типа string?",
                  "var_1": "Применить утилитный тип Record<'accountNumber', string> для валидации на runtime",
                  "var_2": "Использовать предикат типа: 'accountNumber' in obj && typeof obj.accountNumber === 'string'",
                  "var_3": "Создать дженерик функцию с extends keyof для runtime проверки свойства",
                  "var_4": "Использовать оператор instanceof для проверки типа obj.accountNumber === String",
                  "correct_answer": 2
                },
                {
                  "level": "Senior",
                  "question_text": "При проектировании типобезопасного API-клиента для банковских транзакций необходимо создать generic-функцию, которая гарантирует совместимость типов запроса и ответа. Какие ограничения (constraints) и условные типы использовать для обеспечения type safety между Request и Response типами с поддержкой discriminated unions?",
                  "var_1": "Создать abstract generic класс с protected методами и использовать decorators для runtime валидации типов запроса и ответа",
                  "var_2": "Использовать type assertions с as const и readonly модификаторами для валидации структуры данных через template literal types",
                  "var_3": "Применить utility types Pick и Omit с keyof operator для создания intersection types между Request и Response через общие поля",
                  "var_4": "Использовать generic constraints с extends, mapped types и conditional types с infer для связывания типов через discriminant поле",
                  "correct_answer": 4
                }
              ]
            },
            {
              "topic_name": "Типизация хуков React: useState, useEffect, useContext, useReducer и кастомные хуки",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Как типизировать useState для хранения данных пользователя с полями id, name и iin в банковском приложении?",
                  "var_1": "useState<interface UserData {id: number; name: string; iin: string}>(null)",
                  "var_2": "useState<User extends {id: number; name: string; iin: string}>()",
                  "var_3": "useState({id: number, name: string, iin: string})",
                  "var_4": "useState<{id: number; name: string; iin: string} | null>(null)",
                  "correct_answer": 4
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между типизацией useEffect(() => {}, []) и useEffect(() => { return () => {} }, []) при работе с WebSocket соединением для онлайн-банкинга?",
                  "var_1": "Вторая возвращает cleanup функцию для отписки, первая без очистки ресурсов",
                  "var_2": "Первая синхронная для установки соединения, вторая асинхронная для закрытия",
                  "var_3": "Вторая возвращает промис для обработки ошибок подключения к серверу",
                  "var_4": "Первая для инициализации WebSocket, вторая для реконнекта при разрыве",
                  "correct_answer": 1
                },
                {
                  "level": "Senior",
                  "question_text": "Почему для кастомного хука useTransactionPolling в банковском приложении лучше использовать дискриминированные union типы вместо optional полей при типизации состояния загрузки?",
                  "var_1": "Упрощает интеграцию с Redux DevTools для отладки состояний",
                  "var_2": "Гарантирует type-safe доступ к данным, исключает невалидные комбинации состояний",
                  "var_3": "Повышает производительность через tree-shaking неиспользуемых типов в сборке",
                  "var_4": "Обеспечивает автоматическую сериализацию состояния для localStorage кеширования",
                  "correct_answer": 2
                }
              ]
            },
            {
              "topic_name": "TypeScript в React экосистеме: типизация Redux/Zustand, React Router, API запросов и форм",
              "questions": [
                {
                  "level": "Junior",
                  "question_text": "Какой тип TypeScript используется для типизации параметров navigate функции из React Router v6?",
                  "var_1": "NavigateOptions из react-router-dom",
                  "var_2": "NavigationParams<T> generic тип",
                  "var_3": "NavigateFunction из react-router-dom",
                  "var_4": "RouteParams из react-router",
                  "correct_answer": 3
                },
                {
                  "level": "Middle",
                  "question_text": "В чем разница между typed hooks useAppDispatch и обычным useDispatch при типизации Redux Toolkit в приложении банка?",
                  "var_1": "useAppDispatch кэширует dispatch функцию для оптимизации re-renders",
                  "var_2": "useAppDispatch добавляет автоматическую валидацию actions перед dispatch",
                  "var_3": "useAppDispatch инферит типы thunk actions и middleware",
                  "var_4": "useAppDispatch предоставляет встроенную интеграцию с React DevTools",
                  "correct_answer": 3
                },
                {
                  "level": "Senior",
                  "question_text": "Как спроектировать архитектуру типобезопасного API-слоя с RTK Query для микросервисов банка, чтобы избежать дублирования типов между сервисами?",
                  "var_1": "Использовать codegen из OpenAPI спецификаций с shared types пакетом",
                  "var_2": "Применить GraphQL Federation со schema stitching между микросервисами",
                  "var_3": "Создать единый BaseAPI класс с generic типами для всех эндпоинтов",
                  "var_4": "Использовать TypeScript declaration merging для расширения базовых RTK типов",
                  "correct_answer": 1
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}