import json
import matplotlib.pyplot as plt
from collections import Counter

def plot_answer_analysis(file_path):
    """
    –°—Ç—Ä–æ–∏—Ç 2 –≥—Ä–∞—Ñ–∏–∫–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–∞–Ω–≥–∏ –¥–ª–∏–Ω
    """
    
    # –ß—Ç–µ–Ω–∏–µ JSON
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    correct_positions = []
    length_ranks = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for competency in data['competencies']:
        for theme in competency['themes']:
            for question in theme['questions']:
                # –ü–æ–∑–∏—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                correct_positions.append(question['correct_position'])
                
                # –î–ª–∏–Ω—ã –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–≤ —Å–ª–æ–≤–∞—Ö)
                lengths = []
                for i in range(1, 5):
                    var_key = f'var_{i}'
                    lengths.append(len(question[var_key].split()))
                
                # –†–∞–Ω–∂–∏—Ä—É–µ–º: 1=shortest, 4=longest
                sorted_indices = sorted(range(4), key=lambda x: lengths[x])
                ranks = [0] * 4
                for rank, idx in enumerate(sorted_indices, 1):
                    ranks[idx] = rank
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–Ω–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                correct_pos = question['correct_position']  # 1-4
                correct_idx = correct_pos - 1  # 0-3 –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
                length_ranks.append(ranks[correct_idx])
    
    # –ü–æ–¥—Å—á–µ—Ç
    correct_dist = Counter(correct_positions)
    rank_dist = Counter(length_ranks)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    variants = [1, 2, 3, 4]
    counts = [correct_dist[v] for v in variants]
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A']
    
    ax1.bar(variants, counts, color=colors, edgecolor='black', linewidth=1.5)
    ax1.set_xlabel('–ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', fontsize=12, fontweight='bold')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12, fontweight='bold')
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', fontsize=14, fontweight='bold')
    ax1.set_xticks(variants)
    ax1.grid(axis='y', alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    total = sum(counts)
    for i, (v, c) in enumerate(zip(variants, counts)):
        percentage = (c / total) * 100
        ax1.text(v, c + 0.5, f'{c}\n({percentage:.1f}%)', 
                ha='center', fontweight='bold', fontsize=10)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤ –¥–ª–∏–Ω—ã
    ranks = [1, 2, 3, 4]
    rank_counts = [rank_dist[r] for r in ranks]
    
    ax2.bar(ranks, rank_counts, color=colors, edgecolor='black', linewidth=1.5)
    ax2.set_xlabel('–†–∞–Ω–≥ –¥–ª–∏–Ω—ã (1=–∫–æ—Ä–æ—Ç–∫–∏–π, 4=–¥–ª–∏–Ω–Ω—ã–π)', fontsize=12, fontweight='bold')
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12, fontweight='bold')
    ax2.set_title('–†–∞–Ω–≥–∏ –¥–ª–∏–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', fontsize=14, fontweight='bold')
    ax2.set_xticks(ranks)
    ax2.grid(axis='y', alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    for i, (r, c) in enumerate(zip(ranks, rank_counts)):
        percentage = (c / total) * 100
        ax2.text(r, c + 0.5, f'{c}\n({percentage:.1f}%)', 
                ha='center', fontweight='bold', fontsize=10)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è
    profile_key = 'profile' if 'profile' in data else 'profession'
    
    plt.suptitle(f"{data[profile_key]} - {data['specialization']}", 
                 fontsize=16, fontweight='bold', y=1.02)
    plt.tight_layout()
    plt.show()
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    print(f"\nüìä {data[profile_key]} - {data['specialization']}")
    print(f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    max_correct = max(counts)
    if max_correct > total * 0.7:
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –í–∞—Ä–∏–∞–Ω—Ç {counts.index(max_correct)+1} –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ {(max_correct/total)*100:.1f}% —Å–ª—É—á–∞–µ–≤!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª–∏–Ω—ã
    if rank_counts[3] > total * 0.5:  # –ï—Å–ª–∏ —Ä–∞–Ω–≥ 4 (—Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π) > 50%
        print(f"üö® –ö–†–ò–¢–ò–ß–ù–û! –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ {(rank_counts[3]/total)*100:.1f}% —Å–ª—É—á–∞–µ–≤!")
    elif rank_counts[3] > total * 0.35:
        print(f"‚ö†Ô∏è  –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ {(rank_counts[3]/total)*100:.1f}% —Å–ª—É—á–∞–µ–≤")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if rank_counts[0] > total * 0.5:
        print(f"üö® –ö–†–ò–¢–ò–ß–ù–û! –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ {(rank_counts[0]/total)*100:.1f}% —Å–ª—É—á–∞–µ–≤!")
    elif rank_counts[0] > total * 0.35:
        print(f"‚ö†Ô∏è  –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ {(rank_counts[0]/total)*100:.1f}% —Å–ª—É—á–∞–µ–≤")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–π forward slashes –∏–ª–∏ raw string (r"")
    plot_answer_analysis("output/final/DevOps_Engineer.json")