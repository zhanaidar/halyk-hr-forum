{
  "profile": "Backend разработчик",
  "specialization": "Python Backend",
  "file_name": "Backend_Python",
  "competencies": [
    {
      "competency": "Владение языком программирования Python",
      "type": "CORE",
      "importance": 90,
      "themes": [
        {
          "theme": "Структуры данных и алгоритмы в Python (списки, словари, множества, кортежи, генераторы)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какая структура данных Python гарантирует уникальность элементов и используется для быстрой проверки наличия ID клиента банка?",
              "correct_answer": "Множество (set)"
            },
            {
              "level": "Middle",
              "question": "В системе обработки банковских транзакций нужно хранить 10 миллионов номеров счетов для быстрой проверки существования. Почему set предпочтительнее list?",
              "correct_answer": "Set обеспечивает O(1) проверку вхождения против O(n) у list"
            },
            {
              "level": "Senior",
              "question": "При обработке 500 тысяч SMS-уведомлений телеком-оператора генератор вызывает memory leak в долгоживущем процессе. Какие архитектурные решения предотвратят это?",
              "correct_answer": "Батчинг с явным вызовом gc.collect(), ограничение через itertools.islice, переход на chunk-based processing"
            }
          ]
        },
        {
          "theme": "ООП в Python: классы, наследование, полиморфизм, магические методы, декораторы",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой магический метод вызывается при создании строкового представления объекта класса Transaction для логирования в банковской системе?",
              "correct_answer": "__str__ или __repr__ для разных целей представления"
            },
            {
              "level": "Middle",
              "question": "В чем разница между использованием @classmethod и @staticmethod при реализации фабричных методов для создания объектов Payment из разных источников (VISA, MasterCard, Halyk)?",
              "correct_answer": "@classmethod получает класс первым параметром, @staticmethod не получает автоматических параметров"
            },
            {
              "level": "Senior",
              "question": "Какие проблемы возникают при использовании множественного наследования для классов Account и Card в банковском API, и как правильно применить MRO для разрешения конфликтов методов authorize()?",
              "correct_answer": "Diamond problem и конфликты методов; использовать super() и контролировать порядок через C3 linearization"
            }
          ]
        },
        {
          "theme": "Асинхронное программирование: async/await, asyncio, корутины, event loop",
          "questions": [
            {
              "level": "Junior",
              "question": "Какое ключевое слово используется для определения асинхронной функции в Python?",
              "correct_answer": "async def"
            },
            {
              "level": "Middle",
              "question": "В чем разница между await asyncio.sleep() и time.sleep() при обработке множественных запросов к API банковского сервиса?",
              "correct_answer": "asyncio.sleep освобождает event loop для других корутин, time.sleep блокирует поток"
            },
            {
              "level": "Senior",
              "question": "Какую стратегию выбрать для обработки 10000 одновременных WebSocket-соединений с клиентами банка: asyncio.gather() или asyncio.as_completed(), и почему?",
              "correct_answer": "asyncio.as_completed, позволяет обрабатывать результаты по мере готовности, снижая пиковую нагрузку на память"
            }
          ]
        },
        {
          "theme": "Оптимизация производительности Python-кода: профилирование, управление памятью, GIL, многопоточность vs многопроцессность",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой встроенный модуль Python используется для профилирования производительности кода?",
              "correct_answer": "cProfile или profile"
            },
            {
              "level": "Middle",
              "question": "В банковском API обработка 10000 JSON-запросов занимает 45 секунд из-за GIL. Какой подход выбрать: многопоточность или многопроцессность?",
              "correct_answer": "Многопроцессность, так как парсинг JSON CPU-bound задача"
            },
            {
              "level": "Senior",
              "question": "В телеком-системе обработки платежей memory profiler показывает утечку памяти в循环е обработки транзакций. Циклические ссылки отсутствуют. Почему gc.collect() не решает проблему и как оптимизировать?",
              "correct_answer": "Объекты в старшем поколении GC редко проверяются, использовать gc.set_threshold или slots для классов"
            }
          ]
        }
      ]
    },
    {
      "competency": "Понимание архитектуры БД (OLTP/OLAP оптимизации)",
      "type": "DAILY",
      "importance": 70,
      "themes": [
        {
          "theme": "Индексы и стратегии индексирования для OLTP-систем (B-tree, Hash, частичные индексы)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой тип индекса в PostgreSQL используется по умолчанию при создании индекса на колонку с данными о номерах счетов клиентов банка?",
              "correct_answer": "B-tree индекс"
            },
            {
              "level": "Middle",
              "question": "В базе телеком-оператора таблица с 50 млн звонков содержит колонку status со значениями 'completed', 'failed', 'in_progress'. Нужен быстрый поиск активных звонков (2% от общего числа). Какой тип индекса оптимален?",
              "correct_answer": "Частичный индекс на WHERE status = 'in_progress'"
            },
            {
              "level": "Senior",
              "question": "В OLTP-системе банка после добавления составного B-tree индекса (client_id, transaction_date, amount) запросы с фильтром только по amount стали медленными. Почему индекс не используется и как исправить?",
              "correct_answer": "Индекс не работает из-за левостороннего правила B-tree. Создать отдельный индекс на amount."
            }
          ]
        },
        {
          "theme": "Партиционирование таблиц и шардирование для масштабирования нагрузки",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой тип партиционирования в PostgreSQL использовать для таблицы транзакций банка по дате создания?",
              "correct_answer": "RANGE партиционирование по столбцу created_at"
            },
            {
              "level": "Middle",
              "question": "В банковском приложении таблица платежей выросла до 500 млн записей, запросы за последний месяц медленные. Партиционирование по месяцам есть, но не помогает. Что проверить в первую очередь?",
              "correct_answer": "Индексы на партициях и constraint_exclusion в настройках PostgreSQL"
            },
            {
              "level": "Senior",
              "question": "Телеком оператор хранит CDR записи (100К записей/сек). После шардирования по customer_id аналитические отчеты по регионам стали выполняться 10+ минут с cross-shard запросами. Как исправить без переделки шардирования?",
              "correct_answer": "Внедрить отдельную OLAP базу с репликацией и партиционированием по region_id"
            }
          ]
        },
        {
          "theme": "Оптимизация запросов и анализ планов выполнения (EXPLAIN, ANALYZE)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какая команда PostgreSQL показывает план выполнения запроса без его реального выполнения?",
              "correct_answer": "EXPLAIN"
            },
            {
              "level": "Middle",
              "question": "В таблице транзакций банка 50 млн записей. Запрос с WHERE по client_id медленный. EXPLAIN показывает Seq Scan. Какое первое действие для оптимизации?",
              "correct_answer": "Создать индекс на поле client_id"
            },
            {
              "level": "Senior",
              "question": "В OLTP системе процессинга платежей EXPLAIN ANALYZE показывает Index Scan с cost=1000, но actual time в 10 раз больше расчётного. Vacuum выполнен. Какая наиболее вероятная причина?",
              "correct_answer": "Устаревшая статистика таблицы, необходим ANALYZE"
            }
          ]
        },
        {
          "theme": "Денормализация и материализованные представления для OLAP-аналитики",
          "questions": [
            {
              "level": "Junior",
              "question": "Что такое материализованное представление в PostgreSQL и чем оно отличается от обычного VIEW?",
              "correct_answer": "Материализованное представление физически хранит результат запроса на диске, требует обновления."
            },
            {
              "level": "Middle",
              "question": "В банковской системе нужно строить отчеты по транзакциям клиентов за месяц. Когда стоит денормализовать таблицы вместо использования материализованных представлений?",
              "correct_answer": "Когда данные редко меняются и нужна максимальная скорость чтения без задержек обновления."
            },
            {
              "level": "Senior",
              "question": "В телеком-системе материализованное представление для аналитики CDR-записей обновляется 2 часа и блокирует запросы. Как решить проблему без простоя?",
              "correct_answer": "REFRESH MATERIALIZED VIEW CONCURRENTLY с уникальным индексом или переключение между двумя таблицами."
            }
          ]
        }
      ]
    },
    {
      "competency": "Опыт интеграции с ML-сервисами и поисковыми системами",
      "type": "DAILY",
      "importance": 60,
      "themes": [
        {
          "theme": "Интеграция с REST API ML-моделей: обработка запросов, батчинг, таймауты и retry-стратегии",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой HTTP-метод используется для отправки данных клиента в ML-сервис для скоринга кредитоспособности?",
              "correct_answer": "POST метод для передачи данных в теле запроса"
            },
            {
              "level": "Middle",
              "question": "Какую стратегию retry следует применить при интеграции с ML-сервисом определения мошеннических транзакций, если модель периодически перегружена?",
              "correct_answer": "Exponential backoff с jitter и ограничением максимального числа попыток"
            },
            {
              "level": "Senior",
              "question": "В банковском приложении ML-сервис анализа документов обрабатывает запросы 2-5 секунд. Клиенты жалуются на таймауты при загрузке удостоверений личности. Как оптимизировать архитектуру интеграции?",
              "correct_answer": "Асинхронная обработка через очередь с webhook/polling для получения результата"
            }
          ]
        },
        {
          "theme": "Работа с Elasticsearch: индексация данных, построение поисковых запросов и оптимизация производительности",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой метод Python Elasticsearch клиента используется для добавления документа в индекс?",
              "correct_answer": "Метод index() или create() для добавления документа"
            },
            {
              "level": "Middle",
              "question": "В чем разница между keyword и text типами полей при индексации данных клиентов банка в Elasticsearch?",
              "correct_answer": "Keyword для точного поиска без анализа, text для полнотекстового поиска"
            },
            {
              "level": "Senior",
              "question": "В банковском приложении поиск по транзакциям занимает 3-5 секунд при 50 млн документов. Какие первые шаги оптимизации производительности вы предпримете?",
              "correct_answer": "Проверить шардирование, добавить фильтры в filter context, оптимизировать mapping и использовать routing"
            }
          ]
        },
        {
          "theme": "Асинхронная обработка ML-инференса: очереди задач, кэширование результатов и мониторинг latency",
          "questions": [
            {
              "level": "Junior",
              "question": "Какая библиотека Python используется для создания очередей задач при асинхронной обработке ML-инференса?",
              "correct_answer": "Celery с брокером Redis или RabbitMQ"
            },
            {
              "level": "Middle",
              "question": "В банковском приложении нужно кэшировать результаты ML-классификации транзакций. Какую стратегию кэширования выбрать, если модель обновляется ежедневно?",
              "correct_answer": "TTL-кэш с временем жизни 24 часа и версионированием модели"
            },
            {
              "level": "Senior",
              "question": "В телеком-системе latency ML-инференса для fraud detection выросла с 200ms до 3s при нагрузке. Какие первые три метрики вы проверите для диагностики?",
              "correct_answer": "Размер очереди задач, memory usage модели, время сериализации/десериализации данных"
            }
          ]
        },
        {
          "theme": "Векторный поиск и embedding-модели: интеграция с vector databases (Pinecone, Milvus, pgvector) для семантического поиска",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой метод pgvector используется для создания индекса для векторного поиска по косинусной близости?",
              "correct_answer": "CREATE INDEX USING ivfflat с операторным классом vector_cosine_ops"
            },
            {
              "level": "Middle",
              "question": "В системе поиска банковских документов выбираете между Pinecone и pgvector. Какое решение предпочтительнее при требовании ACID-транзакций для синхронизации метаданных и векторов?",
              "correct_answer": "pgvector, так как обеспечивает транзакционную согласованность в PostgreSQL"
            },
            {
              "level": "Senior",
              "question": "В продакшене телеком-оператора семантический поиск по обращениям клиентов показывает деградацию качества после 500K векторов в Milvus. Какие действия предпримете для оптимизации?",
              "correct_answer": "Настроить шардирование коллекции, оптимизировать nlist параметр IVF индекса, увеличить nprobe"
            }
          ]
        }
      ]
    },
    {
      "competency": "Проектирование REST API",
      "type": "CORE",
      "importance": 85,
      "themes": [
        {
          "theme": "Методы HTTP и принципы RESTful архитектуры",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой HTTP метод должен использоваться для получения списка банковских счетов клиента в REST API?",
              "correct_answer": "GET метод для безопасного чтения данных"
            },
            {
              "level": "Middle",
              "question": "В чем разница между использованием PUT и PATCH при обновлении данных клиента в банковской системе?",
              "correct_answer": "PUT заменяет весь ресурс, PATCH обновляет отдельные поля"
            },
            {
              "level": "Senior",
              "question": "Как спроектировать идемпотентность при обработке платежных транзакций через POST запросы в банковском API?",
              "correct_answer": "Использовать idempotency key в заголовках для дедупликации повторных запросов"
            }
          ]
        },
        {
          "theme": "Версионирование API и обратная совместимость",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой HTTP заголовок стандартно используется для указания версии API в REST запросах?",
              "correct_answer": "Accept с указанием application/vnd.company.v1+json или Custom-API-Version"
            },
            {
              "level": "Middle",
              "question": "В банковском API необходимо изменить формат поля ИИН клиента с string на object. Какой подход версионирования минимизирует breaking changes для существующих клиентов?",
              "correct_answer": "Добавить новое поле iin_structured, сохранив старое iin deprecated"
            },
            {
              "level": "Senior",
              "question": "Телеком компания поддерживает 4 версии API для абонентов. Как спроектировать архитектуру для минимизации дублирования кода при сохранении независимости версий?",
              "correct_answer": "Единое доменное ядро, версионированные адаптеры на уровне presentation layer с трансформерами"
            }
          ]
        },
        {
          "theme": "Проектирование структуры ресурсов и эндпоинтов",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой HTTP метод используется для получения списка банковских транзакций клиента в REST API?",
              "correct_answer": "GET метод для безопасного получения данных"
            },
            {
              "level": "Middle",
              "question": "Как правильно структурировать эндпоинт для получения истории платежей конкретного клиента банка: /clients/{id}/payments или /payments?client_id={id}?",
              "correct_answer": "Вложенный ресурс /clients/{id}/payments показывает иерархию отношений"
            },
            {
              "level": "Senior",
              "question": "Почему для API банковских переводов лучше использовать /transfers вместо PUT /accounts/{from}/balance и /accounts/{to}/balance при проектировании эндпоинтов?",
              "correct_answer": "Перевод - отдельная бизнес-операция требующая атомарности, аудита и идемпотентности"
            }
          ]
        },
        {
          "theme": "Обработка ошибок, статус-коды и стандарты документирования API",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой HTTP статус-код должен возвращать REST API при успешном создании нового клиента банка?",
              "correct_answer": "201 Created"
            },
            {
              "level": "Middle",
              "question": "В чем разница между использованием статус-кодов 401 и 403 при проверке доступа к API платежных операций?",
              "correct_answer": "401 - не аутентифицирован, 403 - аутентифицирован но нет прав"
            },
            {
              "level": "Senior",
              "question": "Как спроектировать централизованную обработку ошибок в REST API банковской системы для соблюдения PCI DSS и предотвращения утечки конфиденциальной информации в responses?",
              "correct_answer": "Middleware с маппингом исключений, логирование в защищенное хранилище, стандартизированные ошибки без деталей реализации"
            }
          ]
        }
      ]
    }
  ]
}