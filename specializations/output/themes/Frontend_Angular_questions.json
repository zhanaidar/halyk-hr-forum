{
  "profile": "Frontend разработчик",
  "specialization": "Angular",
  "file_name": "Frontend_Angular",
  "competencies": [
    {
      "competency": "Знание языка программирования JavaScript",
      "type": "CORE",
      "importance": 85,
      "themes": [
        {
          "theme": "Типы данных, операторы и области видимости переменных (var, let, const)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой оператор объявления переменной создает константу, значение которой нельзя переприсвоить после инициализации?",
              "correct_answer": "const"
            },
            {
              "level": "Middle",
              "question": "В Angular-компоненте обработчика клика на кнопку перевода средств используется var i в цикле. Почему при быстрых кликах может возникнуть race condition, и какой оператор решит проблему?",
              "correct_answer": "var не имеет блочной области видимости, использовать let"
            },
            {
              "level": "Senior",
              "question": "В SPA банковского приложения модуль авторизации экспортирует объект config через const. Почему мутация его свойств из другого модуля создает уязвимость, и как архитектурно предотвратить это без Object.freeze?",
              "correct_answer": "const защищает только ссылку, использовать геттеры или immutable паттерны"
            }
          ]
        },
        {
          "theme": "Асинхронное программирование: Promises, async/await и Event Loop",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой метод Promise используется для обработки ошибок при загрузке данных клиентов из API банка?",
              "correct_answer": "Метод .catch() для перехвата отклоненных промисов"
            },
            {
              "level": "Middle",
              "question": "В Angular-приложении банка нужно последовательно загрузить профиль клиента, затем его счета, затем транзакции. Что эффективнее: цепочка .then() или async/await?",
              "correct_answer": "async/await для читаемости и упрощения обработки ошибок"
            },
            {
              "level": "Senior",
              "question": "В Angular-приложении телеком-оператора при обработке 10000 SMS-уведомлений через Promise.all() один запрос падает и блокирует всю операцию. Как архитектурно решить проблему для продолжения обработки остальных?",
              "correct_answer": "Использовать Promise.allSettled() для обработки всех результатов независимо от статуса"
            }
          ]
        },
        {
          "theme": "Прототипное наследование, классы ES6+ и контекст выполнения (this)",
          "questions": [
            {
              "level": "Junior",
              "question": "Что произойдет с контекстом this внутри стрелочной функции в Angular компоненте?",
              "correct_answer": "Стрелочная функция наследует this из лексического окружения."
            },
            {
              "level": "Middle",
              "question": "В чем разница между использованием class и constructor function для создания сервиса обработки транзакций в банковском приложении?",
              "correct_answer": "Class имеет более читаемый синтаксис, но оба создают прототипное наследование."
            },
            {
              "level": "Senior",
              "question": "Почему при реализации кастомного декоратора для логирования банковских операций важно сохранять оригинальный контекст this методов класса?",
              "correct_answer": "Потеря контекста приведет к ошибкам доступа к свойствам экземпляра."
            }
          ]
        },
        {
          "theme": "Функции высшего порядка, замыкания и методы массивов (map, filter, reduce)",
          "questions": [
            {
              "level": "Junior",
              "question": "Что возвращает метод map() при применении к массиву транзакций клиентов банка?",
              "correct_answer": "Новый массив с результатами применения функции к каждому элементу"
            },
            {
              "level": "Middle",
              "question": "В Angular-приложении банка нужно отфильтровать активные счета клиента и посчитать общую сумму. Какую комбинацию методов массива следует использовать?",
              "correct_answer": "filter() для отбора активных счетов, затем reduce() для суммирования"
            },
            {
              "level": "Senior",
              "question": "При обработке 50000+ транзакций в реальном времени с использованием map/filter/reduce возникают проблемы с производительностью. Какие оптимизации архитектуры предложите для Angular-приложения телеком-оператора?",
              "correct_answer": "Виртуальный скроллинг, Web Workers для вычислений, memoization через замыкания, разбиение на chunks"
            }
          ]
        }
      ]
    },
    {
      "competency": "Знание языка программирования TypeScript",
      "type": "CORE",
      "importance": 90,
      "themes": [
        {
          "theme": "Система типов TypeScript: примитивы, union, intersection, type guards и narrowing",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой тип TypeScript использовать для поля accountStatus, если оно может быть 'active', 'blocked' или 'pending'?",
              "correct_answer": "Union type: 'active' | 'blocked' | 'pending'"
            },
            {
              "level": "Middle",
              "question": "В Angular-сервисе обработки платежей приходит объект unknown типа. Как безопасно проверить, что это объект с полями amount и currency перед использованием?",
              "correct_answer": "Использовать type guard с проверкой typeof и in operator"
            },
            {
              "level": "Senior",
              "question": "В системе интернет-банкинга нужен тип для транзакций разных категорий с общими полями (id, date) и уникальными (transfer имеет recipient, payment имеет provider). Как спроектировать типобезопасную архитектуру с автоматическим narrowing?",
              "correct_answer": "Discriminated union с литеральным полем type и intersection базового типа"
            }
          ]
        },
        {
          "theme": "Generics и продвинутые типы: utility types, mapped types, conditional types",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой utility type TypeScript используется для создания типа со всеми опциональными свойствами из существующего типа BankAccount?",
              "correct_answer": "Partial<BankAccount>"
            },
            {
              "level": "Middle",
              "question": "В чем разница между использованием Pick<User, 'iin' | 'phone'> и Omit<User, 'password'> при создании типа для API ответа с данными клиента банка?",
              "correct_answer": "Pick явно выбирает нужные поля, Omit исключает ненужные из всех."
            },
            {
              "level": "Senior",
              "question": "Как спроектировать conditional type для автоматического извлечения типа ответа API в зависимости от кода операции ('payment' | 'transfer' | 'deposit'), чтобы избежать дублирования типов при масштабировании?",
              "correct_answer": "type ApiResponse<T> = T extends 'payment' ? PaymentData : T extends 'transfer' ? TransferData : DepositData"
            }
          ]
        },
        {
          "theme": "Декораторы, метаданные и их применение в Angular",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой декоратор используется для создания Angular компонента и какие обязательные метаданные он принимает?",
              "correct_answer": "@Component с обязательным свойством selector и template или templateUrl"
            },
            {
              "level": "Middle",
              "question": "В чем разница между декораторами @Input() и @Output() в компоненте формы банковского перевода, и когда использовать каждый из них?",
              "correct_answer": "@Input для передачи данных в компонент, @Output с EventEmitter для отправки событий наружу"
            },
            {
              "level": "Senior",
              "question": "Почему использование декоратора @HostListener вместо обработчиков событий в template может вызвать проблемы производительности в большом Angular приложении банка с множеством компонентов?",
              "correct_answer": "@HostListener добавляет глобальные слушатели без автоматической отписки, создавая memory leaks и лишние проверки change detection"
            }
          ]
        },
        {
          "theme": "Асинхронное программирование: Promise, async/await, Observable и типизация RxJS",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой тип возвращает async функция в TypeScript?",
              "correct_answer": "Promise с типом возвращаемого значения"
            },
            {
              "level": "Middle",
              "question": "В Angular-сервисе банка нужно загрузить данные клиента и его счета параллельно. Какой RxJS оператор использовать для комбинирования двух Observable?",
              "correct_answer": "forkJoin или combineLatest в зависимости от требований"
            },
            {
              "level": "Senior",
              "question": "В приложении телеком-оператора Observable стрим тарифов вызывает memory leak при переходе между роутами. Как правильно типизировать метод cleanup с учетом Subject и takeUntil паттерна?",
              "correct_answer": "Subject<void> с takeUntil в pipe и complete в ngOnDestroy"
            }
          ]
        }
      ]
    },
    {
      "competency": "Знание Angular",
      "type": "CORE",
      "importance": 90,
      "themes": [
        {
          "theme": "Компоненты и их жизненный цикл (lifecycle hooks, взаимодействие между компонентами, ViewChild, ContentChild)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой lifecycle hook в Angular вызывается один раз после инициализации всех input-свойств компонента?",
              "correct_answer": "ngOnInit"
            },
            {
              "level": "Middle",
              "question": "В чем разница между @ViewChild и @ContentChild при взаимодействии компонентов в форме загрузки документов клиента?",
              "correct_answer": "ViewChild находит элементы в шаблоне компонента, ContentChild в проецируемом контенте ng-content"
            },
            {
              "level": "Senior",
              "question": "Почему использование ngAfterViewInit для доступа к @ViewChild элементу безопаснее, чем ngOnInit в компоненте списка транзакций с виртуальным скроллингом?",
              "correct_answer": "ViewChild гарантированно инициализирован только после рендеринга view, ngOnInit может вернуть undefined"
            }
          ]
        },
        {
          "theme": "Реактивное программирование с RxJS (Observable, Subject, операторы, управление подписками, async pipe)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой оператор RxJS используется для отмены предыдущего HTTP-запроса при новом вводе в поисковую строку транзакций?",
              "correct_answer": "switchMap"
            },
            {
              "level": "Middle",
              "question": "В чем разница между Subject и BehaviorSubject при реализации сервиса уведомлений о статусе платежа в банковском приложении?",
              "correct_answer": "BehaviorSubject хранит и эмитит последнее значение новым подписчикам"
            },
            {
              "level": "Senior",
              "question": "Почему использование async pipe предпочтительнее ручных подписок в компонентах списка клиентов с пагинацией и фильтрацией по 10000+ записей?",
              "correct_answer": "Автоматически отписывается при уничтожении компонента, предотвращая утечки памяти"
            }
          ]
        },
        {
          "theme": "Dependency Injection и сервисы (провайдеры, иерархия инжекторов, singleton-сервисы, InjectionToken)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой декоратор используется для создания singleton-сервиса, доступного во всем приложении банка?",
              "correct_answer": "@Injectable({ providedIn: 'root' })"
            },
            {
              "level": "Middle",
              "question": "В приложении банка есть модули для клиентов и сотрудников. Где должен быть провайден сервис логирования, чтобы каждый модуль имел свой экземпляр?",
              "correct_answer": "В массиве providers каждого feature-модуля отдельно"
            },
            {
              "level": "Senior",
              "question": "В микрофронтенд-архитектуре банковского портала несколько Angular-приложений используют общие сервисы. Как предотвратить создание множественных экземпляров singleton-сервиса при lazy-loading модулей?",
              "correct_answer": "Использовать providedIn: 'root' или forRoot() паттерн для предоставления сервиса только в корневом инжекторе"
            }
          ]
        },
        {
          "theme": "Модули и маршрутизация (NgModules, lazy loading, guards, resolvers, preloading strategies)",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой декоратор используется для создания модуля маршрутизации в Angular приложении?",
              "correct_answer": "@NgModule с импортом RouterModule.forRoot() или RouterModule.forChild()"
            },
            {
              "level": "Middle",
              "question": "В чем разница между CanActivate и CanLoad guards при защите lazy-loaded модуля с личным кабинетом клиента банка?",
              "correct_answer": "CanLoad предотвращает загрузку модуля, CanActivate проверяет доступ после загрузки"
            },
            {
              "level": "Senior",
              "question": "Как оптимизировать загрузку модулей интернет-банкинга с 15+ lazy-loaded разделами, чтобы минимизировать время до интерактивности критичных операций?",
              "correct_answer": "PreloadingStrategy с приоритизацией критичных модулей и QuicklinkStrategy для предзагрузки по ховеру"
            }
          ]
        }
      ]
    },
    {
      "competency": "Знание HTML5, CSS + Tailwind, умение верстки",
      "type": "CORE",
      "importance": 80,
      "themes": [
        {
          "theme": "Семантическая разметка HTML5: использование структурных элементов, форм, атрибутов accessibility и валидация",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой HTML5 элемент используется для обозначения основного содержимого страницы интернет-банкинга, исключая шапку и футер?",
              "correct_answer": "Элемент <main>, содержит уникальный контент страницы."
            },
            {
              "level": "Middle",
              "question": "В форме онлайн-заявки на кредит нужно поле для ИИН. Какие атрибуты обеспечат правильную валидацию и accessibility для пользователей скринридеров?",
              "correct_answer": "pattern для 12 цифр, required, aria-label, aria-describedby для ошибок, inputmode numeric."
            },
            {
              "level": "Senior",
              "question": "Почему для dashboard интернет-банка с виджетами балансов, транзакций и уведомлений лучше использовать <section> с aria-label вместо <article>?",
              "correct_answer": "Section группирует связанный контент dashboard, article подразумевает независимый самодостаточный контент для синдикации."
            }
          ]
        },
        {
          "theme": "CSS Layout и позиционирование: Flexbox, Grid, позиционирование элементов и создание адаптивных макетов",
          "questions": [
            {
              "level": "Junior",
              "question": "Какое свойство CSS Grid используется для определения количества и размера колонок в сетке?",
              "correct_answer": "grid-template-columns"
            },
            {
              "level": "Middle",
              "question": "В мобильном приложении банка нужно разместить карточки услуг в ряд с автоматическим переносом. Что использовать: Flexbox с flex-wrap или CSS Grid с auto-fit?",
              "correct_answer": "Flexbox с flex-wrap для динамического переноса контента"
            },
            {
              "level": "Senior",
              "question": "При проектировании дашборда банковской системы с множеством виджетов разного размера, почему CSS Grid с named areas предпочтительнее Flexbox для основного layout?",
              "correct_answer": "Grid обеспечивает двумерное позиционирование, явный контроль областей и упрощает адаптивную реструктуризацию макета"
            }
          ]
        },
        {
          "theme": "Tailwind CSS: утилитарные классы, кастомизация конфигурации, responsive design и оптимизация production build",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой утилитарный класс Tailwind CSS устанавливает flex-direction: column для мобильной версии формы регистрации клиента банка?",
              "correct_answer": "flex-col"
            },
            {
              "level": "Middle",
              "question": "Как в tailwind.config.js добавить корпоративный цвет банка #00A651 для использования в классах text и bg, сохранив стандартную палитру?",
              "correct_answer": "Расширить theme.extend.colors, добавив corporate: '#00A651'"
            },
            {
              "level": "Senior",
              "question": "Почему для production build интернет-банкинга следует использовать purge/content с safelist вместо отключения tree-shaking динамических классов?",
              "correct_answer": "Минимизируется размер бандла, сохраняя только критичные динамические классы через safelist"
            }
          ]
        },
        {
          "theme": "Продвинутые техники верстки: CSS-переменные, анимации, transitions, псевдоэлементы и кросс-браузерная совместимость",
          "questions": [
            {
              "level": "Junior",
              "question": "Какой синтаксис используется для объявления CSS-переменной в корневом элементе?",
              "correct_answer": ":root { --variable-name: value; }"
            },
            {
              "level": "Middle",
              "question": "В чем разница между CSS transition и animation при создании hover-эффекта для кнопки оплаты в банковском интерфейсе?",
              "correct_answer": "Transition срабатывает при изменении состояния, animation запускается независимо и поддерживает keyframes."
            },
            {
              "level": "Senior",
              "question": "Как спроектировать систему CSS-переменных для темизации банковского Angular-приложения с учетом брендов дочерних компаний и требований доступности?",
              "correct_answer": "Создать многоуровневую иерархию переменных: базовые токены, семантические цвета, компонентные значения с fallback для старых браузеров."
            }
          ]
        }
      ]
    }
  ]
}