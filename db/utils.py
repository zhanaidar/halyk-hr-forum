import random
from db.database import get_db_connection


async def generate_test_topics(user_test_id: int, specialization_id: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 8 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞ —é–∑–µ—Ä–∞
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ importance DESC)
    2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–µ–º –±—Ä–∞—Ç—å –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    3. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–º—ã –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_test_topics —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º)
    
    Args:
        user_test_id: ID —Ç–µ—Å—Ç–∞ —é–∑–µ—Ä–∞
        specialization_id: ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    async with get_db_connection() as conn:
        async with conn.cursor() as cur:
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏)
            await cur.execute("""
                SELECT id, name, importance
                FROM competencies
                WHERE specialization_id = %s
                ORDER BY importance DESC
            """, (specialization_id,))
            
            competencies = await cur.fetchall()
            num_competencies = len(competencies)
            
            if num_competencies == 0:
                raise Exception(f"No competencies found for specialization_id={specialization_id}")
            
            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º
            topics_distribution = calculate_topics_distribution(num_competencies)
            
            print(f"üìä Competencies: {num_competencies}, Distribution: {topics_distribution}")
            
            # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
            topic_order = 1
            selected_topics = []
            
            for idx, (comp_id, comp_name, importance) in enumerate(competencies):
                num_topics_needed = topics_distribution[idx]
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã —ç—Ç–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
                await cur.execute("""
                    SELECT id, name
                    FROM topics
                    WHERE competency_id = %s
                """, (comp_id,))
                
                available_topics = await cur.fetchall()
                
                if len(available_topics) < num_topics_needed:
                    print(f"‚ö†Ô∏è Competency '{comp_name}' has only {len(available_topics)} topics, needed {num_topics_needed}")
                    num_topics_needed = len(available_topics)
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–º—ã
                chosen_topics = random.sample(available_topics, num_topics_needed)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å –ø–æ—Ä—è–¥–∫–æ–º
                for topic_id, topic_name in chosen_topics:
                    selected_topics.append({
                        'topic_id': topic_id,
                        'competency_id': comp_id,
                        'topic_order': topic_order,
                        'topic_name': topic_name,
                        'comp_name': comp_name
                    })
                    topic_order += 1
                
                print(f"  ‚úÖ Competency '{comp_name}' (importance={importance}): selected {num_topics_needed} topics")
            
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            for topic_data in selected_topics:
                await cur.execute("""
                    INSERT INTO user_test_topics 
                    (user_test_id, topic_id, competency_id, topic_order)
                    VALUES (%s, %s, %s, %s)
                """, (
                    user_test_id,
                    topic_data['topic_id'],
                    topic_data['competency_id'],
                    topic_data['topic_order']
                ))
                
                print(f"    üìå Order {topic_data['topic_order']}: {topic_data['topic_name']}")
            
            print(f"‚úÖ Generated {len(selected_topics)} topics for user_test_id={user_test_id}")


def calculate_topics_distribution(num_competencies: int) -> list:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Ç–µ–º –±—Ä–∞—Ç—å –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ 8 —Ç–µ–º
    
    –ü—Ä–∞–≤–∏–ª–∞:
    - 4 –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: –≤—Å–µ –ø–æ 2 —Ç–µ–º—ã (2+2+2+2 = 8)
    - 5 –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: —Ç–æ–ø-3 –ø–æ 2 —Ç–µ–º—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ 1 (2+2+2+1+1 = 8)
    - 6 –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: —Ç–æ–ø-2 –ø–æ 2 —Ç–µ–º—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ 1 (2+2+1+1+1+1 = 8)
    
    Args:
        num_competencies: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        
    Returns:
        list: —Å–∫–æ–ª—å–∫–æ —Ç–µ–º –±—Ä–∞—Ç—å –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ [2, 2, 1, 1, 1, 1]
    """
    TOTAL_TOPICS = 8
    
    if num_competencies == 4:
        # –í—Å–µ –ø–æ 2 —Ç–µ–º—ã
        return [2, 2, 2, 2]
    
    elif num_competencies == 5:
        # –¢–æ–ø-3: –ø–æ 2 —Ç–µ–º—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ 2: –ø–æ 1 —Ç–µ–º–µ
        return [2, 2, 2, 1, 1]
    
    elif num_competencies == 6:
        # –¢–æ–ø-2: –ø–æ 2 —Ç–µ–º—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ 4: –ø–æ 1 —Ç–µ–º–µ
        return [2, 2, 1, 1, 1, 1]
    
    else:
        # –ï—Å–ª–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –º–µ–Ω—å—à–µ 4 –∏–ª–∏ –±–æ–ª—å—à–µ 6
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
        base_topics = TOTAL_TOPICS // num_competencies
        remainder = TOTAL_TOPICS % num_competencies
        
        distribution = [base_topics] * num_competencies
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–≤—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
        for i in range(remainder):
            distribution[i] += 1
        
        return distribution


async def get_test_progress(user_test_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
    
    Returns:
        {
            "competencies": [
                {
                    "id": 1,
                    "name": "–ù–∞–≤—ã–∫–∏ Java",
                    "answered": 5,
                    "correct": 2,
                    "total": 6
                },
                ...
            ],
            "total": {
                "answered": 10,
                "correct": 5,
                "total": 24
            },
            "current_question_number": 11
        }
    """
    async with get_db_connection() as conn:
        async with conn.cursor() as cur:
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
            await cur.execute("""
                SELECT current_question_number
                FROM user_specialization_tests
                WHERE id = %s
            """, (user_test_id,))
            
            row = await cur.fetchone()
            current_question = row[0] if row else 1
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
            await cur.execute("""
                SELECT 
                    c.id,
                    c.name,
                    COUNT(DISTINCT q.id) as total_questions,
                    COUNT(DISTINCT CASE WHEN ta.id IS NOT NULL THEN q.id END) as answered,
                    COUNT(DISTINCT CASE WHEN ta.is_correct = true THEN q.id END) as correct
                FROM user_test_topics utt
                JOIN competencies c ON c.id = utt.competency_id
                JOIN topics t ON t.id = utt.topic_id
                JOIN questions q ON q.topic_id = t.id
                LEFT JOIN test_answers ta ON ta.question_id = q.id AND ta.user_test_id = utt.user_test_id
                WHERE utt.user_test_id = %s
                GROUP BY c.id, c.name
                ORDER BY MIN(utt.topic_order)
            """, (user_test_id,))
            
            competencies_stats = await cur.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            competencies = []
            total_answered = 0
            total_correct = 0
            total_questions = 0
            
            for comp_id, comp_name, total, answered, correct in competencies_stats:
                competencies.append({
                    "id": comp_id,
                    "name": comp_name,
                    "answered": answered,
                    "correct": correct,
                    "total": total
                })
                total_answered += answered
                total_correct += correct
                total_questions += total
            
            return {
                "competencies": competencies,
                "total": {
                    "answered": total_answered,
                    "correct": total_correct,
                    "total": total_questions
                },
                "current_question_number": current_question
            }