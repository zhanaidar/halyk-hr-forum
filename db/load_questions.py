import json
import asyncio
import sys
import os
import re

# FIX –¥–ª—è Windows
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from db.database import init_db_pool, close_db_pool, get_db_connection


def extract_importance(competency_name: str) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    –ü—Ä–∏–º–µ—Ä: "–ó–Ω–∞–Ω–∏–µ C# [CORE 90%]" -> 90
    """
    match = re.search(r'\[CORE\s+(\d+)%\]', competency_name)
    if match:
        return int(match.group(1))
    return 50  # Default importance


async def load_questions_from_json(json_file_path: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î"""
    
    # –ß–∏—Ç–∞–µ–º JSON
    with open(json_file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    profiles_data = data.get('profiles', [])
    
    if not profiles_data:
        print("‚ùå No profiles found in JSON file")
        return
    
    async with get_db_connection() as conn:
        async with conn.cursor() as cur:
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ profile (–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
            profiles_dict = {}
            for item in profiles_data:
                profile_name = item['profile']
                specialization_name = item['specialization']
                
                if profile_name not in profiles_dict:
                    profiles_dict[profile_name] = []
                
                profiles_dict[profile_name].append({
                    'specialization': specialization_name,
                    'competencies': item['competencies']
                })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
            for profile_name, specializations_list in profiles_dict.items():
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º: –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                has_specializations = len(specializations_list) > 1 or (
                    len(specializations_list) == 1 and 
                    specializations_list[0]['specialization'] != profile_name
                )
                
                # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
                await cur.execute(
                    "INSERT INTO profiles (name, has_specializations) VALUES (%s, %s) RETURNING id",
                    (profile_name, has_specializations)
                )
                profile_id = (await cur.fetchone())[0]
                print(f"\n‚úÖ Created profile: {profile_name} (ID: {profile_id}, has_spec: {has_specializations})")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                for spec_data in specializations_list:
                    specialization_name = spec_data['specialization']
                    
                    # –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                    await cur.execute(
                        "INSERT INTO specializations (profile_id, name) VALUES (%s, %s) RETURNING id",
                        (profile_id, specialization_name)
                    )
                    specialization_id = (await cur.fetchone())[0]
                    print(f"  ‚úÖ Specialization: {specialization_name} (ID: {specialization_id})")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
                    for competency in spec_data['competencies']:
                        competency_name = competency['competency_name']
                        importance = extract_importance(competency_name)
                        
                        await cur.execute(
                            "INSERT INTO competencies (specialization_id, name, importance) VALUES (%s, %s, %s) RETURNING id",
                            (specialization_id, competency_name, importance)
                        )
                        competency_id = (await cur.fetchone())[0]
                        print(f"    ‚úÖ Competency: {competency_name} (ID: {competency_id}, importance: {importance})")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–º—ã
                        for topic in competency['topics']:
                            topic_name = topic['topic_name']
                            
                            await cur.execute(
                                "INSERT INTO topics (competency_id, name) VALUES (%s, %s) RETURNING id",
                                (competency_id, topic_name)
                            )
                            topic_id = (await cur.fetchone())[0]
                            print(f"      ‚úÖ Topic: {topic_name} (ID: {topic_id})")
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
                            for question in topic['questions']:
                                await cur.execute(
                                    """INSERT INTO questions 
                                    (topic_id, level, question_text, var_1, var_2, var_3, var_4, correct_answer)
                                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)""",
                                    (
                                        topic_id,
                                        question['level'],
                                        question['question_text'],
                                        question['var_1'],
                                        question['var_2'],
                                        question['var_3'],
                                        question['var_4'],
                                        question['correct_answer']
                                    )
                                )
                            print(f"        ‚úÖ Loaded {len(topic['questions'])} questions")
            
            print(f"\n‚úÖ Successfully loaded all data from {json_file_path}")


async def main():
    """Main function"""
    print("üöÄ Starting database loading...")
    
    # Initialize connection pool
    await init_db_pool()
    
    # Load questions from JSON
    await load_questions_from_json('Questions.json')
    
    # Close pool
    await close_db_pool()
    
    print("\n‚úÖ Done!")


if __name__ == "__main__":
    asyncio.run(main())